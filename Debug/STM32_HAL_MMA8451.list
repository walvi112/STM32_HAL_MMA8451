
STM32_HAL_MMA8451.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08006f38  08006f38  00016f38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073fc  080073fc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080073fc  080073fc  000173fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007404  08007404  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007404  08007404  00017404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007408  08007408  00017408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800740c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  200001d4  080075e0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  080075e0  00020414  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000afc4  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a40  00000000  00000000  0002b20b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a28  00000000  00000000  0002cc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007e6  00000000  00000000  0002d678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016e47  00000000  00000000  0002de5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cfe5  00000000  00000000  00044ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a290  00000000  00000000  00051c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b68  00000000  00000000  000dbf1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000dfa84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f1c 	.word	0x08006f1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08006f1c 	.word	0x08006f1c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <MMA8451_Init>:
static HAL_StatusTypeDef writeReg(MMA8451 *sensor, uint8_t _regAddr, uint8_t *_data, uint8_t _len);
static HAL_StatusTypeDef readReg8(MMA8451 *sensor, uint8_t _regAddr, uint8_t *_data);
static HAL_StatusTypeDef readReg(MMA8451 *sensor, uint8_t _regAddr, uint8_t *_data, uint8_t _len);

bool MMA8451_Init(MMA8451 *sensor, I2C_HandleTypeDef *_hi2c, uint8_t _addr)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	71fb      	strb	r3, [r7, #7]
	sensor->_Addr = _addr << 1;
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	701a      	strb	r2, [r3, #0]
	sensor->_hi2c = _hi2c;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	615a      	str	r2, [r3, #20]
	uint8_t deviceID = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	75fb      	strb	r3, [r7, #23]
	if (readReg8(sensor, MMA8451_REG_WHOAMI, &deviceID) != HAL_OK || deviceID != MMA8451_WHOAMI_ADDRESS)
 8000ed6:	f107 0317 	add.w	r3, r7, #23
 8000eda:	461a      	mov	r2, r3
 8000edc:	210d      	movs	r1, #13
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	f000 f967 	bl	80011b2 <readReg8>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d102      	bne.n	8000ef0 <MMA8451_Init+0x3c>
 8000eea:	7dfb      	ldrb	r3, [r7, #23]
 8000eec:	2b2a      	cmp	r3, #42	; 0x2a
 8000eee:	d001      	beq.n	8000ef4 <MMA8451_Init+0x40>
		return false;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e02f      	b.n	8000f54 <MMA8451_Init+0xa0>


	writeReg8(sensor, MMA8451_REG_CTRL_REG2, 0x40); //reset
 8000ef4:	2240      	movs	r2, #64	; 0x40
 8000ef6:	212b      	movs	r1, #43	; 0x2b
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f000 f93c 	bl	8001176 <writeReg8>

	uint8_t reg_ctrl_reg2;
	do
	{
		readReg8(sensor, MMA8451_REG_CTRL_REG2, &reg_ctrl_reg2);
 8000efe:	f107 0316 	add.w	r3, r7, #22
 8000f02:	461a      	mov	r2, r3
 8000f04:	212b      	movs	r1, #43	; 0x2b
 8000f06:	68f8      	ldr	r0, [r7, #12]
 8000f08:	f000 f953 	bl	80011b2 <readReg8>
	} while (reg_ctrl_reg2 & 0x40);
 8000f0c:	7dbb      	ldrb	r3, [r7, #22]
 8000f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1f3      	bne.n	8000efe <MMA8451_Init+0x4a>


	 // enable 4G range
	writeReg8(sensor, MMA8451_REG_XYZ_DATA_CFG, MMA8451_RANGE_4_G);
 8000f16:	2201      	movs	r2, #1
 8000f18:	210e      	movs	r1, #14
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	f000 f92b 	bl	8001176 <writeReg8>
	  // High res
	writeReg8(sensor, MMA8451_REG_CTRL_REG2, 0x02);
 8000f20:	2202      	movs	r2, #2
 8000f22:	212b      	movs	r1, #43	; 0x2b
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f000 f926 	bl	8001176 <writeReg8>
	  // DRDY on INT1
	writeReg8(sensor, MMA8451_REG_CTRL_REG4, 0x01);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	212d      	movs	r1, #45	; 0x2d
 8000f2e:	68f8      	ldr	r0, [r7, #12]
 8000f30:	f000 f921 	bl	8001176 <writeReg8>
	writeReg8(sensor, MMA8451_REG_CTRL_REG5, 0x01);
 8000f34:	2201      	movs	r2, #1
 8000f36:	212e      	movs	r1, #46	; 0x2e
 8000f38:	68f8      	ldr	r0, [r7, #12]
 8000f3a:	f000 f91c 	bl	8001176 <writeReg8>

	  // Turn on orientation config
	writeReg8(sensor,MMA8451_REG_PL_CFG, 0x40);
 8000f3e:	2240      	movs	r2, #64	; 0x40
 8000f40:	2111      	movs	r1, #17
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f000 f917 	bl	8001176 <writeReg8>

	  // Activate at max rate, low noise mode
	writeReg8(sensor, MMA8451_REG_CTRL_REG1, 0x01 | 0x04);
 8000f48:	2205      	movs	r2, #5
 8000f4a:	212a      	movs	r1, #42	; 0x2a
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f000 f912 	bl	8001176 <writeReg8>

	return true;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <MMA8451_setRange>:

bool MMA8451_setRange(MMA8451 *sensor, mma8451_range_t range)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	70fb      	strb	r3, [r7, #3]
	uint8_t reg1;
	if(readReg8(sensor, MMA8451_REG_CTRL_REG1, &reg1) != HAL_OK)
 8000f68:	f107 030f 	add.w	r3, r7, #15
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	212a      	movs	r1, #42	; 0x2a
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f000 f91e 	bl	80011b2 <readReg8>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MMA8451_setRange+0x24>
		return false;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e017      	b.n	8000fb0 <MMA8451_setRange+0x54>
	writeReg8(sensor, MMA8451_REG_CTRL_REG1, 0x00); // deactivate
 8000f80:	2200      	movs	r2, #0
 8000f82:	212a      	movs	r1, #42	; 0x2a
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f000 f8f6 	bl	8001176 <writeReg8>
	writeReg8(sensor, MMA8451_REG_XYZ_DATA_CFG, range & 0x03);
 8000f8a:	78fb      	ldrb	r3, [r7, #3]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	461a      	mov	r2, r3
 8000f94:	210e      	movs	r1, #14
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f000 f8ed 	bl	8001176 <writeReg8>
	writeReg8(sensor, MMA8451_REG_CTRL_REG1, reg1 | 0x01); // activate
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	212a      	movs	r1, #42	; 0x2a
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f8e4 	bl	8001176 <writeReg8>
	return true;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <MMA8451_getRange>:

mma8451_range_t MMA8451_getRange(MMA8451 *sensor)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	mma8451_range_t range = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]
	readReg8(sensor, MMA8451_REG_XYZ_DATA_CFG, &range);
 8000fc4:	f107 030f 	add.w	r3, r7, #15
 8000fc8:	461a      	mov	r2, r3
 8000fca:	210e      	movs	r1, #14
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 f8f0 	bl	80011b2 <readReg8>
	return (range & 0x03);
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	b2db      	uxtb	r3, r3
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <MMA8451_read>:

void MMA8451_read(MMA8451 *sensor)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	 // read x y z at once
	  uint8_t buffer[6] = {0, 0, 0, 0, 0, 0};
 8000fec:	4a57      	ldr	r2, [pc, #348]	; (800114c <MMA8451_read+0x168>)
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ff6:	6018      	str	r0, [r3, #0]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	8019      	strh	r1, [r3, #0]
	  readReg(sensor, MMA8451_REG_OUT_X_MSB, buffer, 6);
 8000ffc:	f107 020c 	add.w	r2, r7, #12
 8001000:	2306      	movs	r3, #6
 8001002:	2101      	movs	r1, #1
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 f8f1 	bl	80011ec <readReg>

	  sensor->_x = buffer[0];
 800100a:	7b3b      	ldrb	r3, [r7, #12]
 800100c:	b21a      	sxth	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	805a      	strh	r2, [r3, #2]
	  sensor->_x <<= 8;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	b21a      	sxth	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	805a      	strh	r2, [r3, #2]
	  sensor->_x |= buffer[1];
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001026:	7b7b      	ldrb	r3, [r7, #13]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21a      	sxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	805a      	strh	r2, [r3, #2]
	  sensor->_x >>= 2;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001038:	109b      	asrs	r3, r3, #2
 800103a:	b21a      	sxth	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	805a      	strh	r2, [r3, #2]
	  sensor->_y = buffer[2];
 8001040:	7bbb      	ldrb	r3, [r7, #14]
 8001042:	b21a      	sxth	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	809a      	strh	r2, [r3, #4]
	  sensor->_y <<= 8;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	809a      	strh	r2, [r3, #4]
	  sensor->_y |= buffer[3];
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	b21b      	sxth	r3, r3
 8001060:	4313      	orrs	r3, r2
 8001062:	b21a      	sxth	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	809a      	strh	r2, [r3, #4]
	  sensor->_y >>= 2;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800106e:	109b      	asrs	r3, r3, #2
 8001070:	b21a      	sxth	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	809a      	strh	r2, [r3, #4]
	  sensor->_z = buffer[4];
 8001076:	7c3b      	ldrb	r3, [r7, #16]
 8001078:	b21a      	sxth	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	80da      	strh	r2, [r3, #6]
	  sensor->_z <<= 8;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b21a      	sxth	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	80da      	strh	r2, [r3, #6]
	  sensor->_z |= buffer[5];
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001092:	7c7b      	ldrb	r3, [r7, #17]
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21a      	sxth	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	80da      	strh	r2, [r3, #6]
	  sensor->_z >>= 2;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010a4:	109b      	asrs	r3, r3, #2
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	80da      	strh	r2, [r3, #6]

	  uint8_t range = MMA8451_getRange(sensor);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff83 	bl	8000fb8 <MMA8451_getRange>
 80010b2:	4603      	mov	r3, r0
 80010b4:	757b      	strb	r3, [r7, #21]
	  uint16_t divider = 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	82fb      	strh	r3, [r7, #22]
	  if (range == MMA8451_RANGE_8_G)
 80010ba:	7d7b      	ldrb	r3, [r7, #21]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d102      	bne.n	80010c6 <MMA8451_read+0xe2>
	    divider = 1024;
 80010c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c4:	82fb      	strh	r3, [r7, #22]
	  if (range == MMA8451_RANGE_4_G)
 80010c6:	7d7b      	ldrb	r3, [r7, #21]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d102      	bne.n	80010d2 <MMA8451_read+0xee>
	    divider = 2048;
 80010cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010d0:	82fb      	strh	r3, [r7, #22]
	  if (range == MMA8451_RANGE_2_G)
 80010d2:	7d7b      	ldrb	r3, [r7, #21]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <MMA8451_read+0xfa>
	    divider = 4096;
 80010d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010dc:	82fb      	strh	r3, [r7, #22]

	  sensor->_xg = (float) (sensor->_x) / divider;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010e4:	ee07 3a90 	vmov	s15, r3
 80010e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010ec:	8afb      	ldrh	r3, [r7, #22]
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	edc3 7a02 	vstr	s15, [r3, #8]
	  sensor->_yg = (float) (sensor->_y) / divider;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800110e:	8afb      	ldrh	r3, [r7, #22]
 8001110:	ee07 3a90 	vmov	s15, r3
 8001114:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001118:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	edc3 7a03 	vstr	s15, [r3, #12]
	  sensor->_zg = (float) (sensor->_z) / divider;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001128:	ee07 3a90 	vmov	s15, r3
 800112c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001130:	8afb      	ldrh	r3, [r7, #22]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800113a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8001144:	bf00      	nop
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	08006f38 	.word	0x08006f38

08001150 <MMA8451_getOrientation>:

uint8_t MMA8451_getOrientation(MMA8451 *sensor)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	uint8_t orientation;
	readReg8(sensor, MMA8451_REG_PL_STATUS, &orientation);
 8001158:	f107 030f 	add.w	r3, r7, #15
 800115c:	461a      	mov	r2, r3
 800115e:	2110      	movs	r1, #16
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 f826 	bl	80011b2 <readReg8>
	return (orientation & 0x07);
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	b2db      	uxtb	r3, r3
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <writeReg8>:
}


/************ low level data pushing commands **********/
static HAL_StatusTypeDef writeReg8(MMA8451 *sensor, uint8_t _regAddr, uint8_t _data)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af02      	add	r7, sp, #8
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	70fb      	strb	r3, [r7, #3]
 8001182:	4613      	mov	r3, r2
 8001184:	70bb      	strb	r3, [r7, #2]
	uint8_t tx_buff[2];
	tx_buff[0] = _regAddr;
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	733b      	strb	r3, [r7, #12]
	tx_buff[1] = _data;
 800118a:	78bb      	ldrb	r3, [r7, #2]
 800118c:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(sensor->_hi2c, sensor->_Addr, tx_buff, 2, 1000);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6958      	ldr	r0, [r3, #20]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b299      	uxth	r1, r3
 8001198:	f107 020c 	add.w	r2, r7, #12
 800119c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2302      	movs	r3, #2
 80011a4:	f001 f8ae 	bl	8002304 <HAL_I2C_Master_Transmit>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <readReg8>:
	memcpy(tx_buff + 1, _data, _len);
	return HAL_I2C_Master_Transmit(sensor->_hi2c, sensor->_Addr, tx_buff, _len + 1, 1000);
}

static HAL_StatusTypeDef readReg8(MMA8451 *sensor, uint8_t _regAddr, uint8_t *_data)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b088      	sub	sp, #32
 80011b6:	af04      	add	r7, sp, #16
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	460b      	mov	r3, r1
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(sensor->_hi2c,  sensor->_Addr, _regAddr, 1, _data, 1, 1000);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6958      	ldr	r0, [r3, #20]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b299      	uxth	r1, r3
 80011ca:	7afb      	ldrb	r3, [r7, #11]
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	9302      	str	r3, [sp, #8]
 80011d4:	2301      	movs	r3, #1
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2301      	movs	r3, #1
 80011de:	f001 f98f 	bl	8002500 <HAL_I2C_Mem_Read>
 80011e2:	4603      	mov	r3, r0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <readReg>:

static HAL_StatusTypeDef readReg(MMA8451 *sensor, uint8_t _regAddr, uint8_t *_data, uint8_t _len)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af04      	add	r7, sp, #16
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	461a      	mov	r2, r3
 80011f8:	460b      	mov	r3, r1
 80011fa:	72fb      	strb	r3, [r7, #11]
 80011fc:	4613      	mov	r3, r2
 80011fe:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(sensor->_hi2c,  sensor->_Addr, _regAddr, 1, _data, _len, 1000);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6958      	ldr	r0, [r3, #20]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b299      	uxth	r1, r3
 800120a:	7afb      	ldrb	r3, [r7, #11]
 800120c:	b29a      	uxth	r2, r3
 800120e:	7abb      	ldrb	r3, [r7, #10]
 8001210:	b29b      	uxth	r3, r3
 8001212:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001216:	9402      	str	r4, [sp, #8]
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2301      	movs	r3, #1
 8001220:	f001 f96e 	bl	8002500 <HAL_I2C_Mem_Read>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	bd90      	pop	{r4, r7, pc}
	...

08001230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001230:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001234:	b08c      	sub	sp, #48	; 0x30
 8001236:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001238:	f000 fc06 	bl	8001a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123c:	f000 f8d6 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001240:	f000 f996 	bl	8001570 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001244:	f000 f93c 	bl	80014c0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001248:	f000 f968 	bl	800151c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  snprintf((char*) uart_tx_buff, MAX_UART_BUFFER, "Starting sensors.\r\n");
 800124c:	4a58      	ldr	r2, [pc, #352]	; (80013b0 <main+0x180>)
 800124e:	2132      	movs	r1, #50	; 0x32
 8001250:	4858      	ldr	r0, [pc, #352]	; (80013b4 <main+0x184>)
 8001252:	f003 fcf3 	bl	8004c3c <sniprintf>
  uart_transfer();
 8001256:	f000 f9f9 	bl	800164c <uart_transfer>

  if(!MMA8451_Init(&mma8451, &hi2c1, MMA8451_DEFAULT_ADDRESS))
 800125a:	463b      	mov	r3, r7
 800125c:	221c      	movs	r2, #28
 800125e:	4956      	ldr	r1, [pc, #344]	; (80013b8 <main+0x188>)
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fe27 	bl	8000eb4 <MMA8451_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	f083 0301 	eor.w	r3, r3, #1
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d006      	beq.n	8001280 <main+0x50>
  {
	  snprintf((char*) uart_tx_buff, MAX_UART_BUFFER, "Error init accelerometer MMA8451.\r\n");
 8001272:	4a52      	ldr	r2, [pc, #328]	; (80013bc <main+0x18c>)
 8001274:	2132      	movs	r1, #50	; 0x32
 8001276:	484f      	ldr	r0, [pc, #316]	; (80013b4 <main+0x184>)
 8001278:	f003 fce0 	bl	8004c3c <sniprintf>
	  uart_transfer();
 800127c:	f000 f9e6 	bl	800164c <uart_transfer>
  }

  MMA8451_setRange(&mma8451, MMA8451_RANGE_2_G);
 8001280:	463b      	mov	r3, r7
 8001282:	2100      	movs	r1, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fe69 	bl	8000f5c <MMA8451_setRange>

  snprintf((char*) uart_tx_buff, MAX_UART_BUFFER, "Range = %d G\r\n", MMA8451_getRange(&mma8451));
 800128a:	463b      	mov	r3, r7
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fe93 	bl	8000fb8 <MMA8451_getRange>
 8001292:	4603      	mov	r3, r0
 8001294:	4a4a      	ldr	r2, [pc, #296]	; (80013c0 <main+0x190>)
 8001296:	2132      	movs	r1, #50	; 0x32
 8001298:	4846      	ldr	r0, [pc, #280]	; (80013b4 <main+0x184>)
 800129a:	f003 fccf 	bl	8004c3c <sniprintf>
  uart_transfer();
 800129e:	f000 f9d5 	bl	800164c <uart_transfer>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MMA8451_read(&mma8451);
 80012a2:	463b      	mov	r3, r7
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fe9d 	bl	8000fe4 <MMA8451_read>
	  snprintf((char*) uart_tx_buff, MAX_UART_BUFFER, "X = %.2f | Y = %.2f | Z = %.2f  m/s^2.\r\n", mma8451._xg * SENSORS_GRAVITY_STANDARD, mma8451._yg * SENSORS_GRAVITY_STANDARD, mma8451._zg * SENSORS_GRAVITY_STANDARD);
 80012aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80012ae:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80013c4 <main+0x194>
 80012b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b6:	ee17 0a90 	vmov	r0, s15
 80012ba:	f7ff f94d 	bl	8000558 <__aeabi_f2d>
 80012be:	4604      	mov	r4, r0
 80012c0:	460d      	mov	r5, r1
 80012c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012c6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80013c4 <main+0x194>
 80012ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ce:	ee17 0a90 	vmov	r0, s15
 80012d2:	f7ff f941 	bl	8000558 <__aeabi_f2d>
 80012d6:	4680      	mov	r8, r0
 80012d8:	4689      	mov	r9, r1
 80012da:	edd7 7a04 	vldr	s15, [r7, #16]
 80012de:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80013c4 <main+0x194>
 80012e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e6:	ee17 0a90 	vmov	r0, s15
 80012ea:	f7ff f935 	bl	8000558 <__aeabi_f2d>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012f6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80012fa:	e9cd 4500 	strd	r4, r5, [sp]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <main+0x198>)
 8001300:	2132      	movs	r1, #50	; 0x32
 8001302:	482c      	ldr	r0, [pc, #176]	; (80013b4 <main+0x184>)
 8001304:	f003 fc9a 	bl	8004c3c <sniprintf>
	  uart_transfer();
 8001308:	f000 f9a0 	bl	800164c <uart_transfer>

	  switch(MMA8451_getOrientation(&mma8451))
 800130c:	463b      	mov	r3, r7
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff1e 	bl	8001150 <MMA8451_getOrientation>
 8001314:	4603      	mov	r3, r0
 8001316:	2b07      	cmp	r3, #7
 8001318:	d842      	bhi.n	80013a0 <main+0x170>
 800131a:	a201      	add	r2, pc, #4	; (adr r2, 8001320 <main+0xf0>)
 800131c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001320:	08001341 	.word	0x08001341
 8001324:	0800134d 	.word	0x0800134d
 8001328:	08001359 	.word	0x08001359
 800132c:	08001365 	.word	0x08001365
 8001330:	08001371 	.word	0x08001371
 8001334:	0800137d 	.word	0x0800137d
 8001338:	08001389 	.word	0x08001389
 800133c:	08001395 	.word	0x08001395
	  {
		case MMA8451_PL_PUF:
			snprintf((char*) uart_tx_buff, MAX_UART_BUFFER, "Portrait Up Front.\r\n");
 8001340:	4a22      	ldr	r2, [pc, #136]	; (80013cc <main+0x19c>)
 8001342:	2132      	movs	r1, #50	; 0x32
 8001344:	481b      	ldr	r0, [pc, #108]	; (80013b4 <main+0x184>)
 8001346:	f003 fc79 	bl	8004c3c <sniprintf>
			break;
 800134a:	e029      	b.n	80013a0 <main+0x170>
		case MMA8451_PL_PUB:
			snprintf((char*) uart_tx_buff, MAX_UART_BUFFER, "Portrait Up Back.\r\n");
 800134c:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <main+0x1a0>)
 800134e:	2132      	movs	r1, #50	; 0x32
 8001350:	4818      	ldr	r0, [pc, #96]	; (80013b4 <main+0x184>)
 8001352:	f003 fc73 	bl	8004c3c <sniprintf>
			break;
 8001356:	e023      	b.n	80013a0 <main+0x170>
		case MMA8451_PL_PDF:
			snprintf((char*) uart_tx_buff, MAX_UART_BUFFER, "Portrait Down Front.\r\n");
 8001358:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <main+0x1a4>)
 800135a:	2132      	movs	r1, #50	; 0x32
 800135c:	4815      	ldr	r0, [pc, #84]	; (80013b4 <main+0x184>)
 800135e:	f003 fc6d 	bl	8004c3c <sniprintf>
			break;
 8001362:	e01d      	b.n	80013a0 <main+0x170>
		case MMA8451_PL_PDB:
			snprintf((char*) uart_tx_buff, MAX_UART_BUFFER, "Portrait Down Back.\r\n");
 8001364:	4a1c      	ldr	r2, [pc, #112]	; (80013d8 <main+0x1a8>)
 8001366:	2132      	movs	r1, #50	; 0x32
 8001368:	4812      	ldr	r0, [pc, #72]	; (80013b4 <main+0x184>)
 800136a:	f003 fc67 	bl	8004c3c <sniprintf>
			break;
 800136e:	e017      	b.n	80013a0 <main+0x170>
		case MMA8451_PL_LRF:
			snprintf((char*) uart_tx_buff, MAX_UART_BUFFER, "Landscape Right Front.\r\n");
 8001370:	4a1a      	ldr	r2, [pc, #104]	; (80013dc <main+0x1ac>)
 8001372:	2132      	movs	r1, #50	; 0x32
 8001374:	480f      	ldr	r0, [pc, #60]	; (80013b4 <main+0x184>)
 8001376:	f003 fc61 	bl	8004c3c <sniprintf>
			break;
 800137a:	e011      	b.n	80013a0 <main+0x170>
		case MMA8451_PL_LRB:
			snprintf((char*) uart_tx_buff, MAX_UART_BUFFER, "Landscape Right Back.\r\n");
 800137c:	4a18      	ldr	r2, [pc, #96]	; (80013e0 <main+0x1b0>)
 800137e:	2132      	movs	r1, #50	; 0x32
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <main+0x184>)
 8001382:	f003 fc5b 	bl	8004c3c <sniprintf>
			break;
 8001386:	e00b      	b.n	80013a0 <main+0x170>
		case MMA8451_PL_LLF:
			snprintf((char*) uart_tx_buff, MAX_UART_BUFFER, "Landscape Left Front.\r\n");
 8001388:	4a16      	ldr	r2, [pc, #88]	; (80013e4 <main+0x1b4>)
 800138a:	2132      	movs	r1, #50	; 0x32
 800138c:	4809      	ldr	r0, [pc, #36]	; (80013b4 <main+0x184>)
 800138e:	f003 fc55 	bl	8004c3c <sniprintf>
			break;
 8001392:	e005      	b.n	80013a0 <main+0x170>
		case MMA8451_PL_LLB:
			snprintf((char*) uart_tx_buff, MAX_UART_BUFFER, "Landscape Left Back.\r\n");
 8001394:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <main+0x1b8>)
 8001396:	2132      	movs	r1, #50	; 0x32
 8001398:	4806      	ldr	r0, [pc, #24]	; (80013b4 <main+0x184>)
 800139a:	f003 fc4f 	bl	8004c3c <sniprintf>
			break;
 800139e:	bf00      	nop
	  }
	  uart_transfer();
 80013a0:	f000 f954 	bl	800164c <uart_transfer>


	  HAL_Delay(500);
 80013a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013a8:	f000 fbc0 	bl	8001b2c <HAL_Delay>
	  MMA8451_read(&mma8451);
 80013ac:	e779      	b.n	80012a2 <main+0x72>
 80013ae:	bf00      	nop
 80013b0:	08006f40 	.word	0x08006f40
 80013b4:	2000028c 	.word	0x2000028c
 80013b8:	200001f0 	.word	0x200001f0
 80013bc:	08006f54 	.word	0x08006f54
 80013c0:	08006f78 	.word	0x08006f78
 80013c4:	411ce80a 	.word	0x411ce80a
 80013c8:	08006f88 	.word	0x08006f88
 80013cc:	08006fb4 	.word	0x08006fb4
 80013d0:	08006fcc 	.word	0x08006fcc
 80013d4:	08006fe0 	.word	0x08006fe0
 80013d8:	08006ff8 	.word	0x08006ff8
 80013dc:	08007010 	.word	0x08007010
 80013e0:	0800702c 	.word	0x0800702c
 80013e4:	08007044 	.word	0x08007044
 80013e8:	0800705c 	.word	0x0800705c

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b094      	sub	sp, #80	; 0x50
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0320 	add.w	r3, r7, #32
 80013f6:	2230      	movs	r2, #48	; 0x30
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f003 fc95 	bl	8004d2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <SystemClock_Config+0xcc>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	4a27      	ldr	r2, [pc, #156]	; (80014b8 <SystemClock_Config+0xcc>)
 800141a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141e:	6413      	str	r3, [r2, #64]	; 0x40
 8001420:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <SystemClock_Config+0xcc>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <SystemClock_Config+0xd0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a21      	ldr	r2, [pc, #132]	; (80014bc <SystemClock_Config+0xd0>)
 8001436:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <SystemClock_Config+0xd0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001448:	2302      	movs	r3, #2
 800144a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800144c:	2301      	movs	r3, #1
 800144e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001450:	2310      	movs	r3, #16
 8001452:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001454:	2302      	movs	r3, #2
 8001456:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001458:	2300      	movs	r3, #0
 800145a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800145c:	2310      	movs	r3, #16
 800145e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001460:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001464:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001466:	2304      	movs	r3, #4
 8001468:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800146a:	2304      	movs	r3, #4
 800146c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146e:	f107 0320 	add.w	r3, r7, #32
 8001472:	4618      	mov	r0, r3
 8001474:	f001 fe16 	bl	80030a4 <HAL_RCC_OscConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800147e:	f000 f8f9 	bl	8001674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001482:	230f      	movs	r3, #15
 8001484:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001486:	2302      	movs	r3, #2
 8001488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800148e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001492:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	2102      	movs	r1, #2
 800149e:	4618      	mov	r0, r3
 80014a0:	f002 f878 	bl	8003594 <HAL_RCC_ClockConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014aa:	f000 f8e3 	bl	8001674 <Error_Handler>
  }
}
 80014ae:	bf00      	nop
 80014b0:	3750      	adds	r7, #80	; 0x50
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40007000 	.word	0x40007000

080014c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_I2C1_Init+0x50>)
 80014c6:	4a13      	ldr	r2, [pc, #76]	; (8001514 <MX_I2C1_Init+0x54>)
 80014c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_I2C1_Init+0x50>)
 80014cc:	4a12      	ldr	r2, [pc, #72]	; (8001518 <MX_I2C1_Init+0x58>)
 80014ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_I2C1_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_I2C1_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_I2C1_Init+0x50>)
 80014de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <MX_I2C1_Init+0x50>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_I2C1_Init+0x50>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <MX_I2C1_Init+0x50>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_I2C1_Init+0x50>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <MX_I2C1_Init+0x50>)
 80014fe:	f000 fdbd 	bl	800207c <HAL_I2C_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001508:	f000 f8b4 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200001f0 	.word	0x200001f0
 8001514:	40005400 	.word	0x40005400
 8001518:	000186a0 	.word	0x000186a0

0800151c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <MX_USART2_UART_Init+0x50>)
 8001524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800152c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001554:	f002 fa3e 	bl	80039d4 <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800155e:	f000 f889 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000244 	.word	0x20000244
 800156c:	40004400 	.word	0x40004400

08001570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <MX_GPIO_Init+0xd0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a2c      	ldr	r2, [pc, #176]	; (8001640 <MX_GPIO_Init+0xd0>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <MX_GPIO_Init+0xd0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b26      	ldr	r3, [pc, #152]	; (8001640 <MX_GPIO_Init+0xd0>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a25      	ldr	r2, [pc, #148]	; (8001640 <MX_GPIO_Init+0xd0>)
 80015ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b23      	ldr	r3, [pc, #140]	; (8001640 <MX_GPIO_Init+0xd0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <MX_GPIO_Init+0xd0>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a1e      	ldr	r2, [pc, #120]	; (8001640 <MX_GPIO_Init+0xd0>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <MX_GPIO_Init+0xd0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b18      	ldr	r3, [pc, #96]	; (8001640 <MX_GPIO_Init+0xd0>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a17      	ldr	r2, [pc, #92]	; (8001640 <MX_GPIO_Init+0xd0>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <MX_GPIO_Init+0xd0>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2120      	movs	r1, #32
 80015fa:	4812      	ldr	r0, [pc, #72]	; (8001644 <MX_GPIO_Init+0xd4>)
 80015fc:	f000 fd24 	bl	8002048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001600:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001606:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800160a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	480c      	ldr	r0, [pc, #48]	; (8001648 <MX_GPIO_Init+0xd8>)
 8001618:	f000 fb92 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800161c:	2320      	movs	r3, #32
 800161e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001620:	2301      	movs	r3, #1
 8001622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4804      	ldr	r0, [pc, #16]	; (8001644 <MX_GPIO_Init+0xd4>)
 8001634:	f000 fb84 	bl	8001d40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	; 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000
 8001648:	40020800 	.word	0x40020800

0800164c <uart_transfer>:

/* USER CODE BEGIN 4 */
void uart_transfer(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	  HAL_UART_Transmit(&huart2, uart_tx_buff, sizeof(uart_tx_buff), 1000);
 8001650:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001654:	2232      	movs	r2, #50	; 0x32
 8001656:	4905      	ldr	r1, [pc, #20]	; (800166c <uart_transfer+0x20>)
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <uart_transfer+0x24>)
 800165a:	f002 fa0b 	bl	8003a74 <HAL_UART_Transmit>
	  memset(uart_tx_buff, '\0', MAX_UART_BUFFER);
 800165e:	2232      	movs	r2, #50	; 0x32
 8001660:	2100      	movs	r1, #0
 8001662:	4802      	ldr	r0, [pc, #8]	; (800166c <uart_transfer+0x20>)
 8001664:	f003 fb61 	bl	8004d2a <memset>
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	2000028c 	.word	0x2000028c
 8001670:	20000244 	.word	0x20000244

08001674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001678:	b672      	cpsid	i
}
 800167a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800167c:	e7fe      	b.n	800167c <Error_Handler+0x8>
	...

08001680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_MspInit+0x4c>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	4a0f      	ldr	r2, [pc, #60]	; (80016cc <HAL_MspInit+0x4c>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001694:	6453      	str	r3, [r2, #68]	; 0x44
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <HAL_MspInit+0x4c>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_MspInit+0x4c>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	4a08      	ldr	r2, [pc, #32]	; (80016cc <HAL_MspInit+0x4c>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6413      	str	r3, [r2, #64]	; 0x40
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_MspInit+0x4c>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016be:	2007      	movs	r0, #7
 80016c0:	f000 fb0a 	bl	8001cd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40023800 	.word	0x40023800

080016d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a19      	ldr	r2, [pc, #100]	; (8001754 <HAL_I2C_MspInit+0x84>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d12c      	bne.n	800174c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <HAL_I2C_MspInit+0x88>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a17      	ldr	r2, [pc, #92]	; (8001758 <HAL_I2C_MspInit+0x88>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_I2C_MspInit+0x88>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800170e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001714:	2312      	movs	r3, #18
 8001716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001718:	2301      	movs	r3, #1
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001720:	2304      	movs	r3, #4
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	480c      	ldr	r0, [pc, #48]	; (800175c <HAL_I2C_MspInit+0x8c>)
 800172c:	f000 fb08 	bl	8001d40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_I2C_MspInit+0x88>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <HAL_I2C_MspInit+0x88>)
 800173a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800173e:	6413      	str	r3, [r2, #64]	; 0x40
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_I2C_MspInit+0x88>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	; 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40005400 	.word	0x40005400
 8001758:	40023800 	.word	0x40023800
 800175c:	40020400 	.word	0x40020400

08001760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <HAL_UART_MspInit+0x84>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d12b      	bne.n	80017da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <HAL_UART_MspInit+0x88>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a17      	ldr	r2, [pc, #92]	; (80017e8 <HAL_UART_MspInit+0x88>)
 800178c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_UART_MspInit+0x88>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_UART_MspInit+0x88>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a10      	ldr	r2, [pc, #64]	; (80017e8 <HAL_UART_MspInit+0x88>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_UART_MspInit+0x88>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017ba:	230c      	movs	r3, #12
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ca:	2307      	movs	r3, #7
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <HAL_UART_MspInit+0x8c>)
 80017d6:	f000 fab3 	bl	8001d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017da:	bf00      	nop
 80017dc:	3728      	adds	r7, #40	; 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40004400 	.word	0x40004400
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020000 	.word	0x40020000

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f4:	e7fe      	b.n	80017f4 <NMI_Handler+0x4>

080017f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <MemManage_Handler+0x4>

08001802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <UsageFault_Handler+0x4>

0800180e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183c:	f000 f956 	bl	8001aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}

08001844 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return 1;
 8001848:	2301      	movs	r3, #1
}
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <_kill>:

int _kill(int pid, int sig)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800185e:	f003 fab7 	bl	8004dd0 <__errno>
 8001862:	4603      	mov	r3, r0
 8001864:	2216      	movs	r2, #22
 8001866:	601a      	str	r2, [r3, #0]
  return -1;
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_exit>:

void _exit (int status)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ffe7 	bl	8001854 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001886:	e7fe      	b.n	8001886 <_exit+0x12>

08001888 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	e00a      	b.n	80018b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800189a:	f3af 8000 	nop.w
 800189e:	4601      	mov	r1, r0
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	60ba      	str	r2, [r7, #8]
 80018a6:	b2ca      	uxtb	r2, r1
 80018a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3301      	adds	r3, #1
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	dbf0      	blt.n	800189a <_read+0x12>
  }

  return len;
 80018b8:	687b      	ldr	r3, [r7, #4]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	e009      	b.n	80018e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	60ba      	str	r2, [r7, #8]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbf1      	blt.n	80018d4 <_write+0x12>
  }
  return len;
 80018f0:	687b      	ldr	r3, [r7, #4]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_close>:

int _close(int file)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001922:	605a      	str	r2, [r3, #4]
  return 0;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_isatty>:

int _isatty(int file)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800196c:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <_sbrk+0x5c>)
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <_sbrk+0x60>)
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <_sbrk+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <_sbrk+0x64>)
 8001982:	4a12      	ldr	r2, [pc, #72]	; (80019cc <_sbrk+0x68>)
 8001984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <_sbrk+0x64>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	429a      	cmp	r2, r3
 8001992:	d207      	bcs.n	80019a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001994:	f003 fa1c 	bl	8004dd0 <__errno>
 8001998:	4603      	mov	r3, r0
 800199a:	220c      	movs	r2, #12
 800199c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
 80019a2:	e009      	b.n	80019b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <_sbrk+0x64>)
 80019b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b6:	68fb      	ldr	r3, [r7, #12]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20020000 	.word	0x20020000
 80019c4:	00000400 	.word	0x00000400
 80019c8:	200002c0 	.word	0x200002c0
 80019cc:	20000418 	.word	0x20000418

080019d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <SystemInit+0x20>)
 80019d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019da:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <SystemInit+0x20>)
 80019dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019f8:	f7ff ffea 	bl	80019d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019fc:	480c      	ldr	r0, [pc, #48]	; (8001a30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019fe:	490d      	ldr	r1, [pc, #52]	; (8001a34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a00:	4a0d      	ldr	r2, [pc, #52]	; (8001a38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a04:	e002      	b.n	8001a0c <LoopCopyDataInit>

08001a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0a:	3304      	adds	r3, #4

08001a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a10:	d3f9      	bcc.n	8001a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a14:	4c0a      	ldr	r4, [pc, #40]	; (8001a40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a18:	e001      	b.n	8001a1e <LoopFillZerobss>

08001a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a1c:	3204      	adds	r2, #4

08001a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a20:	d3fb      	bcc.n	8001a1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a22:	f003 f9db 	bl	8004ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a26:	f7ff fc03 	bl	8001230 <main>
  bx  lr    
 8001a2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a34:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a38:	0800740c 	.word	0x0800740c
  ldr r2, =_sbss
 8001a3c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a40:	20000414 	.word	0x20000414

08001a44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a44:	e7fe      	b.n	8001a44 <ADC_IRQHandler>
	...

08001a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_Init+0x40>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0d      	ldr	r2, [pc, #52]	; (8001a88 <HAL_Init+0x40>)
 8001a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_Init+0x40>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <HAL_Init+0x40>)
 8001a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <HAL_Init+0x40>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <HAL_Init+0x40>)
 8001a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a70:	2003      	movs	r0, #3
 8001a72:	f000 f931 	bl	8001cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a76:	2000      	movs	r0, #0
 8001a78:	f000 f808 	bl	8001a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a7c:	f7ff fe00 	bl	8001680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40023c00 	.word	0x40023c00

08001a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_InitTick+0x54>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_InitTick+0x58>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f93b 	bl	8001d26 <HAL_SYSTICK_Config>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00e      	b.n	8001ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b0f      	cmp	r3, #15
 8001abe:	d80a      	bhi.n	8001ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f000 f911 	bl	8001cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001acc:	4a06      	ldr	r2, [pc, #24]	; (8001ae8 <HAL_InitTick+0x5c>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e000      	b.n	8001ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	20000004 	.word	0x20000004

08001aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_IncTick+0x20>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_IncTick+0x24>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <HAL_IncTick+0x24>)
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	200002c4 	.word	0x200002c4

08001b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return uwTick;
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <HAL_GetTick+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	200002c4 	.word	0x200002c4

08001b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b34:	f7ff ffee 	bl	8001b14 <HAL_GetTick>
 8001b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b44:	d005      	beq.n	8001b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_Delay+0x44>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4413      	add	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b52:	bf00      	nop
 8001b54:	f7ff ffde 	bl	8001b14 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d8f7      	bhi.n	8001b54 <HAL_Delay+0x28>
  {
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000008 	.word	0x20000008

08001b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba6:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	60d3      	str	r3, [r2, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	f003 0307 	and.w	r3, r3, #7
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	6039      	str	r1, [r7, #0]
 8001be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	db0a      	blt.n	8001c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	490c      	ldr	r1, [pc, #48]	; (8001c24 <__NVIC_SetPriority+0x4c>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	0112      	lsls	r2, r2, #4
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c00:	e00a      	b.n	8001c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4908      	ldr	r1, [pc, #32]	; (8001c28 <__NVIC_SetPriority+0x50>)
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	3b04      	subs	r3, #4
 8001c10:	0112      	lsls	r2, r2, #4
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	440b      	add	r3, r1
 8001c16:	761a      	strb	r2, [r3, #24]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000e100 	.word	0xe000e100
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f1c3 0307 	rsb	r3, r3, #7
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	bf28      	it	cs
 8001c4a:	2304      	movcs	r3, #4
 8001c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3304      	adds	r3, #4
 8001c52:	2b06      	cmp	r3, #6
 8001c54:	d902      	bls.n	8001c5c <NVIC_EncodePriority+0x30>
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3b03      	subs	r3, #3
 8001c5a:	e000      	b.n	8001c5e <NVIC_EncodePriority+0x32>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	f04f 32ff 	mov.w	r2, #4294967295
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	401a      	ands	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7e:	43d9      	mvns	r1, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	4313      	orrs	r3, r2
         );
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3724      	adds	r7, #36	; 0x24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca4:	d301      	bcc.n	8001caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00f      	b.n	8001cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <SysTick_Config+0x40>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb2:	210f      	movs	r1, #15
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	f7ff ff8e 	bl	8001bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <SysTick_Config+0x40>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <SysTick_Config+0x40>)
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	e000e010 	.word	0xe000e010

08001cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff ff47 	bl	8001b74 <__NVIC_SetPriorityGrouping>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d00:	f7ff ff5c 	bl	8001bbc <__NVIC_GetPriorityGrouping>
 8001d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	6978      	ldr	r0, [r7, #20]
 8001d0c:	f7ff ff8e 	bl	8001c2c <NVIC_EncodePriority>
 8001d10:	4602      	mov	r2, r0
 8001d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff5d 	bl	8001bd8 <__NVIC_SetPriority>
}
 8001d1e:	bf00      	nop
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ffb0 	bl	8001c94 <SysTick_Config>
 8001d34:	4603      	mov	r3, r0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	; 0x24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	e159      	b.n	8002010 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	f040 8148 	bne.w	800200a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d005      	beq.n	8001d92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d130      	bne.n	8001df4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc8:	2201      	movs	r2, #1
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	f003 0201 	and.w	r2, r3, #1
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d017      	beq.n	8001e30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d123      	bne.n	8001e84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	08da      	lsrs	r2, r3, #3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3208      	adds	r2, #8
 8001e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	220f      	movs	r2, #15
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	08da      	lsrs	r2, r3, #3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3208      	adds	r2, #8
 8001e7e:	69b9      	ldr	r1, [r7, #24]
 8001e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	2203      	movs	r2, #3
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0203 	and.w	r2, r3, #3
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 80a2 	beq.w	800200a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	4b57      	ldr	r3, [pc, #348]	; (8002028 <HAL_GPIO_Init+0x2e8>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	4a56      	ldr	r2, [pc, #344]	; (8002028 <HAL_GPIO_Init+0x2e8>)
 8001ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed6:	4b54      	ldr	r3, [pc, #336]	; (8002028 <HAL_GPIO_Init+0x2e8>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ee2:	4a52      	ldr	r2, [pc, #328]	; (800202c <HAL_GPIO_Init+0x2ec>)
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	3302      	adds	r3, #2
 8001eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	220f      	movs	r2, #15
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a49      	ldr	r2, [pc, #292]	; (8002030 <HAL_GPIO_Init+0x2f0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d019      	beq.n	8001f42 <HAL_GPIO_Init+0x202>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a48      	ldr	r2, [pc, #288]	; (8002034 <HAL_GPIO_Init+0x2f4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d013      	beq.n	8001f3e <HAL_GPIO_Init+0x1fe>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a47      	ldr	r2, [pc, #284]	; (8002038 <HAL_GPIO_Init+0x2f8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00d      	beq.n	8001f3a <HAL_GPIO_Init+0x1fa>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a46      	ldr	r2, [pc, #280]	; (800203c <HAL_GPIO_Init+0x2fc>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d007      	beq.n	8001f36 <HAL_GPIO_Init+0x1f6>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a45      	ldr	r2, [pc, #276]	; (8002040 <HAL_GPIO_Init+0x300>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d101      	bne.n	8001f32 <HAL_GPIO_Init+0x1f2>
 8001f2e:	2304      	movs	r3, #4
 8001f30:	e008      	b.n	8001f44 <HAL_GPIO_Init+0x204>
 8001f32:	2307      	movs	r3, #7
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x204>
 8001f36:	2303      	movs	r3, #3
 8001f38:	e004      	b.n	8001f44 <HAL_GPIO_Init+0x204>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e002      	b.n	8001f44 <HAL_GPIO_Init+0x204>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <HAL_GPIO_Init+0x204>
 8001f42:	2300      	movs	r3, #0
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	f002 0203 	and.w	r2, r2, #3
 8001f4a:	0092      	lsls	r2, r2, #2
 8001f4c:	4093      	lsls	r3, r2
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f54:	4935      	ldr	r1, [pc, #212]	; (800202c <HAL_GPIO_Init+0x2ec>)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f62:	4b38      	ldr	r3, [pc, #224]	; (8002044 <HAL_GPIO_Init+0x304>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f86:	4a2f      	ldr	r2, [pc, #188]	; (8002044 <HAL_GPIO_Init+0x304>)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f8c:	4b2d      	ldr	r3, [pc, #180]	; (8002044 <HAL_GPIO_Init+0x304>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb0:	4a24      	ldr	r2, [pc, #144]	; (8002044 <HAL_GPIO_Init+0x304>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fb6:	4b23      	ldr	r3, [pc, #140]	; (8002044 <HAL_GPIO_Init+0x304>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fda:	4a1a      	ldr	r2, [pc, #104]	; (8002044 <HAL_GPIO_Init+0x304>)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe0:	4b18      	ldr	r3, [pc, #96]	; (8002044 <HAL_GPIO_Init+0x304>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002004:	4a0f      	ldr	r2, [pc, #60]	; (8002044 <HAL_GPIO_Init+0x304>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3301      	adds	r3, #1
 800200e:	61fb      	str	r3, [r7, #28]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	2b0f      	cmp	r3, #15
 8002014:	f67f aea2 	bls.w	8001d5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3724      	adds	r7, #36	; 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800
 800202c:	40013800 	.word	0x40013800
 8002030:	40020000 	.word	0x40020000
 8002034:	40020400 	.word	0x40020400
 8002038:	40020800 	.word	0x40020800
 800203c:	40020c00 	.word	0x40020c00
 8002040:	40021000 	.word	0x40021000
 8002044:	40013c00 	.word	0x40013c00

08002048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	807b      	strh	r3, [r7, #2]
 8002054:	4613      	mov	r3, r2
 8002056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002058:	787b      	ldrb	r3, [r7, #1]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800205e:	887a      	ldrh	r2, [r7, #2]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002064:	e003      	b.n	800206e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002066:	887b      	ldrh	r3, [r7, #2]
 8002068:	041a      	lsls	r2, r3, #16
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	619a      	str	r2, [r3, #24]
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e12b      	b.n	80022e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff fb14 	bl	80016d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2224      	movs	r2, #36	; 0x24
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020e0:	f001 fc50 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 80020e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	4a81      	ldr	r2, [pc, #516]	; (80022f0 <HAL_I2C_Init+0x274>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d807      	bhi.n	8002100 <HAL_I2C_Init+0x84>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4a80      	ldr	r2, [pc, #512]	; (80022f4 <HAL_I2C_Init+0x278>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	bf94      	ite	ls
 80020f8:	2301      	movls	r3, #1
 80020fa:	2300      	movhi	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	e006      	b.n	800210e <HAL_I2C_Init+0x92>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4a7d      	ldr	r2, [pc, #500]	; (80022f8 <HAL_I2C_Init+0x27c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	bf94      	ite	ls
 8002108:	2301      	movls	r3, #1
 800210a:	2300      	movhi	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e0e7      	b.n	80022e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4a78      	ldr	r2, [pc, #480]	; (80022fc <HAL_I2C_Init+0x280>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	0c9b      	lsrs	r3, r3, #18
 8002120:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	430a      	orrs	r2, r1
 8002134:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a6a      	ldr	r2, [pc, #424]	; (80022f0 <HAL_I2C_Init+0x274>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d802      	bhi.n	8002150 <HAL_I2C_Init+0xd4>
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	3301      	adds	r3, #1
 800214e:	e009      	b.n	8002164 <HAL_I2C_Init+0xe8>
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002156:	fb02 f303 	mul.w	r3, r2, r3
 800215a:	4a69      	ldr	r2, [pc, #420]	; (8002300 <HAL_I2C_Init+0x284>)
 800215c:	fba2 2303 	umull	r2, r3, r2, r3
 8002160:	099b      	lsrs	r3, r3, #6
 8002162:	3301      	adds	r3, #1
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	430b      	orrs	r3, r1
 800216a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002176:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	495c      	ldr	r1, [pc, #368]	; (80022f0 <HAL_I2C_Init+0x274>)
 8002180:	428b      	cmp	r3, r1
 8002182:	d819      	bhi.n	80021b8 <HAL_I2C_Init+0x13c>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1e59      	subs	r1, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002192:	1c59      	adds	r1, r3, #1
 8002194:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002198:	400b      	ands	r3, r1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_I2C_Init+0x138>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1e59      	subs	r1, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ac:	3301      	adds	r3, #1
 80021ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b2:	e051      	b.n	8002258 <HAL_I2C_Init+0x1dc>
 80021b4:	2304      	movs	r3, #4
 80021b6:	e04f      	b.n	8002258 <HAL_I2C_Init+0x1dc>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d111      	bne.n	80021e4 <HAL_I2C_Init+0x168>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	1e58      	subs	r0, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6859      	ldr	r1, [r3, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	440b      	add	r3, r1
 80021ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80021d2:	3301      	adds	r3, #1
 80021d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d8:	2b00      	cmp	r3, #0
 80021da:	bf0c      	ite	eq
 80021dc:	2301      	moveq	r3, #1
 80021de:	2300      	movne	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	e012      	b.n	800220a <HAL_I2C_Init+0x18e>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1e58      	subs	r0, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	0099      	lsls	r1, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fa:	3301      	adds	r3, #1
 80021fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf0c      	ite	eq
 8002204:	2301      	moveq	r3, #1
 8002206:	2300      	movne	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_I2C_Init+0x196>
 800220e:	2301      	movs	r3, #1
 8002210:	e022      	b.n	8002258 <HAL_I2C_Init+0x1dc>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10e      	bne.n	8002238 <HAL_I2C_Init+0x1bc>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1e58      	subs	r0, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6859      	ldr	r1, [r3, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	440b      	add	r3, r1
 8002228:	fbb0 f3f3 	udiv	r3, r0, r3
 800222c:	3301      	adds	r3, #1
 800222e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002236:	e00f      	b.n	8002258 <HAL_I2C_Init+0x1dc>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	1e58      	subs	r0, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6859      	ldr	r1, [r3, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	0099      	lsls	r1, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	fbb0 f3f3 	udiv	r3, r0, r3
 800224e:	3301      	adds	r3, #1
 8002250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002254:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	6809      	ldr	r1, [r1, #0]
 800225c:	4313      	orrs	r3, r2
 800225e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69da      	ldr	r2, [r3, #28]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002286:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6911      	ldr	r1, [r2, #16]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68d2      	ldr	r2, [r2, #12]
 8002292:	4311      	orrs	r1, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	430b      	orrs	r3, r1
 800229a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695a      	ldr	r2, [r3, #20]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2220      	movs	r2, #32
 80022d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	000186a0 	.word	0x000186a0
 80022f4:	001e847f 	.word	0x001e847f
 80022f8:	003d08ff 	.word	0x003d08ff
 80022fc:	431bde83 	.word	0x431bde83
 8002300:	10624dd3 	.word	0x10624dd3

08002304 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	461a      	mov	r2, r3
 8002310:	460b      	mov	r3, r1
 8002312:	817b      	strh	r3, [r7, #10]
 8002314:	4613      	mov	r3, r2
 8002316:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002318:	f7ff fbfc 	bl	8001b14 <HAL_GetTick>
 800231c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b20      	cmp	r3, #32
 8002328:	f040 80e0 	bne.w	80024ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2319      	movs	r3, #25
 8002332:	2201      	movs	r2, #1
 8002334:	4970      	ldr	r1, [pc, #448]	; (80024f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 fc7e 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002342:	2302      	movs	r3, #2
 8002344:	e0d3      	b.n	80024ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_I2C_Master_Transmit+0x50>
 8002350:	2302      	movs	r3, #2
 8002352:	e0cc      	b.n	80024ee <HAL_I2C_Master_Transmit+0x1ea>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b01      	cmp	r3, #1
 8002368:	d007      	beq.n	800237a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 0201 	orr.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002388:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2221      	movs	r2, #33	; 0x21
 800238e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2210      	movs	r2, #16
 8002396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	893a      	ldrh	r2, [r7, #8]
 80023aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4a50      	ldr	r2, [pc, #320]	; (80024fc <HAL_I2C_Master_Transmit+0x1f8>)
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023bc:	8979      	ldrh	r1, [r7, #10]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	6a3a      	ldr	r2, [r7, #32]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 face 	bl	8002964 <I2C_MasterRequestWrite>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e08d      	b.n	80024ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023e8:	e066      	b.n	80024b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	6a39      	ldr	r1, [r7, #32]
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 fd3c 	bl	8002e6c <I2C_WaitOnTXEFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00d      	beq.n	8002416 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d107      	bne.n	8002412 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002410:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e06b      	b.n	80024ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	781a      	ldrb	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243e:	3b01      	subs	r3, #1
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b04      	cmp	r3, #4
 8002452:	d11b      	bne.n	800248c <HAL_I2C_Master_Transmit+0x188>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002458:	2b00      	cmp	r3, #0
 800245a:	d017      	beq.n	800248c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	781a      	ldrb	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002476:	b29b      	uxth	r3, r3
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	6a39      	ldr	r1, [r7, #32]
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fd33 	bl	8002efc <I2C_WaitOnBTFFlagUntilTimeout>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00d      	beq.n	80024b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d107      	bne.n	80024b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e01a      	b.n	80024ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d194      	bne.n	80023ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e000      	b.n	80024ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024ec:	2302      	movs	r3, #2
  }
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	00100002 	.word	0x00100002
 80024fc:	ffff0000 	.word	0xffff0000

08002500 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08c      	sub	sp, #48	; 0x30
 8002504:	af02      	add	r7, sp, #8
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	4608      	mov	r0, r1
 800250a:	4611      	mov	r1, r2
 800250c:	461a      	mov	r2, r3
 800250e:	4603      	mov	r3, r0
 8002510:	817b      	strh	r3, [r7, #10]
 8002512:	460b      	mov	r3, r1
 8002514:	813b      	strh	r3, [r7, #8]
 8002516:	4613      	mov	r3, r2
 8002518:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800251a:	f7ff fafb 	bl	8001b14 <HAL_GetTick>
 800251e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b20      	cmp	r3, #32
 800252a:	f040 8214 	bne.w	8002956 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	2319      	movs	r3, #25
 8002534:	2201      	movs	r2, #1
 8002536:	497b      	ldr	r1, [pc, #492]	; (8002724 <HAL_I2C_Mem_Read+0x224>)
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 fb7d 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002544:	2302      	movs	r3, #2
 8002546:	e207      	b.n	8002958 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_I2C_Mem_Read+0x56>
 8002552:	2302      	movs	r3, #2
 8002554:	e200      	b.n	8002958 <HAL_I2C_Mem_Read+0x458>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b01      	cmp	r3, #1
 800256a:	d007      	beq.n	800257c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800258a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2222      	movs	r2, #34	; 0x22
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2240      	movs	r2, #64	; 0x40
 8002598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80025ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4a5b      	ldr	r2, [pc, #364]	; (8002728 <HAL_I2C_Mem_Read+0x228>)
 80025bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025be:	88f8      	ldrh	r0, [r7, #6]
 80025c0:	893a      	ldrh	r2, [r7, #8]
 80025c2:	8979      	ldrh	r1, [r7, #10]
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	4603      	mov	r3, r0
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 fa4a 	bl	8002a68 <I2C_RequestMemoryRead>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e1bc      	b.n	8002958 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d113      	bne.n	800260e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e6:	2300      	movs	r3, #0
 80025e8:	623b      	str	r3, [r7, #32]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	623b      	str	r3, [r7, #32]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	623b      	str	r3, [r7, #32]
 80025fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	e190      	b.n	8002930 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002612:	2b01      	cmp	r3, #1
 8002614:	d11b      	bne.n	800264e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002624:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e170      	b.n	8002930 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002652:	2b02      	cmp	r3, #2
 8002654:	d11b      	bne.n	800268e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002664:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002674:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	61bb      	str	r3, [r7, #24]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	e150      	b.n	8002930 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80026a4:	e144      	b.n	8002930 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	f200 80f1 	bhi.w	8002892 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d123      	bne.n	8002700 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 fc65 	bl	8002f8c <I2C_WaitOnRXNEFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e145      	b.n	8002958 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026fe:	e117      	b.n	8002930 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002704:	2b02      	cmp	r3, #2
 8002706:	d14e      	bne.n	80027a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270e:	2200      	movs	r2, #0
 8002710:	4906      	ldr	r1, [pc, #24]	; (800272c <HAL_I2C_Mem_Read+0x22c>)
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 fa90 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e11a      	b.n	8002958 <HAL_I2C_Mem_Read+0x458>
 8002722:	bf00      	nop
 8002724:	00100002 	.word	0x00100002
 8002728:	ffff0000 	.word	0xffff0000
 800272c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691a      	ldr	r2, [r3, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279a:	b29b      	uxth	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027a4:	e0c4      	b.n	8002930 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ac:	2200      	movs	r2, #0
 80027ae:	496c      	ldr	r1, [pc, #432]	; (8002960 <HAL_I2C_Mem_Read+0x460>)
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 fa41 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0cb      	b.n	8002958 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002808:	2200      	movs	r2, #0
 800280a:	4955      	ldr	r1, [pc, #340]	; (8002960 <HAL_I2C_Mem_Read+0x460>)
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 fa13 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e09d      	b.n	8002958 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800282a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002890:	e04e      	b.n	8002930 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002894:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fb78 	bl	8002f8c <I2C_WaitOnRXNEFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e058      	b.n	8002958 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d124      	bne.n	8002930 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d107      	bne.n	80028fe <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028fc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002934:	2b00      	cmp	r3, #0
 8002936:	f47f aeb6 	bne.w	80026a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	e000      	b.n	8002958 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002956:	2302      	movs	r3, #2
  }
}
 8002958:	4618      	mov	r0, r3
 800295a:	3728      	adds	r7, #40	; 0x28
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	00010004 	.word	0x00010004

08002964 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af02      	add	r7, sp, #8
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	460b      	mov	r3, r1
 8002972:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b08      	cmp	r3, #8
 800297e:	d006      	beq.n	800298e <I2C_MasterRequestWrite+0x2a>
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d003      	beq.n	800298e <I2C_MasterRequestWrite+0x2a>
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800298c:	d108      	bne.n	80029a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	e00b      	b.n	80029b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	2b12      	cmp	r3, #18
 80029a6:	d107      	bne.n	80029b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 f937 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00d      	beq.n	80029ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029de:	d103      	bne.n	80029e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e035      	b.n	8002a58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029f4:	d108      	bne.n	8002a08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029f6:	897b      	ldrh	r3, [r7, #10]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a04:	611a      	str	r2, [r3, #16]
 8002a06:	e01b      	b.n	8002a40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a08:	897b      	ldrh	r3, [r7, #10]
 8002a0a:	11db      	asrs	r3, r3, #7
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	f003 0306 	and.w	r3, r3, #6
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f063 030f 	orn	r3, r3, #15
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	490e      	ldr	r1, [pc, #56]	; (8002a60 <I2C_MasterRequestWrite+0xfc>)
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f980 	bl	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e010      	b.n	8002a58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a36:	897b      	ldrh	r3, [r7, #10]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	4907      	ldr	r1, [pc, #28]	; (8002a64 <I2C_MasterRequestWrite+0x100>)
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f970 	bl	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	00010008 	.word	0x00010008
 8002a64:	00010002 	.word	0x00010002

08002a68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	4608      	mov	r0, r1
 8002a72:	4611      	mov	r1, r2
 8002a74:	461a      	mov	r2, r3
 8002a76:	4603      	mov	r3, r0
 8002a78:	817b      	strh	r3, [r7, #10]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	813b      	strh	r3, [r7, #8]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aa0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f8c2 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00d      	beq.n	8002ad6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac8:	d103      	bne.n	8002ad2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e0aa      	b.n	8002c2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ad6:	897b      	ldrh	r3, [r7, #10]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ae4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	6a3a      	ldr	r2, [r7, #32]
 8002aea:	4952      	ldr	r1, [pc, #328]	; (8002c34 <I2C_RequestMemoryRead+0x1cc>)
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f91d 	bl	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e097      	b.n	8002c2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b14:	6a39      	ldr	r1, [r7, #32]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f9a8 	bl	8002e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00d      	beq.n	8002b3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d107      	bne.n	8002b3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e076      	b.n	8002c2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d105      	bne.n	8002b50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b44:	893b      	ldrh	r3, [r7, #8]
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	611a      	str	r2, [r3, #16]
 8002b4e:	e021      	b.n	8002b94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b50:	893b      	ldrh	r3, [r7, #8]
 8002b52:	0a1b      	lsrs	r3, r3, #8
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b60:	6a39      	ldr	r1, [r7, #32]
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 f982 	bl	8002e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00d      	beq.n	8002b8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d107      	bne.n	8002b86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e050      	b.n	8002c2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b8a:	893b      	ldrh	r3, [r7, #8]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b96:	6a39      	ldr	r1, [r7, #32]
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f967 	bl	8002e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00d      	beq.n	8002bc0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d107      	bne.n	8002bbc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e035      	b.n	8002c2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f82b 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00d      	beq.n	8002c04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf6:	d103      	bne.n	8002c00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e013      	b.n	8002c2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c04:	897b      	ldrh	r3, [r7, #10]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	6a3a      	ldr	r2, [r7, #32]
 8002c18:	4906      	ldr	r1, [pc, #24]	; (8002c34 <I2C_RequestMemoryRead+0x1cc>)
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f886 	bl	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	00010002 	.word	0x00010002

08002c38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	4613      	mov	r3, r2
 8002c46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c48:	e048      	b.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d044      	beq.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c52:	f7fe ff5f 	bl	8001b14 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d302      	bcc.n	8002c68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d139      	bne.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	0c1b      	lsrs	r3, r3, #16
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d10d      	bne.n	8002c8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	43da      	mvns	r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf0c      	ite	eq
 8002c84:	2301      	moveq	r3, #1
 8002c86:	2300      	movne	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	e00c      	b.n	8002ca8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	43da      	mvns	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2301      	moveq	r3, #1
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d116      	bne.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	f043 0220 	orr.w	r2, r3, #32
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e023      	b.n	8002d24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	0c1b      	lsrs	r3, r3, #16
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d10d      	bne.n	8002d02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	43da      	mvns	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	e00c      	b.n	8002d1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	43da      	mvns	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d093      	beq.n	8002c4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d3a:	e071      	b.n	8002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4a:	d123      	bne.n	8002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	f043 0204 	orr.w	r2, r3, #4
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e067      	b.n	8002e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9a:	d041      	beq.n	8002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9c:	f7fe feba 	bl	8001b14 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d302      	bcc.n	8002db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d136      	bne.n	8002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	0c1b      	lsrs	r3, r3, #16
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d10c      	bne.n	8002dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bf14      	ite	ne
 8002dce:	2301      	movne	r3, #1
 8002dd0:	2300      	moveq	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	e00b      	b.n	8002dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	43da      	mvns	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4013      	ands	r3, r2
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf14      	ite	ne
 8002de8:	2301      	movne	r3, #1
 8002dea:	2300      	moveq	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d016      	beq.n	8002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	f043 0220 	orr.w	r2, r3, #32
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e021      	b.n	8002e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	0c1b      	lsrs	r3, r3, #16
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d10c      	bne.n	8002e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	43da      	mvns	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4013      	ands	r3, r2
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf14      	ite	ne
 8002e3c:	2301      	movne	r3, #1
 8002e3e:	2300      	moveq	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	e00b      	b.n	8002e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	bf14      	ite	ne
 8002e56:	2301      	movne	r3, #1
 8002e58:	2300      	moveq	r3, #0
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f47f af6d 	bne.w	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e78:	e034      	b.n	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f8e3 	bl	8003046 <I2C_IsAcknowledgeFailed>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e034      	b.n	8002ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d028      	beq.n	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e92:	f7fe fe3f 	bl	8001b14 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d302      	bcc.n	8002ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d11d      	bne.n	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb2:	2b80      	cmp	r3, #128	; 0x80
 8002eb4:	d016      	beq.n	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f043 0220 	orr.w	r2, r3, #32
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e007      	b.n	8002ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eee:	2b80      	cmp	r3, #128	; 0x80
 8002ef0:	d1c3      	bne.n	8002e7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f08:	e034      	b.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f89b 	bl	8003046 <I2C_IsAcknowledgeFailed>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e034      	b.n	8002f84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d028      	beq.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f22:	f7fe fdf7 	bl	8001b14 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d302      	bcc.n	8002f38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d11d      	bne.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d016      	beq.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f043 0220 	orr.w	r2, r3, #32
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e007      	b.n	8002f84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d1c3      	bne.n	8002f0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f98:	e049      	b.n	800302e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b10      	cmp	r3, #16
 8002fa6:	d119      	bne.n	8002fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0210 	mvn.w	r2, #16
 8002fb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e030      	b.n	800303e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fdc:	f7fe fd9a 	bl	8001b14 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d302      	bcc.n	8002ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d11d      	bne.n	800302e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffc:	2b40      	cmp	r3, #64	; 0x40
 8002ffe:	d016      	beq.n	800302e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f043 0220 	orr.w	r2, r3, #32
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e007      	b.n	800303e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d1ae      	bne.n	8002f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305c:	d11b      	bne.n	8003096 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003066:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f043 0204 	orr.w	r2, r3, #4
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e267      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d075      	beq.n	80031ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030c2:	4b88      	ldr	r3, [pc, #544]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d00c      	beq.n	80030e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ce:	4b85      	ldr	r3, [pc, #532]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d112      	bne.n	8003100 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030da:	4b82      	ldr	r3, [pc, #520]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e6:	d10b      	bne.n	8003100 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	4b7e      	ldr	r3, [pc, #504]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d05b      	beq.n	80031ac <HAL_RCC_OscConfig+0x108>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d157      	bne.n	80031ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e242      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003108:	d106      	bne.n	8003118 <HAL_RCC_OscConfig+0x74>
 800310a:	4b76      	ldr	r3, [pc, #472]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a75      	ldr	r2, [pc, #468]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e01d      	b.n	8003154 <HAL_RCC_OscConfig+0xb0>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0x98>
 8003122:	4b70      	ldr	r3, [pc, #448]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6f      	ldr	r2, [pc, #444]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	4b6d      	ldr	r3, [pc, #436]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a6c      	ldr	r2, [pc, #432]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e00b      	b.n	8003154 <HAL_RCC_OscConfig+0xb0>
 800313c:	4b69      	ldr	r3, [pc, #420]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a68      	ldr	r2, [pc, #416]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	4b66      	ldr	r3, [pc, #408]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a65      	ldr	r2, [pc, #404]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 800314e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d013      	beq.n	8003184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fe fcda 	bl	8001b14 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003164:	f7fe fcd6 	bl	8001b14 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e207      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	4b5b      	ldr	r3, [pc, #364]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0xc0>
 8003182:	e014      	b.n	80031ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7fe fcc6 	bl	8001b14 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800318c:	f7fe fcc2 	bl	8001b14 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	; 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e1f3      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	4b51      	ldr	r3, [pc, #324]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0xe8>
 80031aa:	e000      	b.n	80031ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d063      	beq.n	8003282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031ba:	4b4a      	ldr	r3, [pc, #296]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c6:	4b47      	ldr	r3, [pc, #284]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d11c      	bne.n	800320c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031d2:	4b44      	ldr	r3, [pc, #272]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d116      	bne.n	800320c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031de:	4b41      	ldr	r3, [pc, #260]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_RCC_OscConfig+0x152>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e1c7      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f6:	4b3b      	ldr	r3, [pc, #236]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4937      	ldr	r1, [pc, #220]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320a:	e03a      	b.n	8003282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d020      	beq.n	8003256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003214:	4b34      	ldr	r3, [pc, #208]	; (80032e8 <HAL_RCC_OscConfig+0x244>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7fe fc7b 	bl	8001b14 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003222:	f7fe fc77 	bl	8001b14 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e1a8      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003234:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003240:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4925      	ldr	r1, [pc, #148]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]
 8003254:	e015      	b.n	8003282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003256:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <HAL_RCC_OscConfig+0x244>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fe fc5a 	bl	8001b14 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003264:	f7fe fc56 	bl	8001b14 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e187      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003276:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d036      	beq.n	80032fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d016      	beq.n	80032c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003296:	4b15      	ldr	r3, [pc, #84]	; (80032ec <HAL_RCC_OscConfig+0x248>)
 8003298:	2201      	movs	r2, #1
 800329a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329c:	f7fe fc3a 	bl	8001b14 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a4:	f7fe fc36 	bl	8001b14 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e167      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b6:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80032b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x200>
 80032c2:	e01b      	b.n	80032fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c4:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_RCC_OscConfig+0x248>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ca:	f7fe fc23 	bl	8001b14 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d0:	e00e      	b.n	80032f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d2:	f7fe fc1f 	bl	8001b14 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d907      	bls.n	80032f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e150      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
 80032e4:	40023800 	.word	0x40023800
 80032e8:	42470000 	.word	0x42470000
 80032ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f0:	4b88      	ldr	r3, [pc, #544]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80032f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1ea      	bne.n	80032d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 8097 	beq.w	8003438 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330a:	2300      	movs	r3, #0
 800330c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800330e:	4b81      	ldr	r3, [pc, #516]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10f      	bne.n	800333a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	4b7d      	ldr	r3, [pc, #500]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	4a7c      	ldr	r2, [pc, #496]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003328:	6413      	str	r3, [r2, #64]	; 0x40
 800332a:	4b7a      	ldr	r3, [pc, #488]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003336:	2301      	movs	r3, #1
 8003338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333a:	4b77      	ldr	r3, [pc, #476]	; (8003518 <HAL_RCC_OscConfig+0x474>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d118      	bne.n	8003378 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003346:	4b74      	ldr	r3, [pc, #464]	; (8003518 <HAL_RCC_OscConfig+0x474>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a73      	ldr	r2, [pc, #460]	; (8003518 <HAL_RCC_OscConfig+0x474>)
 800334c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003352:	f7fe fbdf 	bl	8001b14 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335a:	f7fe fbdb 	bl	8001b14 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e10c      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	4b6a      	ldr	r3, [pc, #424]	; (8003518 <HAL_RCC_OscConfig+0x474>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x2ea>
 8003380:	4b64      	ldr	r3, [pc, #400]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	4a63      	ldr	r2, [pc, #396]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	6713      	str	r3, [r2, #112]	; 0x70
 800338c:	e01c      	b.n	80033c8 <HAL_RCC_OscConfig+0x324>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b05      	cmp	r3, #5
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x30c>
 8003396:	4b5f      	ldr	r3, [pc, #380]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	4a5e      	ldr	r2, [pc, #376]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 800339c:	f043 0304 	orr.w	r3, r3, #4
 80033a0:	6713      	str	r3, [r2, #112]	; 0x70
 80033a2:	4b5c      	ldr	r3, [pc, #368]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	4a5b      	ldr	r2, [pc, #364]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	6713      	str	r3, [r2, #112]	; 0x70
 80033ae:	e00b      	b.n	80033c8 <HAL_RCC_OscConfig+0x324>
 80033b0:	4b58      	ldr	r3, [pc, #352]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4a57      	ldr	r2, [pc, #348]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033b6:	f023 0301 	bic.w	r3, r3, #1
 80033ba:	6713      	str	r3, [r2, #112]	; 0x70
 80033bc:	4b55      	ldr	r3, [pc, #340]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a54      	ldr	r2, [pc, #336]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033c2:	f023 0304 	bic.w	r3, r3, #4
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d015      	beq.n	80033fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7fe fba0 	bl	8001b14 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d6:	e00a      	b.n	80033ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d8:	f7fe fb9c 	bl	8001b14 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e0cb      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ee:	4b49      	ldr	r3, [pc, #292]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0ee      	beq.n	80033d8 <HAL_RCC_OscConfig+0x334>
 80033fa:	e014      	b.n	8003426 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fc:	f7fe fb8a 	bl	8001b14 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003402:	e00a      	b.n	800341a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003404:	f7fe fb86 	bl	8001b14 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e0b5      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341a:	4b3e      	ldr	r3, [pc, #248]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1ee      	bne.n	8003404 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003426:	7dfb      	ldrb	r3, [r7, #23]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d105      	bne.n	8003438 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342c:	4b39      	ldr	r3, [pc, #228]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	4a38      	ldr	r2, [pc, #224]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003436:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80a1 	beq.w	8003584 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003442:	4b34      	ldr	r3, [pc, #208]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b08      	cmp	r3, #8
 800344c:	d05c      	beq.n	8003508 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d141      	bne.n	80034da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003456:	4b31      	ldr	r3, [pc, #196]	; (800351c <HAL_RCC_OscConfig+0x478>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7fe fb5a 	bl	8001b14 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe fb56 	bl	8001b14 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e087      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003476:	4b27      	ldr	r3, [pc, #156]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	019b      	lsls	r3, r3, #6
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	085b      	lsrs	r3, r3, #1
 800349a:	3b01      	subs	r3, #1
 800349c:	041b      	lsls	r3, r3, #16
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	061b      	lsls	r3, r3, #24
 80034a6:	491b      	ldr	r1, [pc, #108]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ac:	4b1b      	ldr	r3, [pc, #108]	; (800351c <HAL_RCC_OscConfig+0x478>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b2:	f7fe fb2f 	bl	8001b14 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ba:	f7fe fb2b 	bl	8001b14 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e05c      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x416>
 80034d8:	e054      	b.n	8003584 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034da:	4b10      	ldr	r3, [pc, #64]	; (800351c <HAL_RCC_OscConfig+0x478>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7fe fb18 	bl	8001b14 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fe fb14 	bl	8001b14 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e045      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x444>
 8003506:	e03d      	b.n	8003584 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d107      	bne.n	8003520 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e038      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
 8003514:	40023800 	.word	0x40023800
 8003518:	40007000 	.word	0x40007000
 800351c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003520:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <HAL_RCC_OscConfig+0x4ec>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d028      	beq.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003538:	429a      	cmp	r2, r3
 800353a:	d121      	bne.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003546:	429a      	cmp	r2, r3
 8003548:	d11a      	bne.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003550:	4013      	ands	r3, r2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003556:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003558:	4293      	cmp	r3, r2
 800355a:	d111      	bne.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003566:	085b      	lsrs	r3, r3, #1
 8003568:	3b01      	subs	r3, #1
 800356a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d107      	bne.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d001      	beq.n	8003584 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40023800 	.word	0x40023800

08003594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0cc      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035a8:	4b68      	ldr	r3, [pc, #416]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d90c      	bls.n	80035d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b65      	ldr	r3, [pc, #404]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035be:	4b63      	ldr	r3, [pc, #396]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0b8      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d020      	beq.n	800361e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e8:	4b59      	ldr	r3, [pc, #356]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	4a58      	ldr	r2, [pc, #352]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003600:	4b53      	ldr	r3, [pc, #332]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	4a52      	ldr	r2, [pc, #328]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800360a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800360c:	4b50      	ldr	r3, [pc, #320]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	494d      	ldr	r1, [pc, #308]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	4313      	orrs	r3, r2
 800361c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d044      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d107      	bne.n	8003642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003632:	4b47      	ldr	r3, [pc, #284]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d119      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e07f      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d003      	beq.n	8003652 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800364e:	2b03      	cmp	r3, #3
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	4b3f      	ldr	r3, [pc, #252]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e06f      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003662:	4b3b      	ldr	r3, [pc, #236]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e067      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003672:	4b37      	ldr	r3, [pc, #220]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f023 0203 	bic.w	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4934      	ldr	r1, [pc, #208]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	4313      	orrs	r3, r2
 8003682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003684:	f7fe fa46 	bl	8001b14 <HAL_GetTick>
 8003688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	e00a      	b.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368c:	f7fe fa42 	bl	8001b14 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	; 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e04f      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	4b2b      	ldr	r3, [pc, #172]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 020c 	and.w	r2, r3, #12
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d1eb      	bne.n	800368c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036b4:	4b25      	ldr	r3, [pc, #148]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d20c      	bcs.n	80036dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b22      	ldr	r3, [pc, #136]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ca:	4b20      	ldr	r3, [pc, #128]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e032      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e8:	4b19      	ldr	r3, [pc, #100]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	4916      	ldr	r1, [pc, #88]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d009      	beq.n	800371a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003706:	4b12      	ldr	r3, [pc, #72]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	490e      	ldr	r1, [pc, #56]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800371a:	f000 f821 	bl	8003760 <HAL_RCC_GetSysClockFreq>
 800371e:	4602      	mov	r2, r0
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	091b      	lsrs	r3, r3, #4
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	490a      	ldr	r1, [pc, #40]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 800372c:	5ccb      	ldrb	r3, [r1, r3]
 800372e:	fa22 f303 	lsr.w	r3, r2, r3
 8003732:	4a09      	ldr	r2, [pc, #36]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003736:	4b09      	ldr	r3, [pc, #36]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe f9a6 	bl	8001a8c <HAL_InitTick>

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40023c00 	.word	0x40023c00
 8003750:	40023800 	.word	0x40023800
 8003754:	08007074 	.word	0x08007074
 8003758:	20000000 	.word	0x20000000
 800375c:	20000004 	.word	0x20000004

08003760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003764:	b094      	sub	sp, #80	; 0x50
 8003766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003778:	4b79      	ldr	r3, [pc, #484]	; (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 030c 	and.w	r3, r3, #12
 8003780:	2b08      	cmp	r3, #8
 8003782:	d00d      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003784:	2b08      	cmp	r3, #8
 8003786:	f200 80e1 	bhi.w	800394c <HAL_RCC_GetSysClockFreq+0x1ec>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x34>
 800378e:	2b04      	cmp	r3, #4
 8003790:	d003      	beq.n	800379a <HAL_RCC_GetSysClockFreq+0x3a>
 8003792:	e0db      	b.n	800394c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003794:	4b73      	ldr	r3, [pc, #460]	; (8003964 <HAL_RCC_GetSysClockFreq+0x204>)
 8003796:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003798:	e0db      	b.n	8003952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800379a:	4b73      	ldr	r3, [pc, #460]	; (8003968 <HAL_RCC_GetSysClockFreq+0x208>)
 800379c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800379e:	e0d8      	b.n	8003952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037a0:	4b6f      	ldr	r3, [pc, #444]	; (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037a8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037aa:	4b6d      	ldr	r3, [pc, #436]	; (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d063      	beq.n	800387e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b6:	4b6a      	ldr	r3, [pc, #424]	; (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	099b      	lsrs	r3, r3, #6
 80037bc:	2200      	movs	r2, #0
 80037be:	63bb      	str	r3, [r7, #56]	; 0x38
 80037c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c8:	633b      	str	r3, [r7, #48]	; 0x30
 80037ca:	2300      	movs	r3, #0
 80037cc:	637b      	str	r3, [r7, #52]	; 0x34
 80037ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037d2:	4622      	mov	r2, r4
 80037d4:	462b      	mov	r3, r5
 80037d6:	f04f 0000 	mov.w	r0, #0
 80037da:	f04f 0100 	mov.w	r1, #0
 80037de:	0159      	lsls	r1, r3, #5
 80037e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037e4:	0150      	lsls	r0, r2, #5
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4621      	mov	r1, r4
 80037ec:	1a51      	subs	r1, r2, r1
 80037ee:	6139      	str	r1, [r7, #16]
 80037f0:	4629      	mov	r1, r5
 80037f2:	eb63 0301 	sbc.w	r3, r3, r1
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003804:	4659      	mov	r1, fp
 8003806:	018b      	lsls	r3, r1, #6
 8003808:	4651      	mov	r1, sl
 800380a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800380e:	4651      	mov	r1, sl
 8003810:	018a      	lsls	r2, r1, #6
 8003812:	4651      	mov	r1, sl
 8003814:	ebb2 0801 	subs.w	r8, r2, r1
 8003818:	4659      	mov	r1, fp
 800381a:	eb63 0901 	sbc.w	r9, r3, r1
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800382a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800382e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003832:	4690      	mov	r8, r2
 8003834:	4699      	mov	r9, r3
 8003836:	4623      	mov	r3, r4
 8003838:	eb18 0303 	adds.w	r3, r8, r3
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	462b      	mov	r3, r5
 8003840:	eb49 0303 	adc.w	r3, r9, r3
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003852:	4629      	mov	r1, r5
 8003854:	024b      	lsls	r3, r1, #9
 8003856:	4621      	mov	r1, r4
 8003858:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800385c:	4621      	mov	r1, r4
 800385e:	024a      	lsls	r2, r1, #9
 8003860:	4610      	mov	r0, r2
 8003862:	4619      	mov	r1, r3
 8003864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003866:	2200      	movs	r2, #0
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
 800386a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800386c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003870:	f7fd f9a2 	bl	8000bb8 <__aeabi_uldivmod>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4613      	mov	r3, r2
 800387a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800387c:	e058      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800387e:	4b38      	ldr	r3, [pc, #224]	; (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	099b      	lsrs	r3, r3, #6
 8003884:	2200      	movs	r2, #0
 8003886:	4618      	mov	r0, r3
 8003888:	4611      	mov	r1, r2
 800388a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800388e:	623b      	str	r3, [r7, #32]
 8003890:	2300      	movs	r3, #0
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
 8003894:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003898:	4642      	mov	r2, r8
 800389a:	464b      	mov	r3, r9
 800389c:	f04f 0000 	mov.w	r0, #0
 80038a0:	f04f 0100 	mov.w	r1, #0
 80038a4:	0159      	lsls	r1, r3, #5
 80038a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038aa:	0150      	lsls	r0, r2, #5
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4641      	mov	r1, r8
 80038b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80038b6:	4649      	mov	r1, r9
 80038b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038d0:	ebb2 040a 	subs.w	r4, r2, sl
 80038d4:	eb63 050b 	sbc.w	r5, r3, fp
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	00eb      	lsls	r3, r5, #3
 80038e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038e6:	00e2      	lsls	r2, r4, #3
 80038e8:	4614      	mov	r4, r2
 80038ea:	461d      	mov	r5, r3
 80038ec:	4643      	mov	r3, r8
 80038ee:	18e3      	adds	r3, r4, r3
 80038f0:	603b      	str	r3, [r7, #0]
 80038f2:	464b      	mov	r3, r9
 80038f4:	eb45 0303 	adc.w	r3, r5, r3
 80038f8:	607b      	str	r3, [r7, #4]
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003906:	4629      	mov	r1, r5
 8003908:	028b      	lsls	r3, r1, #10
 800390a:	4621      	mov	r1, r4
 800390c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003910:	4621      	mov	r1, r4
 8003912:	028a      	lsls	r2, r1, #10
 8003914:	4610      	mov	r0, r2
 8003916:	4619      	mov	r1, r3
 8003918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800391a:	2200      	movs	r2, #0
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	61fa      	str	r2, [r7, #28]
 8003920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003924:	f7fd f948 	bl	8000bb8 <__aeabi_uldivmod>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4613      	mov	r3, r2
 800392e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	0c1b      	lsrs	r3, r3, #16
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	3301      	adds	r3, #1
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003940:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003944:	fbb2 f3f3 	udiv	r3, r2, r3
 8003948:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800394a:	e002      	b.n	8003952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800394c:	4b05      	ldr	r3, [pc, #20]	; (8003964 <HAL_RCC_GetSysClockFreq+0x204>)
 800394e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003954:	4618      	mov	r0, r3
 8003956:	3750      	adds	r7, #80	; 0x50
 8003958:	46bd      	mov	sp, r7
 800395a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800395e:	bf00      	nop
 8003960:	40023800 	.word	0x40023800
 8003964:	00f42400 	.word	0x00f42400
 8003968:	007a1200 	.word	0x007a1200

0800396c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003970:	4b03      	ldr	r3, [pc, #12]	; (8003980 <HAL_RCC_GetHCLKFreq+0x14>)
 8003972:	681b      	ldr	r3, [r3, #0]
}
 8003974:	4618      	mov	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000000 	.word	0x20000000

08003984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003988:	f7ff fff0 	bl	800396c <HAL_RCC_GetHCLKFreq>
 800398c:	4602      	mov	r2, r0
 800398e:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	0a9b      	lsrs	r3, r3, #10
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	4903      	ldr	r1, [pc, #12]	; (80039a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800399a:	5ccb      	ldrb	r3, [r1, r3]
 800399c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40023800 	.word	0x40023800
 80039a8:	08007084 	.word	0x08007084

080039ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039b0:	f7ff ffdc 	bl	800396c <HAL_RCC_GetHCLKFreq>
 80039b4:	4602      	mov	r2, r0
 80039b6:	4b05      	ldr	r3, [pc, #20]	; (80039cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	0b5b      	lsrs	r3, r3, #13
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	4903      	ldr	r1, [pc, #12]	; (80039d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039c2:	5ccb      	ldrb	r3, [r1, r3]
 80039c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40023800 	.word	0x40023800
 80039d0:	08007084 	.word	0x08007084

080039d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e042      	b.n	8003a6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fd feb0 	bl	8001760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2224      	movs	r2, #36	; 0x24
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f973 	bl	8003d04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695a      	ldr	r2, [r3, #20]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08a      	sub	sp, #40	; 0x28
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	4613      	mov	r3, r2
 8003a82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	d175      	bne.n	8003b80 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_UART_Transmit+0x2c>
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e06e      	b.n	8003b82 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2221      	movs	r2, #33	; 0x21
 8003aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ab2:	f7fe f82f 	bl	8001b14 <HAL_GetTick>
 8003ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	88fa      	ldrh	r2, [r7, #6]
 8003abc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	88fa      	ldrh	r2, [r7, #6]
 8003ac2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003acc:	d108      	bne.n	8003ae0 <HAL_UART_Transmit+0x6c>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d104      	bne.n	8003ae0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	61bb      	str	r3, [r7, #24]
 8003ade:	e003      	b.n	8003ae8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ae8:	e02e      	b.n	8003b48 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2200      	movs	r2, #0
 8003af2:	2180      	movs	r1, #128	; 0x80
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f848 	bl	8003b8a <UART_WaitOnFlagUntilTimeout>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e03a      	b.n	8003b82 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10b      	bne.n	8003b2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	3302      	adds	r3, #2
 8003b26:	61bb      	str	r3, [r7, #24]
 8003b28:	e007      	b.n	8003b3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	781a      	ldrb	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	3301      	adds	r3, #1
 8003b38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1cb      	bne.n	8003aea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2140      	movs	r1, #64	; 0x40
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f814 	bl	8003b8a <UART_WaitOnFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e006      	b.n	8003b82 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	e000      	b.n	8003b82 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
  }
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3720      	adds	r7, #32
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b086      	sub	sp, #24
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	603b      	str	r3, [r7, #0]
 8003b96:	4613      	mov	r3, r2
 8003b98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b9a:	e03b      	b.n	8003c14 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba2:	d037      	beq.n	8003c14 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba4:	f7fd ffb6 	bl	8001b14 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	6a3a      	ldr	r2, [r7, #32]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d302      	bcc.n	8003bba <UART_WaitOnFlagUntilTimeout+0x30>
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e03a      	b.n	8003c34 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d023      	beq.n	8003c14 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b80      	cmp	r3, #128	; 0x80
 8003bd0:	d020      	beq.n	8003c14 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b40      	cmp	r3, #64	; 0x40
 8003bd6:	d01d      	beq.n	8003c14 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d116      	bne.n	8003c14 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f81d 	bl	8003c3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2208      	movs	r2, #8
 8003c06:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e00f      	b.n	8003c34 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d0b4      	beq.n	8003b9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b095      	sub	sp, #84	; 0x54
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	330c      	adds	r3, #12
 8003c4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c64:	643a      	str	r2, [r7, #64]	; 0x40
 8003c66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c6c:	e841 2300 	strex	r3, r2, [r1]
 8003c70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e5      	bne.n	8003c44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3314      	adds	r3, #20
 8003c7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	e853 3f00 	ldrex	r3, [r3]
 8003c86:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
 8003c8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3314      	adds	r3, #20
 8003c96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ca0:	e841 2300 	strex	r3, r2, [r1]
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e5      	bne.n	8003c78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d119      	bne.n	8003ce8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	330c      	adds	r3, #12
 8003cba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	e853 3f00 	ldrex	r3, [r3]
 8003cc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f023 0310 	bic.w	r3, r3, #16
 8003cca:	647b      	str	r3, [r7, #68]	; 0x44
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	330c      	adds	r3, #12
 8003cd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cd4:	61ba      	str	r2, [r7, #24]
 8003cd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd8:	6979      	ldr	r1, [r7, #20]
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	e841 2300 	strex	r3, r2, [r1]
 8003ce0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1e5      	bne.n	8003cb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003cf6:	bf00      	nop
 8003cf8:	3754      	adds	r7, #84	; 0x54
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
	...

08003d04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d08:	b0c0      	sub	sp, #256	; 0x100
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d20:	68d9      	ldr	r1, [r3, #12]
 8003d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	ea40 0301 	orr.w	r3, r0, r1
 8003d2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d5c:	f021 010c 	bic.w	r1, r1, #12
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d6a:	430b      	orrs	r3, r1
 8003d6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7e:	6999      	ldr	r1, [r3, #24]
 8003d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	ea40 0301 	orr.w	r3, r0, r1
 8003d8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4b8f      	ldr	r3, [pc, #572]	; (8003fd0 <UART_SetConfig+0x2cc>)
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d005      	beq.n	8003da4 <UART_SetConfig+0xa0>
 8003d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4b8d      	ldr	r3, [pc, #564]	; (8003fd4 <UART_SetConfig+0x2d0>)
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d104      	bne.n	8003dae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003da4:	f7ff fe02 	bl	80039ac <HAL_RCC_GetPCLK2Freq>
 8003da8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003dac:	e003      	b.n	8003db6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dae:	f7ff fde9 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 8003db2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc0:	f040 810c 	bne.w	8003fdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003dd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003dd6:	4622      	mov	r2, r4
 8003dd8:	462b      	mov	r3, r5
 8003dda:	1891      	adds	r1, r2, r2
 8003ddc:	65b9      	str	r1, [r7, #88]	; 0x58
 8003dde:	415b      	adcs	r3, r3
 8003de0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003de2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003de6:	4621      	mov	r1, r4
 8003de8:	eb12 0801 	adds.w	r8, r2, r1
 8003dec:	4629      	mov	r1, r5
 8003dee:	eb43 0901 	adc.w	r9, r3, r1
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e06:	4690      	mov	r8, r2
 8003e08:	4699      	mov	r9, r3
 8003e0a:	4623      	mov	r3, r4
 8003e0c:	eb18 0303 	adds.w	r3, r8, r3
 8003e10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e14:	462b      	mov	r3, r5
 8003e16:	eb49 0303 	adc.w	r3, r9, r3
 8003e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e32:	460b      	mov	r3, r1
 8003e34:	18db      	adds	r3, r3, r3
 8003e36:	653b      	str	r3, [r7, #80]	; 0x50
 8003e38:	4613      	mov	r3, r2
 8003e3a:	eb42 0303 	adc.w	r3, r2, r3
 8003e3e:	657b      	str	r3, [r7, #84]	; 0x54
 8003e40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e48:	f7fc feb6 	bl	8000bb8 <__aeabi_uldivmod>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4b61      	ldr	r3, [pc, #388]	; (8003fd8 <UART_SetConfig+0x2d4>)
 8003e52:	fba3 2302 	umull	r2, r3, r3, r2
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	011c      	lsls	r4, r3, #4
 8003e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e6c:	4642      	mov	r2, r8
 8003e6e:	464b      	mov	r3, r9
 8003e70:	1891      	adds	r1, r2, r2
 8003e72:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e74:	415b      	adcs	r3, r3
 8003e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e7c:	4641      	mov	r1, r8
 8003e7e:	eb12 0a01 	adds.w	sl, r2, r1
 8003e82:	4649      	mov	r1, r9
 8003e84:	eb43 0b01 	adc.w	fp, r3, r1
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e9c:	4692      	mov	sl, r2
 8003e9e:	469b      	mov	fp, r3
 8003ea0:	4643      	mov	r3, r8
 8003ea2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003eaa:	464b      	mov	r3, r9
 8003eac:	eb4b 0303 	adc.w	r3, fp, r3
 8003eb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ec0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ec4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	18db      	adds	r3, r3, r3
 8003ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8003ece:	4613      	mov	r3, r2
 8003ed0:	eb42 0303 	adc.w	r3, r2, r3
 8003ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ed6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003eda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ede:	f7fc fe6b 	bl	8000bb8 <__aeabi_uldivmod>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4b3b      	ldr	r3, [pc, #236]	; (8003fd8 <UART_SetConfig+0x2d4>)
 8003eea:	fba3 2301 	umull	r2, r3, r3, r1
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	2264      	movs	r2, #100	; 0x64
 8003ef2:	fb02 f303 	mul.w	r3, r2, r3
 8003ef6:	1acb      	subs	r3, r1, r3
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003efe:	4b36      	ldr	r3, [pc, #216]	; (8003fd8 <UART_SetConfig+0x2d4>)
 8003f00:	fba3 2302 	umull	r2, r3, r3, r2
 8003f04:	095b      	lsrs	r3, r3, #5
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f0c:	441c      	add	r4, r3
 8003f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f12:	2200      	movs	r2, #0
 8003f14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f20:	4642      	mov	r2, r8
 8003f22:	464b      	mov	r3, r9
 8003f24:	1891      	adds	r1, r2, r2
 8003f26:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f28:	415b      	adcs	r3, r3
 8003f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f30:	4641      	mov	r1, r8
 8003f32:	1851      	adds	r1, r2, r1
 8003f34:	6339      	str	r1, [r7, #48]	; 0x30
 8003f36:	4649      	mov	r1, r9
 8003f38:	414b      	adcs	r3, r1
 8003f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f3c:	f04f 0200 	mov.w	r2, #0
 8003f40:	f04f 0300 	mov.w	r3, #0
 8003f44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f48:	4659      	mov	r1, fp
 8003f4a:	00cb      	lsls	r3, r1, #3
 8003f4c:	4651      	mov	r1, sl
 8003f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f52:	4651      	mov	r1, sl
 8003f54:	00ca      	lsls	r2, r1, #3
 8003f56:	4610      	mov	r0, r2
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4642      	mov	r2, r8
 8003f5e:	189b      	adds	r3, r3, r2
 8003f60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f64:	464b      	mov	r3, r9
 8003f66:	460a      	mov	r2, r1
 8003f68:	eb42 0303 	adc.w	r3, r2, r3
 8003f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f84:	460b      	mov	r3, r1
 8003f86:	18db      	adds	r3, r3, r3
 8003f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	eb42 0303 	adc.w	r3, r2, r3
 8003f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f9a:	f7fc fe0d 	bl	8000bb8 <__aeabi_uldivmod>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4b0d      	ldr	r3, [pc, #52]	; (8003fd8 <UART_SetConfig+0x2d4>)
 8003fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	2164      	movs	r1, #100	; 0x64
 8003fac:	fb01 f303 	mul.w	r3, r1, r3
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	3332      	adds	r3, #50	; 0x32
 8003fb6:	4a08      	ldr	r2, [pc, #32]	; (8003fd8 <UART_SetConfig+0x2d4>)
 8003fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	f003 0207 	and.w	r2, r3, #7
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4422      	add	r2, r4
 8003fca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fcc:	e106      	b.n	80041dc <UART_SetConfig+0x4d8>
 8003fce:	bf00      	nop
 8003fd0:	40011000 	.word	0x40011000
 8003fd4:	40011400 	.word	0x40011400
 8003fd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fe6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003fea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003fee:	4642      	mov	r2, r8
 8003ff0:	464b      	mov	r3, r9
 8003ff2:	1891      	adds	r1, r2, r2
 8003ff4:	6239      	str	r1, [r7, #32]
 8003ff6:	415b      	adcs	r3, r3
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ffe:	4641      	mov	r1, r8
 8004000:	1854      	adds	r4, r2, r1
 8004002:	4649      	mov	r1, r9
 8004004:	eb43 0501 	adc.w	r5, r3, r1
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	00eb      	lsls	r3, r5, #3
 8004012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004016:	00e2      	lsls	r2, r4, #3
 8004018:	4614      	mov	r4, r2
 800401a:	461d      	mov	r5, r3
 800401c:	4643      	mov	r3, r8
 800401e:	18e3      	adds	r3, r4, r3
 8004020:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004024:	464b      	mov	r3, r9
 8004026:	eb45 0303 	adc.w	r3, r5, r3
 800402a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800402e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800403a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	f04f 0300 	mov.w	r3, #0
 8004046:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800404a:	4629      	mov	r1, r5
 800404c:	008b      	lsls	r3, r1, #2
 800404e:	4621      	mov	r1, r4
 8004050:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004054:	4621      	mov	r1, r4
 8004056:	008a      	lsls	r2, r1, #2
 8004058:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800405c:	f7fc fdac 	bl	8000bb8 <__aeabi_uldivmod>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4b60      	ldr	r3, [pc, #384]	; (80041e8 <UART_SetConfig+0x4e4>)
 8004066:	fba3 2302 	umull	r2, r3, r3, r2
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	011c      	lsls	r4, r3, #4
 800406e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004072:	2200      	movs	r2, #0
 8004074:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004078:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800407c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004080:	4642      	mov	r2, r8
 8004082:	464b      	mov	r3, r9
 8004084:	1891      	adds	r1, r2, r2
 8004086:	61b9      	str	r1, [r7, #24]
 8004088:	415b      	adcs	r3, r3
 800408a:	61fb      	str	r3, [r7, #28]
 800408c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004090:	4641      	mov	r1, r8
 8004092:	1851      	adds	r1, r2, r1
 8004094:	6139      	str	r1, [r7, #16]
 8004096:	4649      	mov	r1, r9
 8004098:	414b      	adcs	r3, r1
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040a8:	4659      	mov	r1, fp
 80040aa:	00cb      	lsls	r3, r1, #3
 80040ac:	4651      	mov	r1, sl
 80040ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040b2:	4651      	mov	r1, sl
 80040b4:	00ca      	lsls	r2, r1, #3
 80040b6:	4610      	mov	r0, r2
 80040b8:	4619      	mov	r1, r3
 80040ba:	4603      	mov	r3, r0
 80040bc:	4642      	mov	r2, r8
 80040be:	189b      	adds	r3, r3, r2
 80040c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040c4:	464b      	mov	r3, r9
 80040c6:	460a      	mov	r2, r1
 80040c8:	eb42 0303 	adc.w	r3, r2, r3
 80040cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80040da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040e8:	4649      	mov	r1, r9
 80040ea:	008b      	lsls	r3, r1, #2
 80040ec:	4641      	mov	r1, r8
 80040ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040f2:	4641      	mov	r1, r8
 80040f4:	008a      	lsls	r2, r1, #2
 80040f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80040fa:	f7fc fd5d 	bl	8000bb8 <__aeabi_uldivmod>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4611      	mov	r1, r2
 8004104:	4b38      	ldr	r3, [pc, #224]	; (80041e8 <UART_SetConfig+0x4e4>)
 8004106:	fba3 2301 	umull	r2, r3, r3, r1
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	2264      	movs	r2, #100	; 0x64
 800410e:	fb02 f303 	mul.w	r3, r2, r3
 8004112:	1acb      	subs	r3, r1, r3
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	3332      	adds	r3, #50	; 0x32
 8004118:	4a33      	ldr	r2, [pc, #204]	; (80041e8 <UART_SetConfig+0x4e4>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004124:	441c      	add	r4, r3
 8004126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800412a:	2200      	movs	r2, #0
 800412c:	673b      	str	r3, [r7, #112]	; 0x70
 800412e:	677a      	str	r2, [r7, #116]	; 0x74
 8004130:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004134:	4642      	mov	r2, r8
 8004136:	464b      	mov	r3, r9
 8004138:	1891      	adds	r1, r2, r2
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	415b      	adcs	r3, r3
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004144:	4641      	mov	r1, r8
 8004146:	1851      	adds	r1, r2, r1
 8004148:	6039      	str	r1, [r7, #0]
 800414a:	4649      	mov	r1, r9
 800414c:	414b      	adcs	r3, r1
 800414e:	607b      	str	r3, [r7, #4]
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800415c:	4659      	mov	r1, fp
 800415e:	00cb      	lsls	r3, r1, #3
 8004160:	4651      	mov	r1, sl
 8004162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004166:	4651      	mov	r1, sl
 8004168:	00ca      	lsls	r2, r1, #3
 800416a:	4610      	mov	r0, r2
 800416c:	4619      	mov	r1, r3
 800416e:	4603      	mov	r3, r0
 8004170:	4642      	mov	r2, r8
 8004172:	189b      	adds	r3, r3, r2
 8004174:	66bb      	str	r3, [r7, #104]	; 0x68
 8004176:	464b      	mov	r3, r9
 8004178:	460a      	mov	r2, r1
 800417a:	eb42 0303 	adc.w	r3, r2, r3
 800417e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	663b      	str	r3, [r7, #96]	; 0x60
 800418a:	667a      	str	r2, [r7, #100]	; 0x64
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004198:	4649      	mov	r1, r9
 800419a:	008b      	lsls	r3, r1, #2
 800419c:	4641      	mov	r1, r8
 800419e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041a2:	4641      	mov	r1, r8
 80041a4:	008a      	lsls	r2, r1, #2
 80041a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041aa:	f7fc fd05 	bl	8000bb8 <__aeabi_uldivmod>
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <UART_SetConfig+0x4e4>)
 80041b4:	fba3 1302 	umull	r1, r3, r3, r2
 80041b8:	095b      	lsrs	r3, r3, #5
 80041ba:	2164      	movs	r1, #100	; 0x64
 80041bc:	fb01 f303 	mul.w	r3, r1, r3
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	3332      	adds	r3, #50	; 0x32
 80041c6:	4a08      	ldr	r2, [pc, #32]	; (80041e8 <UART_SetConfig+0x4e4>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	f003 020f 	and.w	r2, r3, #15
 80041d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4422      	add	r2, r4
 80041da:	609a      	str	r2, [r3, #8]
}
 80041dc:	bf00      	nop
 80041de:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041e2:	46bd      	mov	sp, r7
 80041e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041e8:	51eb851f 	.word	0x51eb851f

080041ec <__cvt>:
 80041ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041f0:	ec55 4b10 	vmov	r4, r5, d0
 80041f4:	2d00      	cmp	r5, #0
 80041f6:	460e      	mov	r6, r1
 80041f8:	4619      	mov	r1, r3
 80041fa:	462b      	mov	r3, r5
 80041fc:	bfbb      	ittet	lt
 80041fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004202:	461d      	movlt	r5, r3
 8004204:	2300      	movge	r3, #0
 8004206:	232d      	movlt	r3, #45	; 0x2d
 8004208:	700b      	strb	r3, [r1, #0]
 800420a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800420c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004210:	4691      	mov	r9, r2
 8004212:	f023 0820 	bic.w	r8, r3, #32
 8004216:	bfbc      	itt	lt
 8004218:	4622      	movlt	r2, r4
 800421a:	4614      	movlt	r4, r2
 800421c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004220:	d005      	beq.n	800422e <__cvt+0x42>
 8004222:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004226:	d100      	bne.n	800422a <__cvt+0x3e>
 8004228:	3601      	adds	r6, #1
 800422a:	2102      	movs	r1, #2
 800422c:	e000      	b.n	8004230 <__cvt+0x44>
 800422e:	2103      	movs	r1, #3
 8004230:	ab03      	add	r3, sp, #12
 8004232:	9301      	str	r3, [sp, #4]
 8004234:	ab02      	add	r3, sp, #8
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	ec45 4b10 	vmov	d0, r4, r5
 800423c:	4653      	mov	r3, sl
 800423e:	4632      	mov	r2, r6
 8004240:	f000 fe8a 	bl	8004f58 <_dtoa_r>
 8004244:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004248:	4607      	mov	r7, r0
 800424a:	d102      	bne.n	8004252 <__cvt+0x66>
 800424c:	f019 0f01 	tst.w	r9, #1
 8004250:	d022      	beq.n	8004298 <__cvt+0xac>
 8004252:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004256:	eb07 0906 	add.w	r9, r7, r6
 800425a:	d110      	bne.n	800427e <__cvt+0x92>
 800425c:	783b      	ldrb	r3, [r7, #0]
 800425e:	2b30      	cmp	r3, #48	; 0x30
 8004260:	d10a      	bne.n	8004278 <__cvt+0x8c>
 8004262:	2200      	movs	r2, #0
 8004264:	2300      	movs	r3, #0
 8004266:	4620      	mov	r0, r4
 8004268:	4629      	mov	r1, r5
 800426a:	f7fc fc35 	bl	8000ad8 <__aeabi_dcmpeq>
 800426e:	b918      	cbnz	r0, 8004278 <__cvt+0x8c>
 8004270:	f1c6 0601 	rsb	r6, r6, #1
 8004274:	f8ca 6000 	str.w	r6, [sl]
 8004278:	f8da 3000 	ldr.w	r3, [sl]
 800427c:	4499      	add	r9, r3
 800427e:	2200      	movs	r2, #0
 8004280:	2300      	movs	r3, #0
 8004282:	4620      	mov	r0, r4
 8004284:	4629      	mov	r1, r5
 8004286:	f7fc fc27 	bl	8000ad8 <__aeabi_dcmpeq>
 800428a:	b108      	cbz	r0, 8004290 <__cvt+0xa4>
 800428c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004290:	2230      	movs	r2, #48	; 0x30
 8004292:	9b03      	ldr	r3, [sp, #12]
 8004294:	454b      	cmp	r3, r9
 8004296:	d307      	bcc.n	80042a8 <__cvt+0xbc>
 8004298:	9b03      	ldr	r3, [sp, #12]
 800429a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800429c:	1bdb      	subs	r3, r3, r7
 800429e:	4638      	mov	r0, r7
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	b004      	add	sp, #16
 80042a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042a8:	1c59      	adds	r1, r3, #1
 80042aa:	9103      	str	r1, [sp, #12]
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	e7f0      	b.n	8004292 <__cvt+0xa6>

080042b0 <__exponent>:
 80042b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042b2:	4603      	mov	r3, r0
 80042b4:	2900      	cmp	r1, #0
 80042b6:	bfb8      	it	lt
 80042b8:	4249      	neglt	r1, r1
 80042ba:	f803 2b02 	strb.w	r2, [r3], #2
 80042be:	bfb4      	ite	lt
 80042c0:	222d      	movlt	r2, #45	; 0x2d
 80042c2:	222b      	movge	r2, #43	; 0x2b
 80042c4:	2909      	cmp	r1, #9
 80042c6:	7042      	strb	r2, [r0, #1]
 80042c8:	dd2a      	ble.n	8004320 <__exponent+0x70>
 80042ca:	f10d 0207 	add.w	r2, sp, #7
 80042ce:	4617      	mov	r7, r2
 80042d0:	260a      	movs	r6, #10
 80042d2:	4694      	mov	ip, r2
 80042d4:	fb91 f5f6 	sdiv	r5, r1, r6
 80042d8:	fb06 1415 	mls	r4, r6, r5, r1
 80042dc:	3430      	adds	r4, #48	; 0x30
 80042de:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80042e2:	460c      	mov	r4, r1
 80042e4:	2c63      	cmp	r4, #99	; 0x63
 80042e6:	f102 32ff 	add.w	r2, r2, #4294967295
 80042ea:	4629      	mov	r1, r5
 80042ec:	dcf1      	bgt.n	80042d2 <__exponent+0x22>
 80042ee:	3130      	adds	r1, #48	; 0x30
 80042f0:	f1ac 0402 	sub.w	r4, ip, #2
 80042f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80042f8:	1c41      	adds	r1, r0, #1
 80042fa:	4622      	mov	r2, r4
 80042fc:	42ba      	cmp	r2, r7
 80042fe:	d30a      	bcc.n	8004316 <__exponent+0x66>
 8004300:	f10d 0209 	add.w	r2, sp, #9
 8004304:	eba2 020c 	sub.w	r2, r2, ip
 8004308:	42bc      	cmp	r4, r7
 800430a:	bf88      	it	hi
 800430c:	2200      	movhi	r2, #0
 800430e:	4413      	add	r3, r2
 8004310:	1a18      	subs	r0, r3, r0
 8004312:	b003      	add	sp, #12
 8004314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004316:	f812 5b01 	ldrb.w	r5, [r2], #1
 800431a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800431e:	e7ed      	b.n	80042fc <__exponent+0x4c>
 8004320:	2330      	movs	r3, #48	; 0x30
 8004322:	3130      	adds	r1, #48	; 0x30
 8004324:	7083      	strb	r3, [r0, #2]
 8004326:	70c1      	strb	r1, [r0, #3]
 8004328:	1d03      	adds	r3, r0, #4
 800432a:	e7f1      	b.n	8004310 <__exponent+0x60>

0800432c <_printf_float>:
 800432c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004330:	ed2d 8b02 	vpush	{d8}
 8004334:	b08d      	sub	sp, #52	; 0x34
 8004336:	460c      	mov	r4, r1
 8004338:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800433c:	4616      	mov	r6, r2
 800433e:	461f      	mov	r7, r3
 8004340:	4605      	mov	r5, r0
 8004342:	f000 fcfb 	bl	8004d3c <_localeconv_r>
 8004346:	f8d0 a000 	ldr.w	sl, [r0]
 800434a:	4650      	mov	r0, sl
 800434c:	f7fb ff98 	bl	8000280 <strlen>
 8004350:	2300      	movs	r3, #0
 8004352:	930a      	str	r3, [sp, #40]	; 0x28
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	9305      	str	r3, [sp, #20]
 8004358:	f8d8 3000 	ldr.w	r3, [r8]
 800435c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004360:	3307      	adds	r3, #7
 8004362:	f023 0307 	bic.w	r3, r3, #7
 8004366:	f103 0208 	add.w	r2, r3, #8
 800436a:	f8c8 2000 	str.w	r2, [r8]
 800436e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004372:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004376:	9307      	str	r3, [sp, #28]
 8004378:	f8cd 8018 	str.w	r8, [sp, #24]
 800437c:	ee08 0a10 	vmov	s16, r0
 8004380:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004384:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004388:	4b9e      	ldr	r3, [pc, #632]	; (8004604 <_printf_float+0x2d8>)
 800438a:	f04f 32ff 	mov.w	r2, #4294967295
 800438e:	f7fc fbd5 	bl	8000b3c <__aeabi_dcmpun>
 8004392:	bb88      	cbnz	r0, 80043f8 <_printf_float+0xcc>
 8004394:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004398:	4b9a      	ldr	r3, [pc, #616]	; (8004604 <_printf_float+0x2d8>)
 800439a:	f04f 32ff 	mov.w	r2, #4294967295
 800439e:	f7fc fbaf 	bl	8000b00 <__aeabi_dcmple>
 80043a2:	bb48      	cbnz	r0, 80043f8 <_printf_float+0xcc>
 80043a4:	2200      	movs	r2, #0
 80043a6:	2300      	movs	r3, #0
 80043a8:	4640      	mov	r0, r8
 80043aa:	4649      	mov	r1, r9
 80043ac:	f7fc fb9e 	bl	8000aec <__aeabi_dcmplt>
 80043b0:	b110      	cbz	r0, 80043b8 <_printf_float+0x8c>
 80043b2:	232d      	movs	r3, #45	; 0x2d
 80043b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043b8:	4a93      	ldr	r2, [pc, #588]	; (8004608 <_printf_float+0x2dc>)
 80043ba:	4b94      	ldr	r3, [pc, #592]	; (800460c <_printf_float+0x2e0>)
 80043bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80043c0:	bf94      	ite	ls
 80043c2:	4690      	movls	r8, r2
 80043c4:	4698      	movhi	r8, r3
 80043c6:	2303      	movs	r3, #3
 80043c8:	6123      	str	r3, [r4, #16]
 80043ca:	9b05      	ldr	r3, [sp, #20]
 80043cc:	f023 0304 	bic.w	r3, r3, #4
 80043d0:	6023      	str	r3, [r4, #0]
 80043d2:	f04f 0900 	mov.w	r9, #0
 80043d6:	9700      	str	r7, [sp, #0]
 80043d8:	4633      	mov	r3, r6
 80043da:	aa0b      	add	r2, sp, #44	; 0x2c
 80043dc:	4621      	mov	r1, r4
 80043de:	4628      	mov	r0, r5
 80043e0:	f000 f9da 	bl	8004798 <_printf_common>
 80043e4:	3001      	adds	r0, #1
 80043e6:	f040 8090 	bne.w	800450a <_printf_float+0x1de>
 80043ea:	f04f 30ff 	mov.w	r0, #4294967295
 80043ee:	b00d      	add	sp, #52	; 0x34
 80043f0:	ecbd 8b02 	vpop	{d8}
 80043f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043f8:	4642      	mov	r2, r8
 80043fa:	464b      	mov	r3, r9
 80043fc:	4640      	mov	r0, r8
 80043fe:	4649      	mov	r1, r9
 8004400:	f7fc fb9c 	bl	8000b3c <__aeabi_dcmpun>
 8004404:	b140      	cbz	r0, 8004418 <_printf_float+0xec>
 8004406:	464b      	mov	r3, r9
 8004408:	2b00      	cmp	r3, #0
 800440a:	bfbc      	itt	lt
 800440c:	232d      	movlt	r3, #45	; 0x2d
 800440e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004412:	4a7f      	ldr	r2, [pc, #508]	; (8004610 <_printf_float+0x2e4>)
 8004414:	4b7f      	ldr	r3, [pc, #508]	; (8004614 <_printf_float+0x2e8>)
 8004416:	e7d1      	b.n	80043bc <_printf_float+0x90>
 8004418:	6863      	ldr	r3, [r4, #4]
 800441a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800441e:	9206      	str	r2, [sp, #24]
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	d13f      	bne.n	80044a4 <_printf_float+0x178>
 8004424:	2306      	movs	r3, #6
 8004426:	6063      	str	r3, [r4, #4]
 8004428:	9b05      	ldr	r3, [sp, #20]
 800442a:	6861      	ldr	r1, [r4, #4]
 800442c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004430:	2300      	movs	r3, #0
 8004432:	9303      	str	r3, [sp, #12]
 8004434:	ab0a      	add	r3, sp, #40	; 0x28
 8004436:	e9cd b301 	strd	fp, r3, [sp, #4]
 800443a:	ab09      	add	r3, sp, #36	; 0x24
 800443c:	ec49 8b10 	vmov	d0, r8, r9
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	6022      	str	r2, [r4, #0]
 8004444:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004448:	4628      	mov	r0, r5
 800444a:	f7ff fecf 	bl	80041ec <__cvt>
 800444e:	9b06      	ldr	r3, [sp, #24]
 8004450:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004452:	2b47      	cmp	r3, #71	; 0x47
 8004454:	4680      	mov	r8, r0
 8004456:	d108      	bne.n	800446a <_printf_float+0x13e>
 8004458:	1cc8      	adds	r0, r1, #3
 800445a:	db02      	blt.n	8004462 <_printf_float+0x136>
 800445c:	6863      	ldr	r3, [r4, #4]
 800445e:	4299      	cmp	r1, r3
 8004460:	dd41      	ble.n	80044e6 <_printf_float+0x1ba>
 8004462:	f1ab 0302 	sub.w	r3, fp, #2
 8004466:	fa5f fb83 	uxtb.w	fp, r3
 800446a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800446e:	d820      	bhi.n	80044b2 <_printf_float+0x186>
 8004470:	3901      	subs	r1, #1
 8004472:	465a      	mov	r2, fp
 8004474:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004478:	9109      	str	r1, [sp, #36]	; 0x24
 800447a:	f7ff ff19 	bl	80042b0 <__exponent>
 800447e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004480:	1813      	adds	r3, r2, r0
 8004482:	2a01      	cmp	r2, #1
 8004484:	4681      	mov	r9, r0
 8004486:	6123      	str	r3, [r4, #16]
 8004488:	dc02      	bgt.n	8004490 <_printf_float+0x164>
 800448a:	6822      	ldr	r2, [r4, #0]
 800448c:	07d2      	lsls	r2, r2, #31
 800448e:	d501      	bpl.n	8004494 <_printf_float+0x168>
 8004490:	3301      	adds	r3, #1
 8004492:	6123      	str	r3, [r4, #16]
 8004494:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004498:	2b00      	cmp	r3, #0
 800449a:	d09c      	beq.n	80043d6 <_printf_float+0xaa>
 800449c:	232d      	movs	r3, #45	; 0x2d
 800449e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044a2:	e798      	b.n	80043d6 <_printf_float+0xaa>
 80044a4:	9a06      	ldr	r2, [sp, #24]
 80044a6:	2a47      	cmp	r2, #71	; 0x47
 80044a8:	d1be      	bne.n	8004428 <_printf_float+0xfc>
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1bc      	bne.n	8004428 <_printf_float+0xfc>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e7b9      	b.n	8004426 <_printf_float+0xfa>
 80044b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80044b6:	d118      	bne.n	80044ea <_printf_float+0x1be>
 80044b8:	2900      	cmp	r1, #0
 80044ba:	6863      	ldr	r3, [r4, #4]
 80044bc:	dd0b      	ble.n	80044d6 <_printf_float+0x1aa>
 80044be:	6121      	str	r1, [r4, #16]
 80044c0:	b913      	cbnz	r3, 80044c8 <_printf_float+0x19c>
 80044c2:	6822      	ldr	r2, [r4, #0]
 80044c4:	07d0      	lsls	r0, r2, #31
 80044c6:	d502      	bpl.n	80044ce <_printf_float+0x1a2>
 80044c8:	3301      	adds	r3, #1
 80044ca:	440b      	add	r3, r1
 80044cc:	6123      	str	r3, [r4, #16]
 80044ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80044d0:	f04f 0900 	mov.w	r9, #0
 80044d4:	e7de      	b.n	8004494 <_printf_float+0x168>
 80044d6:	b913      	cbnz	r3, 80044de <_printf_float+0x1b2>
 80044d8:	6822      	ldr	r2, [r4, #0]
 80044da:	07d2      	lsls	r2, r2, #31
 80044dc:	d501      	bpl.n	80044e2 <_printf_float+0x1b6>
 80044de:	3302      	adds	r3, #2
 80044e0:	e7f4      	b.n	80044cc <_printf_float+0x1a0>
 80044e2:	2301      	movs	r3, #1
 80044e4:	e7f2      	b.n	80044cc <_printf_float+0x1a0>
 80044e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80044ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044ec:	4299      	cmp	r1, r3
 80044ee:	db05      	blt.n	80044fc <_printf_float+0x1d0>
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	6121      	str	r1, [r4, #16]
 80044f4:	07d8      	lsls	r0, r3, #31
 80044f6:	d5ea      	bpl.n	80044ce <_printf_float+0x1a2>
 80044f8:	1c4b      	adds	r3, r1, #1
 80044fa:	e7e7      	b.n	80044cc <_printf_float+0x1a0>
 80044fc:	2900      	cmp	r1, #0
 80044fe:	bfd4      	ite	le
 8004500:	f1c1 0202 	rsble	r2, r1, #2
 8004504:	2201      	movgt	r2, #1
 8004506:	4413      	add	r3, r2
 8004508:	e7e0      	b.n	80044cc <_printf_float+0x1a0>
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	055a      	lsls	r2, r3, #21
 800450e:	d407      	bmi.n	8004520 <_printf_float+0x1f4>
 8004510:	6923      	ldr	r3, [r4, #16]
 8004512:	4642      	mov	r2, r8
 8004514:	4631      	mov	r1, r6
 8004516:	4628      	mov	r0, r5
 8004518:	47b8      	blx	r7
 800451a:	3001      	adds	r0, #1
 800451c:	d12c      	bne.n	8004578 <_printf_float+0x24c>
 800451e:	e764      	b.n	80043ea <_printf_float+0xbe>
 8004520:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004524:	f240 80e0 	bls.w	80046e8 <_printf_float+0x3bc>
 8004528:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800452c:	2200      	movs	r2, #0
 800452e:	2300      	movs	r3, #0
 8004530:	f7fc fad2 	bl	8000ad8 <__aeabi_dcmpeq>
 8004534:	2800      	cmp	r0, #0
 8004536:	d034      	beq.n	80045a2 <_printf_float+0x276>
 8004538:	4a37      	ldr	r2, [pc, #220]	; (8004618 <_printf_float+0x2ec>)
 800453a:	2301      	movs	r3, #1
 800453c:	4631      	mov	r1, r6
 800453e:	4628      	mov	r0, r5
 8004540:	47b8      	blx	r7
 8004542:	3001      	adds	r0, #1
 8004544:	f43f af51 	beq.w	80043ea <_printf_float+0xbe>
 8004548:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800454c:	429a      	cmp	r2, r3
 800454e:	db02      	blt.n	8004556 <_printf_float+0x22a>
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	07d8      	lsls	r0, r3, #31
 8004554:	d510      	bpl.n	8004578 <_printf_float+0x24c>
 8004556:	ee18 3a10 	vmov	r3, s16
 800455a:	4652      	mov	r2, sl
 800455c:	4631      	mov	r1, r6
 800455e:	4628      	mov	r0, r5
 8004560:	47b8      	blx	r7
 8004562:	3001      	adds	r0, #1
 8004564:	f43f af41 	beq.w	80043ea <_printf_float+0xbe>
 8004568:	f04f 0800 	mov.w	r8, #0
 800456c:	f104 091a 	add.w	r9, r4, #26
 8004570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004572:	3b01      	subs	r3, #1
 8004574:	4543      	cmp	r3, r8
 8004576:	dc09      	bgt.n	800458c <_printf_float+0x260>
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	079b      	lsls	r3, r3, #30
 800457c:	f100 8107 	bmi.w	800478e <_printf_float+0x462>
 8004580:	68e0      	ldr	r0, [r4, #12]
 8004582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004584:	4298      	cmp	r0, r3
 8004586:	bfb8      	it	lt
 8004588:	4618      	movlt	r0, r3
 800458a:	e730      	b.n	80043ee <_printf_float+0xc2>
 800458c:	2301      	movs	r3, #1
 800458e:	464a      	mov	r2, r9
 8004590:	4631      	mov	r1, r6
 8004592:	4628      	mov	r0, r5
 8004594:	47b8      	blx	r7
 8004596:	3001      	adds	r0, #1
 8004598:	f43f af27 	beq.w	80043ea <_printf_float+0xbe>
 800459c:	f108 0801 	add.w	r8, r8, #1
 80045a0:	e7e6      	b.n	8004570 <_printf_float+0x244>
 80045a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	dc39      	bgt.n	800461c <_printf_float+0x2f0>
 80045a8:	4a1b      	ldr	r2, [pc, #108]	; (8004618 <_printf_float+0x2ec>)
 80045aa:	2301      	movs	r3, #1
 80045ac:	4631      	mov	r1, r6
 80045ae:	4628      	mov	r0, r5
 80045b0:	47b8      	blx	r7
 80045b2:	3001      	adds	r0, #1
 80045b4:	f43f af19 	beq.w	80043ea <_printf_float+0xbe>
 80045b8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80045bc:	4313      	orrs	r3, r2
 80045be:	d102      	bne.n	80045c6 <_printf_float+0x29a>
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	07d9      	lsls	r1, r3, #31
 80045c4:	d5d8      	bpl.n	8004578 <_printf_float+0x24c>
 80045c6:	ee18 3a10 	vmov	r3, s16
 80045ca:	4652      	mov	r2, sl
 80045cc:	4631      	mov	r1, r6
 80045ce:	4628      	mov	r0, r5
 80045d0:	47b8      	blx	r7
 80045d2:	3001      	adds	r0, #1
 80045d4:	f43f af09 	beq.w	80043ea <_printf_float+0xbe>
 80045d8:	f04f 0900 	mov.w	r9, #0
 80045dc:	f104 0a1a 	add.w	sl, r4, #26
 80045e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045e2:	425b      	negs	r3, r3
 80045e4:	454b      	cmp	r3, r9
 80045e6:	dc01      	bgt.n	80045ec <_printf_float+0x2c0>
 80045e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045ea:	e792      	b.n	8004512 <_printf_float+0x1e6>
 80045ec:	2301      	movs	r3, #1
 80045ee:	4652      	mov	r2, sl
 80045f0:	4631      	mov	r1, r6
 80045f2:	4628      	mov	r0, r5
 80045f4:	47b8      	blx	r7
 80045f6:	3001      	adds	r0, #1
 80045f8:	f43f aef7 	beq.w	80043ea <_printf_float+0xbe>
 80045fc:	f109 0901 	add.w	r9, r9, #1
 8004600:	e7ee      	b.n	80045e0 <_printf_float+0x2b4>
 8004602:	bf00      	nop
 8004604:	7fefffff 	.word	0x7fefffff
 8004608:	0800708c 	.word	0x0800708c
 800460c:	08007090 	.word	0x08007090
 8004610:	08007094 	.word	0x08007094
 8004614:	08007098 	.word	0x08007098
 8004618:	0800709c 	.word	0x0800709c
 800461c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800461e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004620:	429a      	cmp	r2, r3
 8004622:	bfa8      	it	ge
 8004624:	461a      	movge	r2, r3
 8004626:	2a00      	cmp	r2, #0
 8004628:	4691      	mov	r9, r2
 800462a:	dc37      	bgt.n	800469c <_printf_float+0x370>
 800462c:	f04f 0b00 	mov.w	fp, #0
 8004630:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004634:	f104 021a 	add.w	r2, r4, #26
 8004638:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800463a:	9305      	str	r3, [sp, #20]
 800463c:	eba3 0309 	sub.w	r3, r3, r9
 8004640:	455b      	cmp	r3, fp
 8004642:	dc33      	bgt.n	80046ac <_printf_float+0x380>
 8004644:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004648:	429a      	cmp	r2, r3
 800464a:	db3b      	blt.n	80046c4 <_printf_float+0x398>
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	07da      	lsls	r2, r3, #31
 8004650:	d438      	bmi.n	80046c4 <_printf_float+0x398>
 8004652:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004656:	eba2 0903 	sub.w	r9, r2, r3
 800465a:	9b05      	ldr	r3, [sp, #20]
 800465c:	1ad2      	subs	r2, r2, r3
 800465e:	4591      	cmp	r9, r2
 8004660:	bfa8      	it	ge
 8004662:	4691      	movge	r9, r2
 8004664:	f1b9 0f00 	cmp.w	r9, #0
 8004668:	dc35      	bgt.n	80046d6 <_printf_float+0x3aa>
 800466a:	f04f 0800 	mov.w	r8, #0
 800466e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004672:	f104 0a1a 	add.w	sl, r4, #26
 8004676:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	eba3 0309 	sub.w	r3, r3, r9
 8004680:	4543      	cmp	r3, r8
 8004682:	f77f af79 	ble.w	8004578 <_printf_float+0x24c>
 8004686:	2301      	movs	r3, #1
 8004688:	4652      	mov	r2, sl
 800468a:	4631      	mov	r1, r6
 800468c:	4628      	mov	r0, r5
 800468e:	47b8      	blx	r7
 8004690:	3001      	adds	r0, #1
 8004692:	f43f aeaa 	beq.w	80043ea <_printf_float+0xbe>
 8004696:	f108 0801 	add.w	r8, r8, #1
 800469a:	e7ec      	b.n	8004676 <_printf_float+0x34a>
 800469c:	4613      	mov	r3, r2
 800469e:	4631      	mov	r1, r6
 80046a0:	4642      	mov	r2, r8
 80046a2:	4628      	mov	r0, r5
 80046a4:	47b8      	blx	r7
 80046a6:	3001      	adds	r0, #1
 80046a8:	d1c0      	bne.n	800462c <_printf_float+0x300>
 80046aa:	e69e      	b.n	80043ea <_printf_float+0xbe>
 80046ac:	2301      	movs	r3, #1
 80046ae:	4631      	mov	r1, r6
 80046b0:	4628      	mov	r0, r5
 80046b2:	9205      	str	r2, [sp, #20]
 80046b4:	47b8      	blx	r7
 80046b6:	3001      	adds	r0, #1
 80046b8:	f43f ae97 	beq.w	80043ea <_printf_float+0xbe>
 80046bc:	9a05      	ldr	r2, [sp, #20]
 80046be:	f10b 0b01 	add.w	fp, fp, #1
 80046c2:	e7b9      	b.n	8004638 <_printf_float+0x30c>
 80046c4:	ee18 3a10 	vmov	r3, s16
 80046c8:	4652      	mov	r2, sl
 80046ca:	4631      	mov	r1, r6
 80046cc:	4628      	mov	r0, r5
 80046ce:	47b8      	blx	r7
 80046d0:	3001      	adds	r0, #1
 80046d2:	d1be      	bne.n	8004652 <_printf_float+0x326>
 80046d4:	e689      	b.n	80043ea <_printf_float+0xbe>
 80046d6:	9a05      	ldr	r2, [sp, #20]
 80046d8:	464b      	mov	r3, r9
 80046da:	4442      	add	r2, r8
 80046dc:	4631      	mov	r1, r6
 80046de:	4628      	mov	r0, r5
 80046e0:	47b8      	blx	r7
 80046e2:	3001      	adds	r0, #1
 80046e4:	d1c1      	bne.n	800466a <_printf_float+0x33e>
 80046e6:	e680      	b.n	80043ea <_printf_float+0xbe>
 80046e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046ea:	2a01      	cmp	r2, #1
 80046ec:	dc01      	bgt.n	80046f2 <_printf_float+0x3c6>
 80046ee:	07db      	lsls	r3, r3, #31
 80046f0:	d53a      	bpl.n	8004768 <_printf_float+0x43c>
 80046f2:	2301      	movs	r3, #1
 80046f4:	4642      	mov	r2, r8
 80046f6:	4631      	mov	r1, r6
 80046f8:	4628      	mov	r0, r5
 80046fa:	47b8      	blx	r7
 80046fc:	3001      	adds	r0, #1
 80046fe:	f43f ae74 	beq.w	80043ea <_printf_float+0xbe>
 8004702:	ee18 3a10 	vmov	r3, s16
 8004706:	4652      	mov	r2, sl
 8004708:	4631      	mov	r1, r6
 800470a:	4628      	mov	r0, r5
 800470c:	47b8      	blx	r7
 800470e:	3001      	adds	r0, #1
 8004710:	f43f ae6b 	beq.w	80043ea <_printf_float+0xbe>
 8004714:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004718:	2200      	movs	r2, #0
 800471a:	2300      	movs	r3, #0
 800471c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004720:	f7fc f9da 	bl	8000ad8 <__aeabi_dcmpeq>
 8004724:	b9d8      	cbnz	r0, 800475e <_printf_float+0x432>
 8004726:	f10a 33ff 	add.w	r3, sl, #4294967295
 800472a:	f108 0201 	add.w	r2, r8, #1
 800472e:	4631      	mov	r1, r6
 8004730:	4628      	mov	r0, r5
 8004732:	47b8      	blx	r7
 8004734:	3001      	adds	r0, #1
 8004736:	d10e      	bne.n	8004756 <_printf_float+0x42a>
 8004738:	e657      	b.n	80043ea <_printf_float+0xbe>
 800473a:	2301      	movs	r3, #1
 800473c:	4652      	mov	r2, sl
 800473e:	4631      	mov	r1, r6
 8004740:	4628      	mov	r0, r5
 8004742:	47b8      	blx	r7
 8004744:	3001      	adds	r0, #1
 8004746:	f43f ae50 	beq.w	80043ea <_printf_float+0xbe>
 800474a:	f108 0801 	add.w	r8, r8, #1
 800474e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004750:	3b01      	subs	r3, #1
 8004752:	4543      	cmp	r3, r8
 8004754:	dcf1      	bgt.n	800473a <_printf_float+0x40e>
 8004756:	464b      	mov	r3, r9
 8004758:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800475c:	e6da      	b.n	8004514 <_printf_float+0x1e8>
 800475e:	f04f 0800 	mov.w	r8, #0
 8004762:	f104 0a1a 	add.w	sl, r4, #26
 8004766:	e7f2      	b.n	800474e <_printf_float+0x422>
 8004768:	2301      	movs	r3, #1
 800476a:	4642      	mov	r2, r8
 800476c:	e7df      	b.n	800472e <_printf_float+0x402>
 800476e:	2301      	movs	r3, #1
 8004770:	464a      	mov	r2, r9
 8004772:	4631      	mov	r1, r6
 8004774:	4628      	mov	r0, r5
 8004776:	47b8      	blx	r7
 8004778:	3001      	adds	r0, #1
 800477a:	f43f ae36 	beq.w	80043ea <_printf_float+0xbe>
 800477e:	f108 0801 	add.w	r8, r8, #1
 8004782:	68e3      	ldr	r3, [r4, #12]
 8004784:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004786:	1a5b      	subs	r3, r3, r1
 8004788:	4543      	cmp	r3, r8
 800478a:	dcf0      	bgt.n	800476e <_printf_float+0x442>
 800478c:	e6f8      	b.n	8004580 <_printf_float+0x254>
 800478e:	f04f 0800 	mov.w	r8, #0
 8004792:	f104 0919 	add.w	r9, r4, #25
 8004796:	e7f4      	b.n	8004782 <_printf_float+0x456>

08004798 <_printf_common>:
 8004798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800479c:	4616      	mov	r6, r2
 800479e:	4699      	mov	r9, r3
 80047a0:	688a      	ldr	r2, [r1, #8]
 80047a2:	690b      	ldr	r3, [r1, #16]
 80047a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047a8:	4293      	cmp	r3, r2
 80047aa:	bfb8      	it	lt
 80047ac:	4613      	movlt	r3, r2
 80047ae:	6033      	str	r3, [r6, #0]
 80047b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047b4:	4607      	mov	r7, r0
 80047b6:	460c      	mov	r4, r1
 80047b8:	b10a      	cbz	r2, 80047be <_printf_common+0x26>
 80047ba:	3301      	adds	r3, #1
 80047bc:	6033      	str	r3, [r6, #0]
 80047be:	6823      	ldr	r3, [r4, #0]
 80047c0:	0699      	lsls	r1, r3, #26
 80047c2:	bf42      	ittt	mi
 80047c4:	6833      	ldrmi	r3, [r6, #0]
 80047c6:	3302      	addmi	r3, #2
 80047c8:	6033      	strmi	r3, [r6, #0]
 80047ca:	6825      	ldr	r5, [r4, #0]
 80047cc:	f015 0506 	ands.w	r5, r5, #6
 80047d0:	d106      	bne.n	80047e0 <_printf_common+0x48>
 80047d2:	f104 0a19 	add.w	sl, r4, #25
 80047d6:	68e3      	ldr	r3, [r4, #12]
 80047d8:	6832      	ldr	r2, [r6, #0]
 80047da:	1a9b      	subs	r3, r3, r2
 80047dc:	42ab      	cmp	r3, r5
 80047de:	dc26      	bgt.n	800482e <_printf_common+0x96>
 80047e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047e4:	1e13      	subs	r3, r2, #0
 80047e6:	6822      	ldr	r2, [r4, #0]
 80047e8:	bf18      	it	ne
 80047ea:	2301      	movne	r3, #1
 80047ec:	0692      	lsls	r2, r2, #26
 80047ee:	d42b      	bmi.n	8004848 <_printf_common+0xb0>
 80047f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047f4:	4649      	mov	r1, r9
 80047f6:	4638      	mov	r0, r7
 80047f8:	47c0      	blx	r8
 80047fa:	3001      	adds	r0, #1
 80047fc:	d01e      	beq.n	800483c <_printf_common+0xa4>
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	6922      	ldr	r2, [r4, #16]
 8004802:	f003 0306 	and.w	r3, r3, #6
 8004806:	2b04      	cmp	r3, #4
 8004808:	bf02      	ittt	eq
 800480a:	68e5      	ldreq	r5, [r4, #12]
 800480c:	6833      	ldreq	r3, [r6, #0]
 800480e:	1aed      	subeq	r5, r5, r3
 8004810:	68a3      	ldr	r3, [r4, #8]
 8004812:	bf0c      	ite	eq
 8004814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004818:	2500      	movne	r5, #0
 800481a:	4293      	cmp	r3, r2
 800481c:	bfc4      	itt	gt
 800481e:	1a9b      	subgt	r3, r3, r2
 8004820:	18ed      	addgt	r5, r5, r3
 8004822:	2600      	movs	r6, #0
 8004824:	341a      	adds	r4, #26
 8004826:	42b5      	cmp	r5, r6
 8004828:	d11a      	bne.n	8004860 <_printf_common+0xc8>
 800482a:	2000      	movs	r0, #0
 800482c:	e008      	b.n	8004840 <_printf_common+0xa8>
 800482e:	2301      	movs	r3, #1
 8004830:	4652      	mov	r2, sl
 8004832:	4649      	mov	r1, r9
 8004834:	4638      	mov	r0, r7
 8004836:	47c0      	blx	r8
 8004838:	3001      	adds	r0, #1
 800483a:	d103      	bne.n	8004844 <_printf_common+0xac>
 800483c:	f04f 30ff 	mov.w	r0, #4294967295
 8004840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004844:	3501      	adds	r5, #1
 8004846:	e7c6      	b.n	80047d6 <_printf_common+0x3e>
 8004848:	18e1      	adds	r1, r4, r3
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	2030      	movs	r0, #48	; 0x30
 800484e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004852:	4422      	add	r2, r4
 8004854:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004858:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800485c:	3302      	adds	r3, #2
 800485e:	e7c7      	b.n	80047f0 <_printf_common+0x58>
 8004860:	2301      	movs	r3, #1
 8004862:	4622      	mov	r2, r4
 8004864:	4649      	mov	r1, r9
 8004866:	4638      	mov	r0, r7
 8004868:	47c0      	blx	r8
 800486a:	3001      	adds	r0, #1
 800486c:	d0e6      	beq.n	800483c <_printf_common+0xa4>
 800486e:	3601      	adds	r6, #1
 8004870:	e7d9      	b.n	8004826 <_printf_common+0x8e>
	...

08004874 <_printf_i>:
 8004874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004878:	7e0f      	ldrb	r7, [r1, #24]
 800487a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800487c:	2f78      	cmp	r7, #120	; 0x78
 800487e:	4691      	mov	r9, r2
 8004880:	4680      	mov	r8, r0
 8004882:	460c      	mov	r4, r1
 8004884:	469a      	mov	sl, r3
 8004886:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800488a:	d807      	bhi.n	800489c <_printf_i+0x28>
 800488c:	2f62      	cmp	r7, #98	; 0x62
 800488e:	d80a      	bhi.n	80048a6 <_printf_i+0x32>
 8004890:	2f00      	cmp	r7, #0
 8004892:	f000 80d4 	beq.w	8004a3e <_printf_i+0x1ca>
 8004896:	2f58      	cmp	r7, #88	; 0x58
 8004898:	f000 80c0 	beq.w	8004a1c <_printf_i+0x1a8>
 800489c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048a4:	e03a      	b.n	800491c <_printf_i+0xa8>
 80048a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048aa:	2b15      	cmp	r3, #21
 80048ac:	d8f6      	bhi.n	800489c <_printf_i+0x28>
 80048ae:	a101      	add	r1, pc, #4	; (adr r1, 80048b4 <_printf_i+0x40>)
 80048b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048b4:	0800490d 	.word	0x0800490d
 80048b8:	08004921 	.word	0x08004921
 80048bc:	0800489d 	.word	0x0800489d
 80048c0:	0800489d 	.word	0x0800489d
 80048c4:	0800489d 	.word	0x0800489d
 80048c8:	0800489d 	.word	0x0800489d
 80048cc:	08004921 	.word	0x08004921
 80048d0:	0800489d 	.word	0x0800489d
 80048d4:	0800489d 	.word	0x0800489d
 80048d8:	0800489d 	.word	0x0800489d
 80048dc:	0800489d 	.word	0x0800489d
 80048e0:	08004a25 	.word	0x08004a25
 80048e4:	0800494d 	.word	0x0800494d
 80048e8:	080049df 	.word	0x080049df
 80048ec:	0800489d 	.word	0x0800489d
 80048f0:	0800489d 	.word	0x0800489d
 80048f4:	08004a47 	.word	0x08004a47
 80048f8:	0800489d 	.word	0x0800489d
 80048fc:	0800494d 	.word	0x0800494d
 8004900:	0800489d 	.word	0x0800489d
 8004904:	0800489d 	.word	0x0800489d
 8004908:	080049e7 	.word	0x080049e7
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	1d1a      	adds	r2, r3, #4
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	602a      	str	r2, [r5, #0]
 8004914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800491c:	2301      	movs	r3, #1
 800491e:	e09f      	b.n	8004a60 <_printf_i+0x1ec>
 8004920:	6820      	ldr	r0, [r4, #0]
 8004922:	682b      	ldr	r3, [r5, #0]
 8004924:	0607      	lsls	r7, r0, #24
 8004926:	f103 0104 	add.w	r1, r3, #4
 800492a:	6029      	str	r1, [r5, #0]
 800492c:	d501      	bpl.n	8004932 <_printf_i+0xbe>
 800492e:	681e      	ldr	r6, [r3, #0]
 8004930:	e003      	b.n	800493a <_printf_i+0xc6>
 8004932:	0646      	lsls	r6, r0, #25
 8004934:	d5fb      	bpl.n	800492e <_printf_i+0xba>
 8004936:	f9b3 6000 	ldrsh.w	r6, [r3]
 800493a:	2e00      	cmp	r6, #0
 800493c:	da03      	bge.n	8004946 <_printf_i+0xd2>
 800493e:	232d      	movs	r3, #45	; 0x2d
 8004940:	4276      	negs	r6, r6
 8004942:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004946:	485a      	ldr	r0, [pc, #360]	; (8004ab0 <_printf_i+0x23c>)
 8004948:	230a      	movs	r3, #10
 800494a:	e012      	b.n	8004972 <_printf_i+0xfe>
 800494c:	682b      	ldr	r3, [r5, #0]
 800494e:	6820      	ldr	r0, [r4, #0]
 8004950:	1d19      	adds	r1, r3, #4
 8004952:	6029      	str	r1, [r5, #0]
 8004954:	0605      	lsls	r5, r0, #24
 8004956:	d501      	bpl.n	800495c <_printf_i+0xe8>
 8004958:	681e      	ldr	r6, [r3, #0]
 800495a:	e002      	b.n	8004962 <_printf_i+0xee>
 800495c:	0641      	lsls	r1, r0, #25
 800495e:	d5fb      	bpl.n	8004958 <_printf_i+0xe4>
 8004960:	881e      	ldrh	r6, [r3, #0]
 8004962:	4853      	ldr	r0, [pc, #332]	; (8004ab0 <_printf_i+0x23c>)
 8004964:	2f6f      	cmp	r7, #111	; 0x6f
 8004966:	bf0c      	ite	eq
 8004968:	2308      	moveq	r3, #8
 800496a:	230a      	movne	r3, #10
 800496c:	2100      	movs	r1, #0
 800496e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004972:	6865      	ldr	r5, [r4, #4]
 8004974:	60a5      	str	r5, [r4, #8]
 8004976:	2d00      	cmp	r5, #0
 8004978:	bfa2      	ittt	ge
 800497a:	6821      	ldrge	r1, [r4, #0]
 800497c:	f021 0104 	bicge.w	r1, r1, #4
 8004980:	6021      	strge	r1, [r4, #0]
 8004982:	b90e      	cbnz	r6, 8004988 <_printf_i+0x114>
 8004984:	2d00      	cmp	r5, #0
 8004986:	d04b      	beq.n	8004a20 <_printf_i+0x1ac>
 8004988:	4615      	mov	r5, r2
 800498a:	fbb6 f1f3 	udiv	r1, r6, r3
 800498e:	fb03 6711 	mls	r7, r3, r1, r6
 8004992:	5dc7      	ldrb	r7, [r0, r7]
 8004994:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004998:	4637      	mov	r7, r6
 800499a:	42bb      	cmp	r3, r7
 800499c:	460e      	mov	r6, r1
 800499e:	d9f4      	bls.n	800498a <_printf_i+0x116>
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d10b      	bne.n	80049bc <_printf_i+0x148>
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	07de      	lsls	r6, r3, #31
 80049a8:	d508      	bpl.n	80049bc <_printf_i+0x148>
 80049aa:	6923      	ldr	r3, [r4, #16]
 80049ac:	6861      	ldr	r1, [r4, #4]
 80049ae:	4299      	cmp	r1, r3
 80049b0:	bfde      	ittt	le
 80049b2:	2330      	movle	r3, #48	; 0x30
 80049b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049bc:	1b52      	subs	r2, r2, r5
 80049be:	6122      	str	r2, [r4, #16]
 80049c0:	f8cd a000 	str.w	sl, [sp]
 80049c4:	464b      	mov	r3, r9
 80049c6:	aa03      	add	r2, sp, #12
 80049c8:	4621      	mov	r1, r4
 80049ca:	4640      	mov	r0, r8
 80049cc:	f7ff fee4 	bl	8004798 <_printf_common>
 80049d0:	3001      	adds	r0, #1
 80049d2:	d14a      	bne.n	8004a6a <_printf_i+0x1f6>
 80049d4:	f04f 30ff 	mov.w	r0, #4294967295
 80049d8:	b004      	add	sp, #16
 80049da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	f043 0320 	orr.w	r3, r3, #32
 80049e4:	6023      	str	r3, [r4, #0]
 80049e6:	4833      	ldr	r0, [pc, #204]	; (8004ab4 <_printf_i+0x240>)
 80049e8:	2778      	movs	r7, #120	; 0x78
 80049ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	6829      	ldr	r1, [r5, #0]
 80049f2:	061f      	lsls	r7, r3, #24
 80049f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80049f8:	d402      	bmi.n	8004a00 <_printf_i+0x18c>
 80049fa:	065f      	lsls	r7, r3, #25
 80049fc:	bf48      	it	mi
 80049fe:	b2b6      	uxthmi	r6, r6
 8004a00:	07df      	lsls	r7, r3, #31
 8004a02:	bf48      	it	mi
 8004a04:	f043 0320 	orrmi.w	r3, r3, #32
 8004a08:	6029      	str	r1, [r5, #0]
 8004a0a:	bf48      	it	mi
 8004a0c:	6023      	strmi	r3, [r4, #0]
 8004a0e:	b91e      	cbnz	r6, 8004a18 <_printf_i+0x1a4>
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	f023 0320 	bic.w	r3, r3, #32
 8004a16:	6023      	str	r3, [r4, #0]
 8004a18:	2310      	movs	r3, #16
 8004a1a:	e7a7      	b.n	800496c <_printf_i+0xf8>
 8004a1c:	4824      	ldr	r0, [pc, #144]	; (8004ab0 <_printf_i+0x23c>)
 8004a1e:	e7e4      	b.n	80049ea <_printf_i+0x176>
 8004a20:	4615      	mov	r5, r2
 8004a22:	e7bd      	b.n	80049a0 <_printf_i+0x12c>
 8004a24:	682b      	ldr	r3, [r5, #0]
 8004a26:	6826      	ldr	r6, [r4, #0]
 8004a28:	6961      	ldr	r1, [r4, #20]
 8004a2a:	1d18      	adds	r0, r3, #4
 8004a2c:	6028      	str	r0, [r5, #0]
 8004a2e:	0635      	lsls	r5, r6, #24
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	d501      	bpl.n	8004a38 <_printf_i+0x1c4>
 8004a34:	6019      	str	r1, [r3, #0]
 8004a36:	e002      	b.n	8004a3e <_printf_i+0x1ca>
 8004a38:	0670      	lsls	r0, r6, #25
 8004a3a:	d5fb      	bpl.n	8004a34 <_printf_i+0x1c0>
 8004a3c:	8019      	strh	r1, [r3, #0]
 8004a3e:	2300      	movs	r3, #0
 8004a40:	6123      	str	r3, [r4, #16]
 8004a42:	4615      	mov	r5, r2
 8004a44:	e7bc      	b.n	80049c0 <_printf_i+0x14c>
 8004a46:	682b      	ldr	r3, [r5, #0]
 8004a48:	1d1a      	adds	r2, r3, #4
 8004a4a:	602a      	str	r2, [r5, #0]
 8004a4c:	681d      	ldr	r5, [r3, #0]
 8004a4e:	6862      	ldr	r2, [r4, #4]
 8004a50:	2100      	movs	r1, #0
 8004a52:	4628      	mov	r0, r5
 8004a54:	f7fb fbc4 	bl	80001e0 <memchr>
 8004a58:	b108      	cbz	r0, 8004a5e <_printf_i+0x1ea>
 8004a5a:	1b40      	subs	r0, r0, r5
 8004a5c:	6060      	str	r0, [r4, #4]
 8004a5e:	6863      	ldr	r3, [r4, #4]
 8004a60:	6123      	str	r3, [r4, #16]
 8004a62:	2300      	movs	r3, #0
 8004a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a68:	e7aa      	b.n	80049c0 <_printf_i+0x14c>
 8004a6a:	6923      	ldr	r3, [r4, #16]
 8004a6c:	462a      	mov	r2, r5
 8004a6e:	4649      	mov	r1, r9
 8004a70:	4640      	mov	r0, r8
 8004a72:	47d0      	blx	sl
 8004a74:	3001      	adds	r0, #1
 8004a76:	d0ad      	beq.n	80049d4 <_printf_i+0x160>
 8004a78:	6823      	ldr	r3, [r4, #0]
 8004a7a:	079b      	lsls	r3, r3, #30
 8004a7c:	d413      	bmi.n	8004aa6 <_printf_i+0x232>
 8004a7e:	68e0      	ldr	r0, [r4, #12]
 8004a80:	9b03      	ldr	r3, [sp, #12]
 8004a82:	4298      	cmp	r0, r3
 8004a84:	bfb8      	it	lt
 8004a86:	4618      	movlt	r0, r3
 8004a88:	e7a6      	b.n	80049d8 <_printf_i+0x164>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	4632      	mov	r2, r6
 8004a8e:	4649      	mov	r1, r9
 8004a90:	4640      	mov	r0, r8
 8004a92:	47d0      	blx	sl
 8004a94:	3001      	adds	r0, #1
 8004a96:	d09d      	beq.n	80049d4 <_printf_i+0x160>
 8004a98:	3501      	adds	r5, #1
 8004a9a:	68e3      	ldr	r3, [r4, #12]
 8004a9c:	9903      	ldr	r1, [sp, #12]
 8004a9e:	1a5b      	subs	r3, r3, r1
 8004aa0:	42ab      	cmp	r3, r5
 8004aa2:	dcf2      	bgt.n	8004a8a <_printf_i+0x216>
 8004aa4:	e7eb      	b.n	8004a7e <_printf_i+0x20a>
 8004aa6:	2500      	movs	r5, #0
 8004aa8:	f104 0619 	add.w	r6, r4, #25
 8004aac:	e7f5      	b.n	8004a9a <_printf_i+0x226>
 8004aae:	bf00      	nop
 8004ab0:	0800709e 	.word	0x0800709e
 8004ab4:	080070af 	.word	0x080070af

08004ab8 <std>:
 8004ab8:	2300      	movs	r3, #0
 8004aba:	b510      	push	{r4, lr}
 8004abc:	4604      	mov	r4, r0
 8004abe:	e9c0 3300 	strd	r3, r3, [r0]
 8004ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ac6:	6083      	str	r3, [r0, #8]
 8004ac8:	8181      	strh	r1, [r0, #12]
 8004aca:	6643      	str	r3, [r0, #100]	; 0x64
 8004acc:	81c2      	strh	r2, [r0, #14]
 8004ace:	6183      	str	r3, [r0, #24]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	2208      	movs	r2, #8
 8004ad4:	305c      	adds	r0, #92	; 0x5c
 8004ad6:	f000 f928 	bl	8004d2a <memset>
 8004ada:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <std+0x58>)
 8004adc:	6263      	str	r3, [r4, #36]	; 0x24
 8004ade:	4b0d      	ldr	r3, [pc, #52]	; (8004b14 <std+0x5c>)
 8004ae0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ae2:	4b0d      	ldr	r3, [pc, #52]	; (8004b18 <std+0x60>)
 8004ae4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ae6:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <std+0x64>)
 8004ae8:	6323      	str	r3, [r4, #48]	; 0x30
 8004aea:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <std+0x68>)
 8004aec:	6224      	str	r4, [r4, #32]
 8004aee:	429c      	cmp	r4, r3
 8004af0:	d006      	beq.n	8004b00 <std+0x48>
 8004af2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004af6:	4294      	cmp	r4, r2
 8004af8:	d002      	beq.n	8004b00 <std+0x48>
 8004afa:	33d0      	adds	r3, #208	; 0xd0
 8004afc:	429c      	cmp	r4, r3
 8004afe:	d105      	bne.n	8004b0c <std+0x54>
 8004b00:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b08:	f000 b98c 	b.w	8004e24 <__retarget_lock_init_recursive>
 8004b0c:	bd10      	pop	{r4, pc}
 8004b0e:	bf00      	nop
 8004b10:	08004ca5 	.word	0x08004ca5
 8004b14:	08004cc7 	.word	0x08004cc7
 8004b18:	08004cff 	.word	0x08004cff
 8004b1c:	08004d23 	.word	0x08004d23
 8004b20:	200002c8 	.word	0x200002c8

08004b24 <stdio_exit_handler>:
 8004b24:	4a02      	ldr	r2, [pc, #8]	; (8004b30 <stdio_exit_handler+0xc>)
 8004b26:	4903      	ldr	r1, [pc, #12]	; (8004b34 <stdio_exit_handler+0x10>)
 8004b28:	4803      	ldr	r0, [pc, #12]	; (8004b38 <stdio_exit_handler+0x14>)
 8004b2a:	f000 b869 	b.w	8004c00 <_fwalk_sglue>
 8004b2e:	bf00      	nop
 8004b30:	2000000c 	.word	0x2000000c
 8004b34:	080067f1 	.word	0x080067f1
 8004b38:	20000018 	.word	0x20000018

08004b3c <cleanup_stdio>:
 8004b3c:	6841      	ldr	r1, [r0, #4]
 8004b3e:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <cleanup_stdio+0x34>)
 8004b40:	4299      	cmp	r1, r3
 8004b42:	b510      	push	{r4, lr}
 8004b44:	4604      	mov	r4, r0
 8004b46:	d001      	beq.n	8004b4c <cleanup_stdio+0x10>
 8004b48:	f001 fe52 	bl	80067f0 <_fflush_r>
 8004b4c:	68a1      	ldr	r1, [r4, #8]
 8004b4e:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <cleanup_stdio+0x38>)
 8004b50:	4299      	cmp	r1, r3
 8004b52:	d002      	beq.n	8004b5a <cleanup_stdio+0x1e>
 8004b54:	4620      	mov	r0, r4
 8004b56:	f001 fe4b 	bl	80067f0 <_fflush_r>
 8004b5a:	68e1      	ldr	r1, [r4, #12]
 8004b5c:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <cleanup_stdio+0x3c>)
 8004b5e:	4299      	cmp	r1, r3
 8004b60:	d004      	beq.n	8004b6c <cleanup_stdio+0x30>
 8004b62:	4620      	mov	r0, r4
 8004b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b68:	f001 be42 	b.w	80067f0 <_fflush_r>
 8004b6c:	bd10      	pop	{r4, pc}
 8004b6e:	bf00      	nop
 8004b70:	200002c8 	.word	0x200002c8
 8004b74:	20000330 	.word	0x20000330
 8004b78:	20000398 	.word	0x20000398

08004b7c <global_stdio_init.part.0>:
 8004b7c:	b510      	push	{r4, lr}
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <global_stdio_init.part.0+0x30>)
 8004b80:	4c0b      	ldr	r4, [pc, #44]	; (8004bb0 <global_stdio_init.part.0+0x34>)
 8004b82:	4a0c      	ldr	r2, [pc, #48]	; (8004bb4 <global_stdio_init.part.0+0x38>)
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	4620      	mov	r0, r4
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2104      	movs	r1, #4
 8004b8c:	f7ff ff94 	bl	8004ab8 <std>
 8004b90:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004b94:	2201      	movs	r2, #1
 8004b96:	2109      	movs	r1, #9
 8004b98:	f7ff ff8e 	bl	8004ab8 <std>
 8004b9c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ba6:	2112      	movs	r1, #18
 8004ba8:	f7ff bf86 	b.w	8004ab8 <std>
 8004bac:	20000400 	.word	0x20000400
 8004bb0:	200002c8 	.word	0x200002c8
 8004bb4:	08004b25 	.word	0x08004b25

08004bb8 <__sfp_lock_acquire>:
 8004bb8:	4801      	ldr	r0, [pc, #4]	; (8004bc0 <__sfp_lock_acquire+0x8>)
 8004bba:	f000 b934 	b.w	8004e26 <__retarget_lock_acquire_recursive>
 8004bbe:	bf00      	nop
 8004bc0:	20000409 	.word	0x20000409

08004bc4 <__sfp_lock_release>:
 8004bc4:	4801      	ldr	r0, [pc, #4]	; (8004bcc <__sfp_lock_release+0x8>)
 8004bc6:	f000 b92f 	b.w	8004e28 <__retarget_lock_release_recursive>
 8004bca:	bf00      	nop
 8004bcc:	20000409 	.word	0x20000409

08004bd0 <__sinit>:
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	f7ff fff0 	bl	8004bb8 <__sfp_lock_acquire>
 8004bd8:	6a23      	ldr	r3, [r4, #32]
 8004bda:	b11b      	cbz	r3, 8004be4 <__sinit+0x14>
 8004bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004be0:	f7ff bff0 	b.w	8004bc4 <__sfp_lock_release>
 8004be4:	4b04      	ldr	r3, [pc, #16]	; (8004bf8 <__sinit+0x28>)
 8004be6:	6223      	str	r3, [r4, #32]
 8004be8:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <__sinit+0x2c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f5      	bne.n	8004bdc <__sinit+0xc>
 8004bf0:	f7ff ffc4 	bl	8004b7c <global_stdio_init.part.0>
 8004bf4:	e7f2      	b.n	8004bdc <__sinit+0xc>
 8004bf6:	bf00      	nop
 8004bf8:	08004b3d 	.word	0x08004b3d
 8004bfc:	20000400 	.word	0x20000400

08004c00 <_fwalk_sglue>:
 8004c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c04:	4607      	mov	r7, r0
 8004c06:	4688      	mov	r8, r1
 8004c08:	4614      	mov	r4, r2
 8004c0a:	2600      	movs	r6, #0
 8004c0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c10:	f1b9 0901 	subs.w	r9, r9, #1
 8004c14:	d505      	bpl.n	8004c22 <_fwalk_sglue+0x22>
 8004c16:	6824      	ldr	r4, [r4, #0]
 8004c18:	2c00      	cmp	r4, #0
 8004c1a:	d1f7      	bne.n	8004c0c <_fwalk_sglue+0xc>
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c22:	89ab      	ldrh	r3, [r5, #12]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d907      	bls.n	8004c38 <_fwalk_sglue+0x38>
 8004c28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	d003      	beq.n	8004c38 <_fwalk_sglue+0x38>
 8004c30:	4629      	mov	r1, r5
 8004c32:	4638      	mov	r0, r7
 8004c34:	47c0      	blx	r8
 8004c36:	4306      	orrs	r6, r0
 8004c38:	3568      	adds	r5, #104	; 0x68
 8004c3a:	e7e9      	b.n	8004c10 <_fwalk_sglue+0x10>

08004c3c <sniprintf>:
 8004c3c:	b40c      	push	{r2, r3}
 8004c3e:	b530      	push	{r4, r5, lr}
 8004c40:	4b17      	ldr	r3, [pc, #92]	; (8004ca0 <sniprintf+0x64>)
 8004c42:	1e0c      	subs	r4, r1, #0
 8004c44:	681d      	ldr	r5, [r3, #0]
 8004c46:	b09d      	sub	sp, #116	; 0x74
 8004c48:	da08      	bge.n	8004c5c <sniprintf+0x20>
 8004c4a:	238b      	movs	r3, #139	; 0x8b
 8004c4c:	602b      	str	r3, [r5, #0]
 8004c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c52:	b01d      	add	sp, #116	; 0x74
 8004c54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c58:	b002      	add	sp, #8
 8004c5a:	4770      	bx	lr
 8004c5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004c60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004c64:	bf14      	ite	ne
 8004c66:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004c6a:	4623      	moveq	r3, r4
 8004c6c:	9304      	str	r3, [sp, #16]
 8004c6e:	9307      	str	r3, [sp, #28]
 8004c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c74:	9002      	str	r0, [sp, #8]
 8004c76:	9006      	str	r0, [sp, #24]
 8004c78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c7e:	ab21      	add	r3, sp, #132	; 0x84
 8004c80:	a902      	add	r1, sp, #8
 8004c82:	4628      	mov	r0, r5
 8004c84:	9301      	str	r3, [sp, #4]
 8004c86:	f001 fc2f 	bl	80064e8 <_svfiprintf_r>
 8004c8a:	1c43      	adds	r3, r0, #1
 8004c8c:	bfbc      	itt	lt
 8004c8e:	238b      	movlt	r3, #139	; 0x8b
 8004c90:	602b      	strlt	r3, [r5, #0]
 8004c92:	2c00      	cmp	r4, #0
 8004c94:	d0dd      	beq.n	8004c52 <sniprintf+0x16>
 8004c96:	9b02      	ldr	r3, [sp, #8]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	701a      	strb	r2, [r3, #0]
 8004c9c:	e7d9      	b.n	8004c52 <sniprintf+0x16>
 8004c9e:	bf00      	nop
 8004ca0:	20000064 	.word	0x20000064

08004ca4 <__sread>:
 8004ca4:	b510      	push	{r4, lr}
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cac:	f000 f86c 	bl	8004d88 <_read_r>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	bfab      	itete	ge
 8004cb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004cb6:	89a3      	ldrhlt	r3, [r4, #12]
 8004cb8:	181b      	addge	r3, r3, r0
 8004cba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004cbe:	bfac      	ite	ge
 8004cc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004cc2:	81a3      	strhlt	r3, [r4, #12]
 8004cc4:	bd10      	pop	{r4, pc}

08004cc6 <__swrite>:
 8004cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cca:	461f      	mov	r7, r3
 8004ccc:	898b      	ldrh	r3, [r1, #12]
 8004cce:	05db      	lsls	r3, r3, #23
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	4616      	mov	r6, r2
 8004cd6:	d505      	bpl.n	8004ce4 <__swrite+0x1e>
 8004cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cdc:	2302      	movs	r3, #2
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f000 f840 	bl	8004d64 <_lseek_r>
 8004ce4:	89a3      	ldrh	r3, [r4, #12]
 8004ce6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cee:	81a3      	strh	r3, [r4, #12]
 8004cf0:	4632      	mov	r2, r6
 8004cf2:	463b      	mov	r3, r7
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cfa:	f000 b857 	b.w	8004dac <_write_r>

08004cfe <__sseek>:
 8004cfe:	b510      	push	{r4, lr}
 8004d00:	460c      	mov	r4, r1
 8004d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d06:	f000 f82d 	bl	8004d64 <_lseek_r>
 8004d0a:	1c43      	adds	r3, r0, #1
 8004d0c:	89a3      	ldrh	r3, [r4, #12]
 8004d0e:	bf15      	itete	ne
 8004d10:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d1a:	81a3      	strheq	r3, [r4, #12]
 8004d1c:	bf18      	it	ne
 8004d1e:	81a3      	strhne	r3, [r4, #12]
 8004d20:	bd10      	pop	{r4, pc}

08004d22 <__sclose>:
 8004d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d26:	f000 b80d 	b.w	8004d44 <_close_r>

08004d2a <memset>:
 8004d2a:	4402      	add	r2, r0
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d100      	bne.n	8004d34 <memset+0xa>
 8004d32:	4770      	bx	lr
 8004d34:	f803 1b01 	strb.w	r1, [r3], #1
 8004d38:	e7f9      	b.n	8004d2e <memset+0x4>
	...

08004d3c <_localeconv_r>:
 8004d3c:	4800      	ldr	r0, [pc, #0]	; (8004d40 <_localeconv_r+0x4>)
 8004d3e:	4770      	bx	lr
 8004d40:	20000158 	.word	0x20000158

08004d44 <_close_r>:
 8004d44:	b538      	push	{r3, r4, r5, lr}
 8004d46:	4d06      	ldr	r5, [pc, #24]	; (8004d60 <_close_r+0x1c>)
 8004d48:	2300      	movs	r3, #0
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	4608      	mov	r0, r1
 8004d4e:	602b      	str	r3, [r5, #0]
 8004d50:	f7fc fdd3 	bl	80018fa <_close>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d102      	bne.n	8004d5e <_close_r+0x1a>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	b103      	cbz	r3, 8004d5e <_close_r+0x1a>
 8004d5c:	6023      	str	r3, [r4, #0]
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
 8004d60:	20000404 	.word	0x20000404

08004d64 <_lseek_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	4d07      	ldr	r5, [pc, #28]	; (8004d84 <_lseek_r+0x20>)
 8004d68:	4604      	mov	r4, r0
 8004d6a:	4608      	mov	r0, r1
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	2200      	movs	r2, #0
 8004d70:	602a      	str	r2, [r5, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	f7fc fde8 	bl	8001948 <_lseek>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	d102      	bne.n	8004d82 <_lseek_r+0x1e>
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	b103      	cbz	r3, 8004d82 <_lseek_r+0x1e>
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
 8004d84:	20000404 	.word	0x20000404

08004d88 <_read_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4d07      	ldr	r5, [pc, #28]	; (8004da8 <_read_r+0x20>)
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	4608      	mov	r0, r1
 8004d90:	4611      	mov	r1, r2
 8004d92:	2200      	movs	r2, #0
 8004d94:	602a      	str	r2, [r5, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f7fc fd76 	bl	8001888 <_read>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	d102      	bne.n	8004da6 <_read_r+0x1e>
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	b103      	cbz	r3, 8004da6 <_read_r+0x1e>
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	bd38      	pop	{r3, r4, r5, pc}
 8004da8:	20000404 	.word	0x20000404

08004dac <_write_r>:
 8004dac:	b538      	push	{r3, r4, r5, lr}
 8004dae:	4d07      	ldr	r5, [pc, #28]	; (8004dcc <_write_r+0x20>)
 8004db0:	4604      	mov	r4, r0
 8004db2:	4608      	mov	r0, r1
 8004db4:	4611      	mov	r1, r2
 8004db6:	2200      	movs	r2, #0
 8004db8:	602a      	str	r2, [r5, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f7fc fd81 	bl	80018c2 <_write>
 8004dc0:	1c43      	adds	r3, r0, #1
 8004dc2:	d102      	bne.n	8004dca <_write_r+0x1e>
 8004dc4:	682b      	ldr	r3, [r5, #0]
 8004dc6:	b103      	cbz	r3, 8004dca <_write_r+0x1e>
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	bd38      	pop	{r3, r4, r5, pc}
 8004dcc:	20000404 	.word	0x20000404

08004dd0 <__errno>:
 8004dd0:	4b01      	ldr	r3, [pc, #4]	; (8004dd8 <__errno+0x8>)
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	20000064 	.word	0x20000064

08004ddc <__libc_init_array>:
 8004ddc:	b570      	push	{r4, r5, r6, lr}
 8004dde:	4d0d      	ldr	r5, [pc, #52]	; (8004e14 <__libc_init_array+0x38>)
 8004de0:	4c0d      	ldr	r4, [pc, #52]	; (8004e18 <__libc_init_array+0x3c>)
 8004de2:	1b64      	subs	r4, r4, r5
 8004de4:	10a4      	asrs	r4, r4, #2
 8004de6:	2600      	movs	r6, #0
 8004de8:	42a6      	cmp	r6, r4
 8004dea:	d109      	bne.n	8004e00 <__libc_init_array+0x24>
 8004dec:	4d0b      	ldr	r5, [pc, #44]	; (8004e1c <__libc_init_array+0x40>)
 8004dee:	4c0c      	ldr	r4, [pc, #48]	; (8004e20 <__libc_init_array+0x44>)
 8004df0:	f002 f894 	bl	8006f1c <_init>
 8004df4:	1b64      	subs	r4, r4, r5
 8004df6:	10a4      	asrs	r4, r4, #2
 8004df8:	2600      	movs	r6, #0
 8004dfa:	42a6      	cmp	r6, r4
 8004dfc:	d105      	bne.n	8004e0a <__libc_init_array+0x2e>
 8004dfe:	bd70      	pop	{r4, r5, r6, pc}
 8004e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e04:	4798      	blx	r3
 8004e06:	3601      	adds	r6, #1
 8004e08:	e7ee      	b.n	8004de8 <__libc_init_array+0xc>
 8004e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0e:	4798      	blx	r3
 8004e10:	3601      	adds	r6, #1
 8004e12:	e7f2      	b.n	8004dfa <__libc_init_array+0x1e>
 8004e14:	08007404 	.word	0x08007404
 8004e18:	08007404 	.word	0x08007404
 8004e1c:	08007404 	.word	0x08007404
 8004e20:	08007408 	.word	0x08007408

08004e24 <__retarget_lock_init_recursive>:
 8004e24:	4770      	bx	lr

08004e26 <__retarget_lock_acquire_recursive>:
 8004e26:	4770      	bx	lr

08004e28 <__retarget_lock_release_recursive>:
 8004e28:	4770      	bx	lr

08004e2a <memcpy>:
 8004e2a:	440a      	add	r2, r1
 8004e2c:	4291      	cmp	r1, r2
 8004e2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e32:	d100      	bne.n	8004e36 <memcpy+0xc>
 8004e34:	4770      	bx	lr
 8004e36:	b510      	push	{r4, lr}
 8004e38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e40:	4291      	cmp	r1, r2
 8004e42:	d1f9      	bne.n	8004e38 <memcpy+0xe>
 8004e44:	bd10      	pop	{r4, pc}

08004e46 <quorem>:
 8004e46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4a:	6903      	ldr	r3, [r0, #16]
 8004e4c:	690c      	ldr	r4, [r1, #16]
 8004e4e:	42a3      	cmp	r3, r4
 8004e50:	4607      	mov	r7, r0
 8004e52:	db7e      	blt.n	8004f52 <quorem+0x10c>
 8004e54:	3c01      	subs	r4, #1
 8004e56:	f101 0814 	add.w	r8, r1, #20
 8004e5a:	f100 0514 	add.w	r5, r0, #20
 8004e5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e62:	9301      	str	r3, [sp, #4]
 8004e64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e78:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e7c:	d331      	bcc.n	8004ee2 <quorem+0x9c>
 8004e7e:	f04f 0e00 	mov.w	lr, #0
 8004e82:	4640      	mov	r0, r8
 8004e84:	46ac      	mov	ip, r5
 8004e86:	46f2      	mov	sl, lr
 8004e88:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e8c:	b293      	uxth	r3, r2
 8004e8e:	fb06 e303 	mla	r3, r6, r3, lr
 8004e92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e96:	0c1a      	lsrs	r2, r3, #16
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	ebaa 0303 	sub.w	r3, sl, r3
 8004e9e:	f8dc a000 	ldr.w	sl, [ip]
 8004ea2:	fa13 f38a 	uxtah	r3, r3, sl
 8004ea6:	fb06 220e 	mla	r2, r6, lr, r2
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	9b00      	ldr	r3, [sp, #0]
 8004eae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004eb2:	b292      	uxth	r2, r2
 8004eb4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004eb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ebc:	f8bd 3000 	ldrh.w	r3, [sp]
 8004ec0:	4581      	cmp	r9, r0
 8004ec2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ec6:	f84c 3b04 	str.w	r3, [ip], #4
 8004eca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004ece:	d2db      	bcs.n	8004e88 <quorem+0x42>
 8004ed0:	f855 300b 	ldr.w	r3, [r5, fp]
 8004ed4:	b92b      	cbnz	r3, 8004ee2 <quorem+0x9c>
 8004ed6:	9b01      	ldr	r3, [sp, #4]
 8004ed8:	3b04      	subs	r3, #4
 8004eda:	429d      	cmp	r5, r3
 8004edc:	461a      	mov	r2, r3
 8004ede:	d32c      	bcc.n	8004f3a <quorem+0xf4>
 8004ee0:	613c      	str	r4, [r7, #16]
 8004ee2:	4638      	mov	r0, r7
 8004ee4:	f001 f9a6 	bl	8006234 <__mcmp>
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	db22      	blt.n	8004f32 <quorem+0xec>
 8004eec:	3601      	adds	r6, #1
 8004eee:	4629      	mov	r1, r5
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ef6:	f8d1 c000 	ldr.w	ip, [r1]
 8004efa:	b293      	uxth	r3, r2
 8004efc:	1ac3      	subs	r3, r0, r3
 8004efe:	0c12      	lsrs	r2, r2, #16
 8004f00:	fa13 f38c 	uxtah	r3, r3, ip
 8004f04:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004f08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f12:	45c1      	cmp	r9, r8
 8004f14:	f841 3b04 	str.w	r3, [r1], #4
 8004f18:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004f1c:	d2e9      	bcs.n	8004ef2 <quorem+0xac>
 8004f1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f26:	b922      	cbnz	r2, 8004f32 <quorem+0xec>
 8004f28:	3b04      	subs	r3, #4
 8004f2a:	429d      	cmp	r5, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	d30a      	bcc.n	8004f46 <quorem+0x100>
 8004f30:	613c      	str	r4, [r7, #16]
 8004f32:	4630      	mov	r0, r6
 8004f34:	b003      	add	sp, #12
 8004f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f3a:	6812      	ldr	r2, [r2, #0]
 8004f3c:	3b04      	subs	r3, #4
 8004f3e:	2a00      	cmp	r2, #0
 8004f40:	d1ce      	bne.n	8004ee0 <quorem+0x9a>
 8004f42:	3c01      	subs	r4, #1
 8004f44:	e7c9      	b.n	8004eda <quorem+0x94>
 8004f46:	6812      	ldr	r2, [r2, #0]
 8004f48:	3b04      	subs	r3, #4
 8004f4a:	2a00      	cmp	r2, #0
 8004f4c:	d1f0      	bne.n	8004f30 <quorem+0xea>
 8004f4e:	3c01      	subs	r4, #1
 8004f50:	e7eb      	b.n	8004f2a <quorem+0xe4>
 8004f52:	2000      	movs	r0, #0
 8004f54:	e7ee      	b.n	8004f34 <quorem+0xee>
	...

08004f58 <_dtoa_r>:
 8004f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f5c:	ed2d 8b04 	vpush	{d8-d9}
 8004f60:	69c5      	ldr	r5, [r0, #28]
 8004f62:	b093      	sub	sp, #76	; 0x4c
 8004f64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004f68:	ec57 6b10 	vmov	r6, r7, d0
 8004f6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f70:	9107      	str	r1, [sp, #28]
 8004f72:	4604      	mov	r4, r0
 8004f74:	920a      	str	r2, [sp, #40]	; 0x28
 8004f76:	930d      	str	r3, [sp, #52]	; 0x34
 8004f78:	b975      	cbnz	r5, 8004f98 <_dtoa_r+0x40>
 8004f7a:	2010      	movs	r0, #16
 8004f7c:	f000 fe2a 	bl	8005bd4 <malloc>
 8004f80:	4602      	mov	r2, r0
 8004f82:	61e0      	str	r0, [r4, #28]
 8004f84:	b920      	cbnz	r0, 8004f90 <_dtoa_r+0x38>
 8004f86:	4bae      	ldr	r3, [pc, #696]	; (8005240 <_dtoa_r+0x2e8>)
 8004f88:	21ef      	movs	r1, #239	; 0xef
 8004f8a:	48ae      	ldr	r0, [pc, #696]	; (8005244 <_dtoa_r+0x2ec>)
 8004f8c:	f001 fc82 	bl	8006894 <__assert_func>
 8004f90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f94:	6005      	str	r5, [r0, #0]
 8004f96:	60c5      	str	r5, [r0, #12]
 8004f98:	69e3      	ldr	r3, [r4, #28]
 8004f9a:	6819      	ldr	r1, [r3, #0]
 8004f9c:	b151      	cbz	r1, 8004fb4 <_dtoa_r+0x5c>
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	604a      	str	r2, [r1, #4]
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	4093      	lsls	r3, r2
 8004fa6:	608b      	str	r3, [r1, #8]
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f000 ff07 	bl	8005dbc <_Bfree>
 8004fae:	69e3      	ldr	r3, [r4, #28]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	1e3b      	subs	r3, r7, #0
 8004fb6:	bfbb      	ittet	lt
 8004fb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004fbc:	9303      	strlt	r3, [sp, #12]
 8004fbe:	2300      	movge	r3, #0
 8004fc0:	2201      	movlt	r2, #1
 8004fc2:	bfac      	ite	ge
 8004fc4:	f8c8 3000 	strge.w	r3, [r8]
 8004fc8:	f8c8 2000 	strlt.w	r2, [r8]
 8004fcc:	4b9e      	ldr	r3, [pc, #632]	; (8005248 <_dtoa_r+0x2f0>)
 8004fce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004fd2:	ea33 0308 	bics.w	r3, r3, r8
 8004fd6:	d11b      	bne.n	8005010 <_dtoa_r+0xb8>
 8004fd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004fda:	f242 730f 	movw	r3, #9999	; 0x270f
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004fe4:	4333      	orrs	r3, r6
 8004fe6:	f000 8593 	beq.w	8005b10 <_dtoa_r+0xbb8>
 8004fea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fec:	b963      	cbnz	r3, 8005008 <_dtoa_r+0xb0>
 8004fee:	4b97      	ldr	r3, [pc, #604]	; (800524c <_dtoa_r+0x2f4>)
 8004ff0:	e027      	b.n	8005042 <_dtoa_r+0xea>
 8004ff2:	4b97      	ldr	r3, [pc, #604]	; (8005250 <_dtoa_r+0x2f8>)
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	3308      	adds	r3, #8
 8004ff8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004ffa:	6013      	str	r3, [r2, #0]
 8004ffc:	9800      	ldr	r0, [sp, #0]
 8004ffe:	b013      	add	sp, #76	; 0x4c
 8005000:	ecbd 8b04 	vpop	{d8-d9}
 8005004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005008:	4b90      	ldr	r3, [pc, #576]	; (800524c <_dtoa_r+0x2f4>)
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	3303      	adds	r3, #3
 800500e:	e7f3      	b.n	8004ff8 <_dtoa_r+0xa0>
 8005010:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005014:	2200      	movs	r2, #0
 8005016:	ec51 0b17 	vmov	r0, r1, d7
 800501a:	eeb0 8a47 	vmov.f32	s16, s14
 800501e:	eef0 8a67 	vmov.f32	s17, s15
 8005022:	2300      	movs	r3, #0
 8005024:	f7fb fd58 	bl	8000ad8 <__aeabi_dcmpeq>
 8005028:	4681      	mov	r9, r0
 800502a:	b160      	cbz	r0, 8005046 <_dtoa_r+0xee>
 800502c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800502e:	2301      	movs	r3, #1
 8005030:	6013      	str	r3, [r2, #0]
 8005032:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8568 	beq.w	8005b0a <_dtoa_r+0xbb2>
 800503a:	4b86      	ldr	r3, [pc, #536]	; (8005254 <_dtoa_r+0x2fc>)
 800503c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	3b01      	subs	r3, #1
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	e7da      	b.n	8004ffc <_dtoa_r+0xa4>
 8005046:	aa10      	add	r2, sp, #64	; 0x40
 8005048:	a911      	add	r1, sp, #68	; 0x44
 800504a:	4620      	mov	r0, r4
 800504c:	eeb0 0a48 	vmov.f32	s0, s16
 8005050:	eef0 0a68 	vmov.f32	s1, s17
 8005054:	f001 f994 	bl	8006380 <__d2b>
 8005058:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800505c:	4682      	mov	sl, r0
 800505e:	2d00      	cmp	r5, #0
 8005060:	d07f      	beq.n	8005162 <_dtoa_r+0x20a>
 8005062:	ee18 3a90 	vmov	r3, s17
 8005066:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800506a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800506e:	ec51 0b18 	vmov	r0, r1, d8
 8005072:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005076:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800507a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800507e:	4619      	mov	r1, r3
 8005080:	2200      	movs	r2, #0
 8005082:	4b75      	ldr	r3, [pc, #468]	; (8005258 <_dtoa_r+0x300>)
 8005084:	f7fb f908 	bl	8000298 <__aeabi_dsub>
 8005088:	a367      	add	r3, pc, #412	; (adr r3, 8005228 <_dtoa_r+0x2d0>)
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	f7fb fabb 	bl	8000608 <__aeabi_dmul>
 8005092:	a367      	add	r3, pc, #412	; (adr r3, 8005230 <_dtoa_r+0x2d8>)
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f7fb f900 	bl	800029c <__adddf3>
 800509c:	4606      	mov	r6, r0
 800509e:	4628      	mov	r0, r5
 80050a0:	460f      	mov	r7, r1
 80050a2:	f7fb fa47 	bl	8000534 <__aeabi_i2d>
 80050a6:	a364      	add	r3, pc, #400	; (adr r3, 8005238 <_dtoa_r+0x2e0>)
 80050a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ac:	f7fb faac 	bl	8000608 <__aeabi_dmul>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4630      	mov	r0, r6
 80050b6:	4639      	mov	r1, r7
 80050b8:	f7fb f8f0 	bl	800029c <__adddf3>
 80050bc:	4606      	mov	r6, r0
 80050be:	460f      	mov	r7, r1
 80050c0:	f7fb fd52 	bl	8000b68 <__aeabi_d2iz>
 80050c4:	2200      	movs	r2, #0
 80050c6:	4683      	mov	fp, r0
 80050c8:	2300      	movs	r3, #0
 80050ca:	4630      	mov	r0, r6
 80050cc:	4639      	mov	r1, r7
 80050ce:	f7fb fd0d 	bl	8000aec <__aeabi_dcmplt>
 80050d2:	b148      	cbz	r0, 80050e8 <_dtoa_r+0x190>
 80050d4:	4658      	mov	r0, fp
 80050d6:	f7fb fa2d 	bl	8000534 <__aeabi_i2d>
 80050da:	4632      	mov	r2, r6
 80050dc:	463b      	mov	r3, r7
 80050de:	f7fb fcfb 	bl	8000ad8 <__aeabi_dcmpeq>
 80050e2:	b908      	cbnz	r0, 80050e8 <_dtoa_r+0x190>
 80050e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80050e8:	f1bb 0f16 	cmp.w	fp, #22
 80050ec:	d857      	bhi.n	800519e <_dtoa_r+0x246>
 80050ee:	4b5b      	ldr	r3, [pc, #364]	; (800525c <_dtoa_r+0x304>)
 80050f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	ec51 0b18 	vmov	r0, r1, d8
 80050fc:	f7fb fcf6 	bl	8000aec <__aeabi_dcmplt>
 8005100:	2800      	cmp	r0, #0
 8005102:	d04e      	beq.n	80051a2 <_dtoa_r+0x24a>
 8005104:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005108:	2300      	movs	r3, #0
 800510a:	930c      	str	r3, [sp, #48]	; 0x30
 800510c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800510e:	1b5b      	subs	r3, r3, r5
 8005110:	1e5a      	subs	r2, r3, #1
 8005112:	bf45      	ittet	mi
 8005114:	f1c3 0301 	rsbmi	r3, r3, #1
 8005118:	9305      	strmi	r3, [sp, #20]
 800511a:	2300      	movpl	r3, #0
 800511c:	2300      	movmi	r3, #0
 800511e:	9206      	str	r2, [sp, #24]
 8005120:	bf54      	ite	pl
 8005122:	9305      	strpl	r3, [sp, #20]
 8005124:	9306      	strmi	r3, [sp, #24]
 8005126:	f1bb 0f00 	cmp.w	fp, #0
 800512a:	db3c      	blt.n	80051a6 <_dtoa_r+0x24e>
 800512c:	9b06      	ldr	r3, [sp, #24]
 800512e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005132:	445b      	add	r3, fp
 8005134:	9306      	str	r3, [sp, #24]
 8005136:	2300      	movs	r3, #0
 8005138:	9308      	str	r3, [sp, #32]
 800513a:	9b07      	ldr	r3, [sp, #28]
 800513c:	2b09      	cmp	r3, #9
 800513e:	d868      	bhi.n	8005212 <_dtoa_r+0x2ba>
 8005140:	2b05      	cmp	r3, #5
 8005142:	bfc4      	itt	gt
 8005144:	3b04      	subgt	r3, #4
 8005146:	9307      	strgt	r3, [sp, #28]
 8005148:	9b07      	ldr	r3, [sp, #28]
 800514a:	f1a3 0302 	sub.w	r3, r3, #2
 800514e:	bfcc      	ite	gt
 8005150:	2500      	movgt	r5, #0
 8005152:	2501      	movle	r5, #1
 8005154:	2b03      	cmp	r3, #3
 8005156:	f200 8085 	bhi.w	8005264 <_dtoa_r+0x30c>
 800515a:	e8df f003 	tbb	[pc, r3]
 800515e:	3b2e      	.short	0x3b2e
 8005160:	5839      	.short	0x5839
 8005162:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005166:	441d      	add	r5, r3
 8005168:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800516c:	2b20      	cmp	r3, #32
 800516e:	bfc1      	itttt	gt
 8005170:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005174:	fa08 f803 	lslgt.w	r8, r8, r3
 8005178:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800517c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005180:	bfd6      	itet	le
 8005182:	f1c3 0320 	rsble	r3, r3, #32
 8005186:	ea48 0003 	orrgt.w	r0, r8, r3
 800518a:	fa06 f003 	lslle.w	r0, r6, r3
 800518e:	f7fb f9c1 	bl	8000514 <__aeabi_ui2d>
 8005192:	2201      	movs	r2, #1
 8005194:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005198:	3d01      	subs	r5, #1
 800519a:	920e      	str	r2, [sp, #56]	; 0x38
 800519c:	e76f      	b.n	800507e <_dtoa_r+0x126>
 800519e:	2301      	movs	r3, #1
 80051a0:	e7b3      	b.n	800510a <_dtoa_r+0x1b2>
 80051a2:	900c      	str	r0, [sp, #48]	; 0x30
 80051a4:	e7b2      	b.n	800510c <_dtoa_r+0x1b4>
 80051a6:	9b05      	ldr	r3, [sp, #20]
 80051a8:	eba3 030b 	sub.w	r3, r3, fp
 80051ac:	9305      	str	r3, [sp, #20]
 80051ae:	f1cb 0300 	rsb	r3, fp, #0
 80051b2:	9308      	str	r3, [sp, #32]
 80051b4:	2300      	movs	r3, #0
 80051b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80051b8:	e7bf      	b.n	800513a <_dtoa_r+0x1e2>
 80051ba:	2300      	movs	r3, #0
 80051bc:	9309      	str	r3, [sp, #36]	; 0x24
 80051be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	dc52      	bgt.n	800526a <_dtoa_r+0x312>
 80051c4:	2301      	movs	r3, #1
 80051c6:	9301      	str	r3, [sp, #4]
 80051c8:	9304      	str	r3, [sp, #16]
 80051ca:	461a      	mov	r2, r3
 80051cc:	920a      	str	r2, [sp, #40]	; 0x28
 80051ce:	e00b      	b.n	80051e8 <_dtoa_r+0x290>
 80051d0:	2301      	movs	r3, #1
 80051d2:	e7f3      	b.n	80051bc <_dtoa_r+0x264>
 80051d4:	2300      	movs	r3, #0
 80051d6:	9309      	str	r3, [sp, #36]	; 0x24
 80051d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051da:	445b      	add	r3, fp
 80051dc:	9301      	str	r3, [sp, #4]
 80051de:	3301      	adds	r3, #1
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	9304      	str	r3, [sp, #16]
 80051e4:	bfb8      	it	lt
 80051e6:	2301      	movlt	r3, #1
 80051e8:	69e0      	ldr	r0, [r4, #28]
 80051ea:	2100      	movs	r1, #0
 80051ec:	2204      	movs	r2, #4
 80051ee:	f102 0614 	add.w	r6, r2, #20
 80051f2:	429e      	cmp	r6, r3
 80051f4:	d93d      	bls.n	8005272 <_dtoa_r+0x31a>
 80051f6:	6041      	str	r1, [r0, #4]
 80051f8:	4620      	mov	r0, r4
 80051fa:	f000 fd9f 	bl	8005d3c <_Balloc>
 80051fe:	9000      	str	r0, [sp, #0]
 8005200:	2800      	cmp	r0, #0
 8005202:	d139      	bne.n	8005278 <_dtoa_r+0x320>
 8005204:	4b16      	ldr	r3, [pc, #88]	; (8005260 <_dtoa_r+0x308>)
 8005206:	4602      	mov	r2, r0
 8005208:	f240 11af 	movw	r1, #431	; 0x1af
 800520c:	e6bd      	b.n	8004f8a <_dtoa_r+0x32>
 800520e:	2301      	movs	r3, #1
 8005210:	e7e1      	b.n	80051d6 <_dtoa_r+0x27e>
 8005212:	2501      	movs	r5, #1
 8005214:	2300      	movs	r3, #0
 8005216:	9307      	str	r3, [sp, #28]
 8005218:	9509      	str	r5, [sp, #36]	; 0x24
 800521a:	f04f 33ff 	mov.w	r3, #4294967295
 800521e:	9301      	str	r3, [sp, #4]
 8005220:	9304      	str	r3, [sp, #16]
 8005222:	2200      	movs	r2, #0
 8005224:	2312      	movs	r3, #18
 8005226:	e7d1      	b.n	80051cc <_dtoa_r+0x274>
 8005228:	636f4361 	.word	0x636f4361
 800522c:	3fd287a7 	.word	0x3fd287a7
 8005230:	8b60c8b3 	.word	0x8b60c8b3
 8005234:	3fc68a28 	.word	0x3fc68a28
 8005238:	509f79fb 	.word	0x509f79fb
 800523c:	3fd34413 	.word	0x3fd34413
 8005240:	080070cd 	.word	0x080070cd
 8005244:	080070e4 	.word	0x080070e4
 8005248:	7ff00000 	.word	0x7ff00000
 800524c:	080070c9 	.word	0x080070c9
 8005250:	080070c0 	.word	0x080070c0
 8005254:	0800709d 	.word	0x0800709d
 8005258:	3ff80000 	.word	0x3ff80000
 800525c:	080071d0 	.word	0x080071d0
 8005260:	0800713c 	.word	0x0800713c
 8005264:	2301      	movs	r3, #1
 8005266:	9309      	str	r3, [sp, #36]	; 0x24
 8005268:	e7d7      	b.n	800521a <_dtoa_r+0x2c2>
 800526a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800526c:	9301      	str	r3, [sp, #4]
 800526e:	9304      	str	r3, [sp, #16]
 8005270:	e7ba      	b.n	80051e8 <_dtoa_r+0x290>
 8005272:	3101      	adds	r1, #1
 8005274:	0052      	lsls	r2, r2, #1
 8005276:	e7ba      	b.n	80051ee <_dtoa_r+0x296>
 8005278:	69e3      	ldr	r3, [r4, #28]
 800527a:	9a00      	ldr	r2, [sp, #0]
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	9b04      	ldr	r3, [sp, #16]
 8005280:	2b0e      	cmp	r3, #14
 8005282:	f200 80a8 	bhi.w	80053d6 <_dtoa_r+0x47e>
 8005286:	2d00      	cmp	r5, #0
 8005288:	f000 80a5 	beq.w	80053d6 <_dtoa_r+0x47e>
 800528c:	f1bb 0f00 	cmp.w	fp, #0
 8005290:	dd38      	ble.n	8005304 <_dtoa_r+0x3ac>
 8005292:	4bc0      	ldr	r3, [pc, #768]	; (8005594 <_dtoa_r+0x63c>)
 8005294:	f00b 020f 	and.w	r2, fp, #15
 8005298:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800529c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80052a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80052a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80052a8:	d019      	beq.n	80052de <_dtoa_r+0x386>
 80052aa:	4bbb      	ldr	r3, [pc, #748]	; (8005598 <_dtoa_r+0x640>)
 80052ac:	ec51 0b18 	vmov	r0, r1, d8
 80052b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052b4:	f7fb fad2 	bl	800085c <__aeabi_ddiv>
 80052b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052bc:	f008 080f 	and.w	r8, r8, #15
 80052c0:	2503      	movs	r5, #3
 80052c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005598 <_dtoa_r+0x640>
 80052c6:	f1b8 0f00 	cmp.w	r8, #0
 80052ca:	d10a      	bne.n	80052e2 <_dtoa_r+0x38a>
 80052cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052d0:	4632      	mov	r2, r6
 80052d2:	463b      	mov	r3, r7
 80052d4:	f7fb fac2 	bl	800085c <__aeabi_ddiv>
 80052d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052dc:	e02b      	b.n	8005336 <_dtoa_r+0x3de>
 80052de:	2502      	movs	r5, #2
 80052e0:	e7ef      	b.n	80052c2 <_dtoa_r+0x36a>
 80052e2:	f018 0f01 	tst.w	r8, #1
 80052e6:	d008      	beq.n	80052fa <_dtoa_r+0x3a2>
 80052e8:	4630      	mov	r0, r6
 80052ea:	4639      	mov	r1, r7
 80052ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 80052f0:	f7fb f98a 	bl	8000608 <__aeabi_dmul>
 80052f4:	3501      	adds	r5, #1
 80052f6:	4606      	mov	r6, r0
 80052f8:	460f      	mov	r7, r1
 80052fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80052fe:	f109 0908 	add.w	r9, r9, #8
 8005302:	e7e0      	b.n	80052c6 <_dtoa_r+0x36e>
 8005304:	f000 809f 	beq.w	8005446 <_dtoa_r+0x4ee>
 8005308:	f1cb 0600 	rsb	r6, fp, #0
 800530c:	4ba1      	ldr	r3, [pc, #644]	; (8005594 <_dtoa_r+0x63c>)
 800530e:	4fa2      	ldr	r7, [pc, #648]	; (8005598 <_dtoa_r+0x640>)
 8005310:	f006 020f 	and.w	r2, r6, #15
 8005314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	ec51 0b18 	vmov	r0, r1, d8
 8005320:	f7fb f972 	bl	8000608 <__aeabi_dmul>
 8005324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005328:	1136      	asrs	r6, r6, #4
 800532a:	2300      	movs	r3, #0
 800532c:	2502      	movs	r5, #2
 800532e:	2e00      	cmp	r6, #0
 8005330:	d17e      	bne.n	8005430 <_dtoa_r+0x4d8>
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1d0      	bne.n	80052d8 <_dtoa_r+0x380>
 8005336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005338:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 8084 	beq.w	800544a <_dtoa_r+0x4f2>
 8005342:	4b96      	ldr	r3, [pc, #600]	; (800559c <_dtoa_r+0x644>)
 8005344:	2200      	movs	r2, #0
 8005346:	4640      	mov	r0, r8
 8005348:	4649      	mov	r1, r9
 800534a:	f7fb fbcf 	bl	8000aec <__aeabi_dcmplt>
 800534e:	2800      	cmp	r0, #0
 8005350:	d07b      	beq.n	800544a <_dtoa_r+0x4f2>
 8005352:	9b04      	ldr	r3, [sp, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d078      	beq.n	800544a <_dtoa_r+0x4f2>
 8005358:	9b01      	ldr	r3, [sp, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	dd39      	ble.n	80053d2 <_dtoa_r+0x47a>
 800535e:	4b90      	ldr	r3, [pc, #576]	; (80055a0 <_dtoa_r+0x648>)
 8005360:	2200      	movs	r2, #0
 8005362:	4640      	mov	r0, r8
 8005364:	4649      	mov	r1, r9
 8005366:	f7fb f94f 	bl	8000608 <__aeabi_dmul>
 800536a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800536e:	9e01      	ldr	r6, [sp, #4]
 8005370:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005374:	3501      	adds	r5, #1
 8005376:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800537a:	4628      	mov	r0, r5
 800537c:	f7fb f8da 	bl	8000534 <__aeabi_i2d>
 8005380:	4642      	mov	r2, r8
 8005382:	464b      	mov	r3, r9
 8005384:	f7fb f940 	bl	8000608 <__aeabi_dmul>
 8005388:	4b86      	ldr	r3, [pc, #536]	; (80055a4 <_dtoa_r+0x64c>)
 800538a:	2200      	movs	r2, #0
 800538c:	f7fa ff86 	bl	800029c <__adddf3>
 8005390:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005398:	9303      	str	r3, [sp, #12]
 800539a:	2e00      	cmp	r6, #0
 800539c:	d158      	bne.n	8005450 <_dtoa_r+0x4f8>
 800539e:	4b82      	ldr	r3, [pc, #520]	; (80055a8 <_dtoa_r+0x650>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	4640      	mov	r0, r8
 80053a4:	4649      	mov	r1, r9
 80053a6:	f7fa ff77 	bl	8000298 <__aeabi_dsub>
 80053aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053ae:	4680      	mov	r8, r0
 80053b0:	4689      	mov	r9, r1
 80053b2:	f7fb fbb9 	bl	8000b28 <__aeabi_dcmpgt>
 80053b6:	2800      	cmp	r0, #0
 80053b8:	f040 8296 	bne.w	80058e8 <_dtoa_r+0x990>
 80053bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80053c0:	4640      	mov	r0, r8
 80053c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053c6:	4649      	mov	r1, r9
 80053c8:	f7fb fb90 	bl	8000aec <__aeabi_dcmplt>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	f040 8289 	bne.w	80058e4 <_dtoa_r+0x98c>
 80053d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80053d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f2c0 814e 	blt.w	800567a <_dtoa_r+0x722>
 80053de:	f1bb 0f0e 	cmp.w	fp, #14
 80053e2:	f300 814a 	bgt.w	800567a <_dtoa_r+0x722>
 80053e6:	4b6b      	ldr	r3, [pc, #428]	; (8005594 <_dtoa_r+0x63c>)
 80053e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80053ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f280 80dc 	bge.w	80055b0 <_dtoa_r+0x658>
 80053f8:	9b04      	ldr	r3, [sp, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f300 80d8 	bgt.w	80055b0 <_dtoa_r+0x658>
 8005400:	f040 826f 	bne.w	80058e2 <_dtoa_r+0x98a>
 8005404:	4b68      	ldr	r3, [pc, #416]	; (80055a8 <_dtoa_r+0x650>)
 8005406:	2200      	movs	r2, #0
 8005408:	4640      	mov	r0, r8
 800540a:	4649      	mov	r1, r9
 800540c:	f7fb f8fc 	bl	8000608 <__aeabi_dmul>
 8005410:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005414:	f7fb fb7e 	bl	8000b14 <__aeabi_dcmpge>
 8005418:	9e04      	ldr	r6, [sp, #16]
 800541a:	4637      	mov	r7, r6
 800541c:	2800      	cmp	r0, #0
 800541e:	f040 8245 	bne.w	80058ac <_dtoa_r+0x954>
 8005422:	9d00      	ldr	r5, [sp, #0]
 8005424:	2331      	movs	r3, #49	; 0x31
 8005426:	f805 3b01 	strb.w	r3, [r5], #1
 800542a:	f10b 0b01 	add.w	fp, fp, #1
 800542e:	e241      	b.n	80058b4 <_dtoa_r+0x95c>
 8005430:	07f2      	lsls	r2, r6, #31
 8005432:	d505      	bpl.n	8005440 <_dtoa_r+0x4e8>
 8005434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005438:	f7fb f8e6 	bl	8000608 <__aeabi_dmul>
 800543c:	3501      	adds	r5, #1
 800543e:	2301      	movs	r3, #1
 8005440:	1076      	asrs	r6, r6, #1
 8005442:	3708      	adds	r7, #8
 8005444:	e773      	b.n	800532e <_dtoa_r+0x3d6>
 8005446:	2502      	movs	r5, #2
 8005448:	e775      	b.n	8005336 <_dtoa_r+0x3de>
 800544a:	9e04      	ldr	r6, [sp, #16]
 800544c:	465f      	mov	r7, fp
 800544e:	e792      	b.n	8005376 <_dtoa_r+0x41e>
 8005450:	9900      	ldr	r1, [sp, #0]
 8005452:	4b50      	ldr	r3, [pc, #320]	; (8005594 <_dtoa_r+0x63c>)
 8005454:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005458:	4431      	add	r1, r6
 800545a:	9102      	str	r1, [sp, #8]
 800545c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800545e:	eeb0 9a47 	vmov.f32	s18, s14
 8005462:	eef0 9a67 	vmov.f32	s19, s15
 8005466:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800546a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800546e:	2900      	cmp	r1, #0
 8005470:	d044      	beq.n	80054fc <_dtoa_r+0x5a4>
 8005472:	494e      	ldr	r1, [pc, #312]	; (80055ac <_dtoa_r+0x654>)
 8005474:	2000      	movs	r0, #0
 8005476:	f7fb f9f1 	bl	800085c <__aeabi_ddiv>
 800547a:	ec53 2b19 	vmov	r2, r3, d9
 800547e:	f7fa ff0b 	bl	8000298 <__aeabi_dsub>
 8005482:	9d00      	ldr	r5, [sp, #0]
 8005484:	ec41 0b19 	vmov	d9, r0, r1
 8005488:	4649      	mov	r1, r9
 800548a:	4640      	mov	r0, r8
 800548c:	f7fb fb6c 	bl	8000b68 <__aeabi_d2iz>
 8005490:	4606      	mov	r6, r0
 8005492:	f7fb f84f 	bl	8000534 <__aeabi_i2d>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	4640      	mov	r0, r8
 800549c:	4649      	mov	r1, r9
 800549e:	f7fa fefb 	bl	8000298 <__aeabi_dsub>
 80054a2:	3630      	adds	r6, #48	; 0x30
 80054a4:	f805 6b01 	strb.w	r6, [r5], #1
 80054a8:	ec53 2b19 	vmov	r2, r3, d9
 80054ac:	4680      	mov	r8, r0
 80054ae:	4689      	mov	r9, r1
 80054b0:	f7fb fb1c 	bl	8000aec <__aeabi_dcmplt>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d164      	bne.n	8005582 <_dtoa_r+0x62a>
 80054b8:	4642      	mov	r2, r8
 80054ba:	464b      	mov	r3, r9
 80054bc:	4937      	ldr	r1, [pc, #220]	; (800559c <_dtoa_r+0x644>)
 80054be:	2000      	movs	r0, #0
 80054c0:	f7fa feea 	bl	8000298 <__aeabi_dsub>
 80054c4:	ec53 2b19 	vmov	r2, r3, d9
 80054c8:	f7fb fb10 	bl	8000aec <__aeabi_dcmplt>
 80054cc:	2800      	cmp	r0, #0
 80054ce:	f040 80b6 	bne.w	800563e <_dtoa_r+0x6e6>
 80054d2:	9b02      	ldr	r3, [sp, #8]
 80054d4:	429d      	cmp	r5, r3
 80054d6:	f43f af7c 	beq.w	80053d2 <_dtoa_r+0x47a>
 80054da:	4b31      	ldr	r3, [pc, #196]	; (80055a0 <_dtoa_r+0x648>)
 80054dc:	ec51 0b19 	vmov	r0, r1, d9
 80054e0:	2200      	movs	r2, #0
 80054e2:	f7fb f891 	bl	8000608 <__aeabi_dmul>
 80054e6:	4b2e      	ldr	r3, [pc, #184]	; (80055a0 <_dtoa_r+0x648>)
 80054e8:	ec41 0b19 	vmov	d9, r0, r1
 80054ec:	2200      	movs	r2, #0
 80054ee:	4640      	mov	r0, r8
 80054f0:	4649      	mov	r1, r9
 80054f2:	f7fb f889 	bl	8000608 <__aeabi_dmul>
 80054f6:	4680      	mov	r8, r0
 80054f8:	4689      	mov	r9, r1
 80054fa:	e7c5      	b.n	8005488 <_dtoa_r+0x530>
 80054fc:	ec51 0b17 	vmov	r0, r1, d7
 8005500:	f7fb f882 	bl	8000608 <__aeabi_dmul>
 8005504:	9b02      	ldr	r3, [sp, #8]
 8005506:	9d00      	ldr	r5, [sp, #0]
 8005508:	930f      	str	r3, [sp, #60]	; 0x3c
 800550a:	ec41 0b19 	vmov	d9, r0, r1
 800550e:	4649      	mov	r1, r9
 8005510:	4640      	mov	r0, r8
 8005512:	f7fb fb29 	bl	8000b68 <__aeabi_d2iz>
 8005516:	4606      	mov	r6, r0
 8005518:	f7fb f80c 	bl	8000534 <__aeabi_i2d>
 800551c:	3630      	adds	r6, #48	; 0x30
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4640      	mov	r0, r8
 8005524:	4649      	mov	r1, r9
 8005526:	f7fa feb7 	bl	8000298 <__aeabi_dsub>
 800552a:	f805 6b01 	strb.w	r6, [r5], #1
 800552e:	9b02      	ldr	r3, [sp, #8]
 8005530:	429d      	cmp	r5, r3
 8005532:	4680      	mov	r8, r0
 8005534:	4689      	mov	r9, r1
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	d124      	bne.n	8005586 <_dtoa_r+0x62e>
 800553c:	4b1b      	ldr	r3, [pc, #108]	; (80055ac <_dtoa_r+0x654>)
 800553e:	ec51 0b19 	vmov	r0, r1, d9
 8005542:	f7fa feab 	bl	800029c <__adddf3>
 8005546:	4602      	mov	r2, r0
 8005548:	460b      	mov	r3, r1
 800554a:	4640      	mov	r0, r8
 800554c:	4649      	mov	r1, r9
 800554e:	f7fb faeb 	bl	8000b28 <__aeabi_dcmpgt>
 8005552:	2800      	cmp	r0, #0
 8005554:	d173      	bne.n	800563e <_dtoa_r+0x6e6>
 8005556:	ec53 2b19 	vmov	r2, r3, d9
 800555a:	4914      	ldr	r1, [pc, #80]	; (80055ac <_dtoa_r+0x654>)
 800555c:	2000      	movs	r0, #0
 800555e:	f7fa fe9b 	bl	8000298 <__aeabi_dsub>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	4640      	mov	r0, r8
 8005568:	4649      	mov	r1, r9
 800556a:	f7fb fabf 	bl	8000aec <__aeabi_dcmplt>
 800556e:	2800      	cmp	r0, #0
 8005570:	f43f af2f 	beq.w	80053d2 <_dtoa_r+0x47a>
 8005574:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005576:	1e6b      	subs	r3, r5, #1
 8005578:	930f      	str	r3, [sp, #60]	; 0x3c
 800557a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800557e:	2b30      	cmp	r3, #48	; 0x30
 8005580:	d0f8      	beq.n	8005574 <_dtoa_r+0x61c>
 8005582:	46bb      	mov	fp, r7
 8005584:	e04a      	b.n	800561c <_dtoa_r+0x6c4>
 8005586:	4b06      	ldr	r3, [pc, #24]	; (80055a0 <_dtoa_r+0x648>)
 8005588:	f7fb f83e 	bl	8000608 <__aeabi_dmul>
 800558c:	4680      	mov	r8, r0
 800558e:	4689      	mov	r9, r1
 8005590:	e7bd      	b.n	800550e <_dtoa_r+0x5b6>
 8005592:	bf00      	nop
 8005594:	080071d0 	.word	0x080071d0
 8005598:	080071a8 	.word	0x080071a8
 800559c:	3ff00000 	.word	0x3ff00000
 80055a0:	40240000 	.word	0x40240000
 80055a4:	401c0000 	.word	0x401c0000
 80055a8:	40140000 	.word	0x40140000
 80055ac:	3fe00000 	.word	0x3fe00000
 80055b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80055b4:	9d00      	ldr	r5, [sp, #0]
 80055b6:	4642      	mov	r2, r8
 80055b8:	464b      	mov	r3, r9
 80055ba:	4630      	mov	r0, r6
 80055bc:	4639      	mov	r1, r7
 80055be:	f7fb f94d 	bl	800085c <__aeabi_ddiv>
 80055c2:	f7fb fad1 	bl	8000b68 <__aeabi_d2iz>
 80055c6:	9001      	str	r0, [sp, #4]
 80055c8:	f7fa ffb4 	bl	8000534 <__aeabi_i2d>
 80055cc:	4642      	mov	r2, r8
 80055ce:	464b      	mov	r3, r9
 80055d0:	f7fb f81a 	bl	8000608 <__aeabi_dmul>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4630      	mov	r0, r6
 80055da:	4639      	mov	r1, r7
 80055dc:	f7fa fe5c 	bl	8000298 <__aeabi_dsub>
 80055e0:	9e01      	ldr	r6, [sp, #4]
 80055e2:	9f04      	ldr	r7, [sp, #16]
 80055e4:	3630      	adds	r6, #48	; 0x30
 80055e6:	f805 6b01 	strb.w	r6, [r5], #1
 80055ea:	9e00      	ldr	r6, [sp, #0]
 80055ec:	1bae      	subs	r6, r5, r6
 80055ee:	42b7      	cmp	r7, r6
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	d134      	bne.n	8005660 <_dtoa_r+0x708>
 80055f6:	f7fa fe51 	bl	800029c <__adddf3>
 80055fa:	4642      	mov	r2, r8
 80055fc:	464b      	mov	r3, r9
 80055fe:	4606      	mov	r6, r0
 8005600:	460f      	mov	r7, r1
 8005602:	f7fb fa91 	bl	8000b28 <__aeabi_dcmpgt>
 8005606:	b9c8      	cbnz	r0, 800563c <_dtoa_r+0x6e4>
 8005608:	4642      	mov	r2, r8
 800560a:	464b      	mov	r3, r9
 800560c:	4630      	mov	r0, r6
 800560e:	4639      	mov	r1, r7
 8005610:	f7fb fa62 	bl	8000ad8 <__aeabi_dcmpeq>
 8005614:	b110      	cbz	r0, 800561c <_dtoa_r+0x6c4>
 8005616:	9b01      	ldr	r3, [sp, #4]
 8005618:	07db      	lsls	r3, r3, #31
 800561a:	d40f      	bmi.n	800563c <_dtoa_r+0x6e4>
 800561c:	4651      	mov	r1, sl
 800561e:	4620      	mov	r0, r4
 8005620:	f000 fbcc 	bl	8005dbc <_Bfree>
 8005624:	2300      	movs	r3, #0
 8005626:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005628:	702b      	strb	r3, [r5, #0]
 800562a:	f10b 0301 	add.w	r3, fp, #1
 800562e:	6013      	str	r3, [r2, #0]
 8005630:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005632:	2b00      	cmp	r3, #0
 8005634:	f43f ace2 	beq.w	8004ffc <_dtoa_r+0xa4>
 8005638:	601d      	str	r5, [r3, #0]
 800563a:	e4df      	b.n	8004ffc <_dtoa_r+0xa4>
 800563c:	465f      	mov	r7, fp
 800563e:	462b      	mov	r3, r5
 8005640:	461d      	mov	r5, r3
 8005642:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005646:	2a39      	cmp	r2, #57	; 0x39
 8005648:	d106      	bne.n	8005658 <_dtoa_r+0x700>
 800564a:	9a00      	ldr	r2, [sp, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d1f7      	bne.n	8005640 <_dtoa_r+0x6e8>
 8005650:	9900      	ldr	r1, [sp, #0]
 8005652:	2230      	movs	r2, #48	; 0x30
 8005654:	3701      	adds	r7, #1
 8005656:	700a      	strb	r2, [r1, #0]
 8005658:	781a      	ldrb	r2, [r3, #0]
 800565a:	3201      	adds	r2, #1
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	e790      	b.n	8005582 <_dtoa_r+0x62a>
 8005660:	4ba3      	ldr	r3, [pc, #652]	; (80058f0 <_dtoa_r+0x998>)
 8005662:	2200      	movs	r2, #0
 8005664:	f7fa ffd0 	bl	8000608 <__aeabi_dmul>
 8005668:	2200      	movs	r2, #0
 800566a:	2300      	movs	r3, #0
 800566c:	4606      	mov	r6, r0
 800566e:	460f      	mov	r7, r1
 8005670:	f7fb fa32 	bl	8000ad8 <__aeabi_dcmpeq>
 8005674:	2800      	cmp	r0, #0
 8005676:	d09e      	beq.n	80055b6 <_dtoa_r+0x65e>
 8005678:	e7d0      	b.n	800561c <_dtoa_r+0x6c4>
 800567a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800567c:	2a00      	cmp	r2, #0
 800567e:	f000 80ca 	beq.w	8005816 <_dtoa_r+0x8be>
 8005682:	9a07      	ldr	r2, [sp, #28]
 8005684:	2a01      	cmp	r2, #1
 8005686:	f300 80ad 	bgt.w	80057e4 <_dtoa_r+0x88c>
 800568a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800568c:	2a00      	cmp	r2, #0
 800568e:	f000 80a5 	beq.w	80057dc <_dtoa_r+0x884>
 8005692:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005696:	9e08      	ldr	r6, [sp, #32]
 8005698:	9d05      	ldr	r5, [sp, #20]
 800569a:	9a05      	ldr	r2, [sp, #20]
 800569c:	441a      	add	r2, r3
 800569e:	9205      	str	r2, [sp, #20]
 80056a0:	9a06      	ldr	r2, [sp, #24]
 80056a2:	2101      	movs	r1, #1
 80056a4:	441a      	add	r2, r3
 80056a6:	4620      	mov	r0, r4
 80056a8:	9206      	str	r2, [sp, #24]
 80056aa:	f000 fc3d 	bl	8005f28 <__i2b>
 80056ae:	4607      	mov	r7, r0
 80056b0:	b165      	cbz	r5, 80056cc <_dtoa_r+0x774>
 80056b2:	9b06      	ldr	r3, [sp, #24]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	dd09      	ble.n	80056cc <_dtoa_r+0x774>
 80056b8:	42ab      	cmp	r3, r5
 80056ba:	9a05      	ldr	r2, [sp, #20]
 80056bc:	bfa8      	it	ge
 80056be:	462b      	movge	r3, r5
 80056c0:	1ad2      	subs	r2, r2, r3
 80056c2:	9205      	str	r2, [sp, #20]
 80056c4:	9a06      	ldr	r2, [sp, #24]
 80056c6:	1aed      	subs	r5, r5, r3
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	9306      	str	r3, [sp, #24]
 80056cc:	9b08      	ldr	r3, [sp, #32]
 80056ce:	b1f3      	cbz	r3, 800570e <_dtoa_r+0x7b6>
 80056d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 80a3 	beq.w	800581e <_dtoa_r+0x8c6>
 80056d8:	2e00      	cmp	r6, #0
 80056da:	dd10      	ble.n	80056fe <_dtoa_r+0x7a6>
 80056dc:	4639      	mov	r1, r7
 80056de:	4632      	mov	r2, r6
 80056e0:	4620      	mov	r0, r4
 80056e2:	f000 fce1 	bl	80060a8 <__pow5mult>
 80056e6:	4652      	mov	r2, sl
 80056e8:	4601      	mov	r1, r0
 80056ea:	4607      	mov	r7, r0
 80056ec:	4620      	mov	r0, r4
 80056ee:	f000 fc31 	bl	8005f54 <__multiply>
 80056f2:	4651      	mov	r1, sl
 80056f4:	4680      	mov	r8, r0
 80056f6:	4620      	mov	r0, r4
 80056f8:	f000 fb60 	bl	8005dbc <_Bfree>
 80056fc:	46c2      	mov	sl, r8
 80056fe:	9b08      	ldr	r3, [sp, #32]
 8005700:	1b9a      	subs	r2, r3, r6
 8005702:	d004      	beq.n	800570e <_dtoa_r+0x7b6>
 8005704:	4651      	mov	r1, sl
 8005706:	4620      	mov	r0, r4
 8005708:	f000 fcce 	bl	80060a8 <__pow5mult>
 800570c:	4682      	mov	sl, r0
 800570e:	2101      	movs	r1, #1
 8005710:	4620      	mov	r0, r4
 8005712:	f000 fc09 	bl	8005f28 <__i2b>
 8005716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005718:	2b00      	cmp	r3, #0
 800571a:	4606      	mov	r6, r0
 800571c:	f340 8081 	ble.w	8005822 <_dtoa_r+0x8ca>
 8005720:	461a      	mov	r2, r3
 8005722:	4601      	mov	r1, r0
 8005724:	4620      	mov	r0, r4
 8005726:	f000 fcbf 	bl	80060a8 <__pow5mult>
 800572a:	9b07      	ldr	r3, [sp, #28]
 800572c:	2b01      	cmp	r3, #1
 800572e:	4606      	mov	r6, r0
 8005730:	dd7a      	ble.n	8005828 <_dtoa_r+0x8d0>
 8005732:	f04f 0800 	mov.w	r8, #0
 8005736:	6933      	ldr	r3, [r6, #16]
 8005738:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800573c:	6918      	ldr	r0, [r3, #16]
 800573e:	f000 fba5 	bl	8005e8c <__hi0bits>
 8005742:	f1c0 0020 	rsb	r0, r0, #32
 8005746:	9b06      	ldr	r3, [sp, #24]
 8005748:	4418      	add	r0, r3
 800574a:	f010 001f 	ands.w	r0, r0, #31
 800574e:	f000 8094 	beq.w	800587a <_dtoa_r+0x922>
 8005752:	f1c0 0320 	rsb	r3, r0, #32
 8005756:	2b04      	cmp	r3, #4
 8005758:	f340 8085 	ble.w	8005866 <_dtoa_r+0x90e>
 800575c:	9b05      	ldr	r3, [sp, #20]
 800575e:	f1c0 001c 	rsb	r0, r0, #28
 8005762:	4403      	add	r3, r0
 8005764:	9305      	str	r3, [sp, #20]
 8005766:	9b06      	ldr	r3, [sp, #24]
 8005768:	4403      	add	r3, r0
 800576a:	4405      	add	r5, r0
 800576c:	9306      	str	r3, [sp, #24]
 800576e:	9b05      	ldr	r3, [sp, #20]
 8005770:	2b00      	cmp	r3, #0
 8005772:	dd05      	ble.n	8005780 <_dtoa_r+0x828>
 8005774:	4651      	mov	r1, sl
 8005776:	461a      	mov	r2, r3
 8005778:	4620      	mov	r0, r4
 800577a:	f000 fcef 	bl	800615c <__lshift>
 800577e:	4682      	mov	sl, r0
 8005780:	9b06      	ldr	r3, [sp, #24]
 8005782:	2b00      	cmp	r3, #0
 8005784:	dd05      	ble.n	8005792 <_dtoa_r+0x83a>
 8005786:	4631      	mov	r1, r6
 8005788:	461a      	mov	r2, r3
 800578a:	4620      	mov	r0, r4
 800578c:	f000 fce6 	bl	800615c <__lshift>
 8005790:	4606      	mov	r6, r0
 8005792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005794:	2b00      	cmp	r3, #0
 8005796:	d072      	beq.n	800587e <_dtoa_r+0x926>
 8005798:	4631      	mov	r1, r6
 800579a:	4650      	mov	r0, sl
 800579c:	f000 fd4a 	bl	8006234 <__mcmp>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	da6c      	bge.n	800587e <_dtoa_r+0x926>
 80057a4:	2300      	movs	r3, #0
 80057a6:	4651      	mov	r1, sl
 80057a8:	220a      	movs	r2, #10
 80057aa:	4620      	mov	r0, r4
 80057ac:	f000 fb28 	bl	8005e00 <__multadd>
 80057b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80057b6:	4682      	mov	sl, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 81b0 	beq.w	8005b1e <_dtoa_r+0xbc6>
 80057be:	2300      	movs	r3, #0
 80057c0:	4639      	mov	r1, r7
 80057c2:	220a      	movs	r2, #10
 80057c4:	4620      	mov	r0, r4
 80057c6:	f000 fb1b 	bl	8005e00 <__multadd>
 80057ca:	9b01      	ldr	r3, [sp, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	4607      	mov	r7, r0
 80057d0:	f300 8096 	bgt.w	8005900 <_dtoa_r+0x9a8>
 80057d4:	9b07      	ldr	r3, [sp, #28]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	dc59      	bgt.n	800588e <_dtoa_r+0x936>
 80057da:	e091      	b.n	8005900 <_dtoa_r+0x9a8>
 80057dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80057e2:	e758      	b.n	8005696 <_dtoa_r+0x73e>
 80057e4:	9b04      	ldr	r3, [sp, #16]
 80057e6:	1e5e      	subs	r6, r3, #1
 80057e8:	9b08      	ldr	r3, [sp, #32]
 80057ea:	42b3      	cmp	r3, r6
 80057ec:	bfbf      	itttt	lt
 80057ee:	9b08      	ldrlt	r3, [sp, #32]
 80057f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80057f2:	9608      	strlt	r6, [sp, #32]
 80057f4:	1af3      	sublt	r3, r6, r3
 80057f6:	bfb4      	ite	lt
 80057f8:	18d2      	addlt	r2, r2, r3
 80057fa:	1b9e      	subge	r6, r3, r6
 80057fc:	9b04      	ldr	r3, [sp, #16]
 80057fe:	bfbc      	itt	lt
 8005800:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005802:	2600      	movlt	r6, #0
 8005804:	2b00      	cmp	r3, #0
 8005806:	bfb7      	itett	lt
 8005808:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800580c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005810:	1a9d      	sublt	r5, r3, r2
 8005812:	2300      	movlt	r3, #0
 8005814:	e741      	b.n	800569a <_dtoa_r+0x742>
 8005816:	9e08      	ldr	r6, [sp, #32]
 8005818:	9d05      	ldr	r5, [sp, #20]
 800581a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800581c:	e748      	b.n	80056b0 <_dtoa_r+0x758>
 800581e:	9a08      	ldr	r2, [sp, #32]
 8005820:	e770      	b.n	8005704 <_dtoa_r+0x7ac>
 8005822:	9b07      	ldr	r3, [sp, #28]
 8005824:	2b01      	cmp	r3, #1
 8005826:	dc19      	bgt.n	800585c <_dtoa_r+0x904>
 8005828:	9b02      	ldr	r3, [sp, #8]
 800582a:	b9bb      	cbnz	r3, 800585c <_dtoa_r+0x904>
 800582c:	9b03      	ldr	r3, [sp, #12]
 800582e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005832:	b99b      	cbnz	r3, 800585c <_dtoa_r+0x904>
 8005834:	9b03      	ldr	r3, [sp, #12]
 8005836:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800583a:	0d1b      	lsrs	r3, r3, #20
 800583c:	051b      	lsls	r3, r3, #20
 800583e:	b183      	cbz	r3, 8005862 <_dtoa_r+0x90a>
 8005840:	9b05      	ldr	r3, [sp, #20]
 8005842:	3301      	adds	r3, #1
 8005844:	9305      	str	r3, [sp, #20]
 8005846:	9b06      	ldr	r3, [sp, #24]
 8005848:	3301      	adds	r3, #1
 800584a:	9306      	str	r3, [sp, #24]
 800584c:	f04f 0801 	mov.w	r8, #1
 8005850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005852:	2b00      	cmp	r3, #0
 8005854:	f47f af6f 	bne.w	8005736 <_dtoa_r+0x7de>
 8005858:	2001      	movs	r0, #1
 800585a:	e774      	b.n	8005746 <_dtoa_r+0x7ee>
 800585c:	f04f 0800 	mov.w	r8, #0
 8005860:	e7f6      	b.n	8005850 <_dtoa_r+0x8f8>
 8005862:	4698      	mov	r8, r3
 8005864:	e7f4      	b.n	8005850 <_dtoa_r+0x8f8>
 8005866:	d082      	beq.n	800576e <_dtoa_r+0x816>
 8005868:	9a05      	ldr	r2, [sp, #20]
 800586a:	331c      	adds	r3, #28
 800586c:	441a      	add	r2, r3
 800586e:	9205      	str	r2, [sp, #20]
 8005870:	9a06      	ldr	r2, [sp, #24]
 8005872:	441a      	add	r2, r3
 8005874:	441d      	add	r5, r3
 8005876:	9206      	str	r2, [sp, #24]
 8005878:	e779      	b.n	800576e <_dtoa_r+0x816>
 800587a:	4603      	mov	r3, r0
 800587c:	e7f4      	b.n	8005868 <_dtoa_r+0x910>
 800587e:	9b04      	ldr	r3, [sp, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	dc37      	bgt.n	80058f4 <_dtoa_r+0x99c>
 8005884:	9b07      	ldr	r3, [sp, #28]
 8005886:	2b02      	cmp	r3, #2
 8005888:	dd34      	ble.n	80058f4 <_dtoa_r+0x99c>
 800588a:	9b04      	ldr	r3, [sp, #16]
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	9b01      	ldr	r3, [sp, #4]
 8005890:	b963      	cbnz	r3, 80058ac <_dtoa_r+0x954>
 8005892:	4631      	mov	r1, r6
 8005894:	2205      	movs	r2, #5
 8005896:	4620      	mov	r0, r4
 8005898:	f000 fab2 	bl	8005e00 <__multadd>
 800589c:	4601      	mov	r1, r0
 800589e:	4606      	mov	r6, r0
 80058a0:	4650      	mov	r0, sl
 80058a2:	f000 fcc7 	bl	8006234 <__mcmp>
 80058a6:	2800      	cmp	r0, #0
 80058a8:	f73f adbb 	bgt.w	8005422 <_dtoa_r+0x4ca>
 80058ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ae:	9d00      	ldr	r5, [sp, #0]
 80058b0:	ea6f 0b03 	mvn.w	fp, r3
 80058b4:	f04f 0800 	mov.w	r8, #0
 80058b8:	4631      	mov	r1, r6
 80058ba:	4620      	mov	r0, r4
 80058bc:	f000 fa7e 	bl	8005dbc <_Bfree>
 80058c0:	2f00      	cmp	r7, #0
 80058c2:	f43f aeab 	beq.w	800561c <_dtoa_r+0x6c4>
 80058c6:	f1b8 0f00 	cmp.w	r8, #0
 80058ca:	d005      	beq.n	80058d8 <_dtoa_r+0x980>
 80058cc:	45b8      	cmp	r8, r7
 80058ce:	d003      	beq.n	80058d8 <_dtoa_r+0x980>
 80058d0:	4641      	mov	r1, r8
 80058d2:	4620      	mov	r0, r4
 80058d4:	f000 fa72 	bl	8005dbc <_Bfree>
 80058d8:	4639      	mov	r1, r7
 80058da:	4620      	mov	r0, r4
 80058dc:	f000 fa6e 	bl	8005dbc <_Bfree>
 80058e0:	e69c      	b.n	800561c <_dtoa_r+0x6c4>
 80058e2:	2600      	movs	r6, #0
 80058e4:	4637      	mov	r7, r6
 80058e6:	e7e1      	b.n	80058ac <_dtoa_r+0x954>
 80058e8:	46bb      	mov	fp, r7
 80058ea:	4637      	mov	r7, r6
 80058ec:	e599      	b.n	8005422 <_dtoa_r+0x4ca>
 80058ee:	bf00      	nop
 80058f0:	40240000 	.word	0x40240000
 80058f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 80c8 	beq.w	8005a8c <_dtoa_r+0xb34>
 80058fc:	9b04      	ldr	r3, [sp, #16]
 80058fe:	9301      	str	r3, [sp, #4]
 8005900:	2d00      	cmp	r5, #0
 8005902:	dd05      	ble.n	8005910 <_dtoa_r+0x9b8>
 8005904:	4639      	mov	r1, r7
 8005906:	462a      	mov	r2, r5
 8005908:	4620      	mov	r0, r4
 800590a:	f000 fc27 	bl	800615c <__lshift>
 800590e:	4607      	mov	r7, r0
 8005910:	f1b8 0f00 	cmp.w	r8, #0
 8005914:	d05b      	beq.n	80059ce <_dtoa_r+0xa76>
 8005916:	6879      	ldr	r1, [r7, #4]
 8005918:	4620      	mov	r0, r4
 800591a:	f000 fa0f 	bl	8005d3c <_Balloc>
 800591e:	4605      	mov	r5, r0
 8005920:	b928      	cbnz	r0, 800592e <_dtoa_r+0x9d6>
 8005922:	4b83      	ldr	r3, [pc, #524]	; (8005b30 <_dtoa_r+0xbd8>)
 8005924:	4602      	mov	r2, r0
 8005926:	f240 21ef 	movw	r1, #751	; 0x2ef
 800592a:	f7ff bb2e 	b.w	8004f8a <_dtoa_r+0x32>
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	3202      	adds	r2, #2
 8005932:	0092      	lsls	r2, r2, #2
 8005934:	f107 010c 	add.w	r1, r7, #12
 8005938:	300c      	adds	r0, #12
 800593a:	f7ff fa76 	bl	8004e2a <memcpy>
 800593e:	2201      	movs	r2, #1
 8005940:	4629      	mov	r1, r5
 8005942:	4620      	mov	r0, r4
 8005944:	f000 fc0a 	bl	800615c <__lshift>
 8005948:	9b00      	ldr	r3, [sp, #0]
 800594a:	3301      	adds	r3, #1
 800594c:	9304      	str	r3, [sp, #16]
 800594e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005952:	4413      	add	r3, r2
 8005954:	9308      	str	r3, [sp, #32]
 8005956:	9b02      	ldr	r3, [sp, #8]
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	46b8      	mov	r8, r7
 800595e:	9306      	str	r3, [sp, #24]
 8005960:	4607      	mov	r7, r0
 8005962:	9b04      	ldr	r3, [sp, #16]
 8005964:	4631      	mov	r1, r6
 8005966:	3b01      	subs	r3, #1
 8005968:	4650      	mov	r0, sl
 800596a:	9301      	str	r3, [sp, #4]
 800596c:	f7ff fa6b 	bl	8004e46 <quorem>
 8005970:	4641      	mov	r1, r8
 8005972:	9002      	str	r0, [sp, #8]
 8005974:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005978:	4650      	mov	r0, sl
 800597a:	f000 fc5b 	bl	8006234 <__mcmp>
 800597e:	463a      	mov	r2, r7
 8005980:	9005      	str	r0, [sp, #20]
 8005982:	4631      	mov	r1, r6
 8005984:	4620      	mov	r0, r4
 8005986:	f000 fc71 	bl	800626c <__mdiff>
 800598a:	68c2      	ldr	r2, [r0, #12]
 800598c:	4605      	mov	r5, r0
 800598e:	bb02      	cbnz	r2, 80059d2 <_dtoa_r+0xa7a>
 8005990:	4601      	mov	r1, r0
 8005992:	4650      	mov	r0, sl
 8005994:	f000 fc4e 	bl	8006234 <__mcmp>
 8005998:	4602      	mov	r2, r0
 800599a:	4629      	mov	r1, r5
 800599c:	4620      	mov	r0, r4
 800599e:	9209      	str	r2, [sp, #36]	; 0x24
 80059a0:	f000 fa0c 	bl	8005dbc <_Bfree>
 80059a4:	9b07      	ldr	r3, [sp, #28]
 80059a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059a8:	9d04      	ldr	r5, [sp, #16]
 80059aa:	ea43 0102 	orr.w	r1, r3, r2
 80059ae:	9b06      	ldr	r3, [sp, #24]
 80059b0:	4319      	orrs	r1, r3
 80059b2:	d110      	bne.n	80059d6 <_dtoa_r+0xa7e>
 80059b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80059b8:	d029      	beq.n	8005a0e <_dtoa_r+0xab6>
 80059ba:	9b05      	ldr	r3, [sp, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	dd02      	ble.n	80059c6 <_dtoa_r+0xa6e>
 80059c0:	9b02      	ldr	r3, [sp, #8]
 80059c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80059c6:	9b01      	ldr	r3, [sp, #4]
 80059c8:	f883 9000 	strb.w	r9, [r3]
 80059cc:	e774      	b.n	80058b8 <_dtoa_r+0x960>
 80059ce:	4638      	mov	r0, r7
 80059d0:	e7ba      	b.n	8005948 <_dtoa_r+0x9f0>
 80059d2:	2201      	movs	r2, #1
 80059d4:	e7e1      	b.n	800599a <_dtoa_r+0xa42>
 80059d6:	9b05      	ldr	r3, [sp, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	db04      	blt.n	80059e6 <_dtoa_r+0xa8e>
 80059dc:	9907      	ldr	r1, [sp, #28]
 80059de:	430b      	orrs	r3, r1
 80059e0:	9906      	ldr	r1, [sp, #24]
 80059e2:	430b      	orrs	r3, r1
 80059e4:	d120      	bne.n	8005a28 <_dtoa_r+0xad0>
 80059e6:	2a00      	cmp	r2, #0
 80059e8:	dded      	ble.n	80059c6 <_dtoa_r+0xa6e>
 80059ea:	4651      	mov	r1, sl
 80059ec:	2201      	movs	r2, #1
 80059ee:	4620      	mov	r0, r4
 80059f0:	f000 fbb4 	bl	800615c <__lshift>
 80059f4:	4631      	mov	r1, r6
 80059f6:	4682      	mov	sl, r0
 80059f8:	f000 fc1c 	bl	8006234 <__mcmp>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	dc03      	bgt.n	8005a08 <_dtoa_r+0xab0>
 8005a00:	d1e1      	bne.n	80059c6 <_dtoa_r+0xa6e>
 8005a02:	f019 0f01 	tst.w	r9, #1
 8005a06:	d0de      	beq.n	80059c6 <_dtoa_r+0xa6e>
 8005a08:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a0c:	d1d8      	bne.n	80059c0 <_dtoa_r+0xa68>
 8005a0e:	9a01      	ldr	r2, [sp, #4]
 8005a10:	2339      	movs	r3, #57	; 0x39
 8005a12:	7013      	strb	r3, [r2, #0]
 8005a14:	462b      	mov	r3, r5
 8005a16:	461d      	mov	r5, r3
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a1e:	2a39      	cmp	r2, #57	; 0x39
 8005a20:	d06c      	beq.n	8005afc <_dtoa_r+0xba4>
 8005a22:	3201      	adds	r2, #1
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	e747      	b.n	80058b8 <_dtoa_r+0x960>
 8005a28:	2a00      	cmp	r2, #0
 8005a2a:	dd07      	ble.n	8005a3c <_dtoa_r+0xae4>
 8005a2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a30:	d0ed      	beq.n	8005a0e <_dtoa_r+0xab6>
 8005a32:	9a01      	ldr	r2, [sp, #4]
 8005a34:	f109 0301 	add.w	r3, r9, #1
 8005a38:	7013      	strb	r3, [r2, #0]
 8005a3a:	e73d      	b.n	80058b8 <_dtoa_r+0x960>
 8005a3c:	9b04      	ldr	r3, [sp, #16]
 8005a3e:	9a08      	ldr	r2, [sp, #32]
 8005a40:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d043      	beq.n	8005ad0 <_dtoa_r+0xb78>
 8005a48:	4651      	mov	r1, sl
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	220a      	movs	r2, #10
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f000 f9d6 	bl	8005e00 <__multadd>
 8005a54:	45b8      	cmp	r8, r7
 8005a56:	4682      	mov	sl, r0
 8005a58:	f04f 0300 	mov.w	r3, #0
 8005a5c:	f04f 020a 	mov.w	r2, #10
 8005a60:	4641      	mov	r1, r8
 8005a62:	4620      	mov	r0, r4
 8005a64:	d107      	bne.n	8005a76 <_dtoa_r+0xb1e>
 8005a66:	f000 f9cb 	bl	8005e00 <__multadd>
 8005a6a:	4680      	mov	r8, r0
 8005a6c:	4607      	mov	r7, r0
 8005a6e:	9b04      	ldr	r3, [sp, #16]
 8005a70:	3301      	adds	r3, #1
 8005a72:	9304      	str	r3, [sp, #16]
 8005a74:	e775      	b.n	8005962 <_dtoa_r+0xa0a>
 8005a76:	f000 f9c3 	bl	8005e00 <__multadd>
 8005a7a:	4639      	mov	r1, r7
 8005a7c:	4680      	mov	r8, r0
 8005a7e:	2300      	movs	r3, #0
 8005a80:	220a      	movs	r2, #10
 8005a82:	4620      	mov	r0, r4
 8005a84:	f000 f9bc 	bl	8005e00 <__multadd>
 8005a88:	4607      	mov	r7, r0
 8005a8a:	e7f0      	b.n	8005a6e <_dtoa_r+0xb16>
 8005a8c:	9b04      	ldr	r3, [sp, #16]
 8005a8e:	9301      	str	r3, [sp, #4]
 8005a90:	9d00      	ldr	r5, [sp, #0]
 8005a92:	4631      	mov	r1, r6
 8005a94:	4650      	mov	r0, sl
 8005a96:	f7ff f9d6 	bl	8004e46 <quorem>
 8005a9a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005a9e:	9b00      	ldr	r3, [sp, #0]
 8005aa0:	f805 9b01 	strb.w	r9, [r5], #1
 8005aa4:	1aea      	subs	r2, r5, r3
 8005aa6:	9b01      	ldr	r3, [sp, #4]
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	dd07      	ble.n	8005abc <_dtoa_r+0xb64>
 8005aac:	4651      	mov	r1, sl
 8005aae:	2300      	movs	r3, #0
 8005ab0:	220a      	movs	r2, #10
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f000 f9a4 	bl	8005e00 <__multadd>
 8005ab8:	4682      	mov	sl, r0
 8005aba:	e7ea      	b.n	8005a92 <_dtoa_r+0xb3a>
 8005abc:	9b01      	ldr	r3, [sp, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	bfc8      	it	gt
 8005ac2:	461d      	movgt	r5, r3
 8005ac4:	9b00      	ldr	r3, [sp, #0]
 8005ac6:	bfd8      	it	le
 8005ac8:	2501      	movle	r5, #1
 8005aca:	441d      	add	r5, r3
 8005acc:	f04f 0800 	mov.w	r8, #0
 8005ad0:	4651      	mov	r1, sl
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f000 fb41 	bl	800615c <__lshift>
 8005ada:	4631      	mov	r1, r6
 8005adc:	4682      	mov	sl, r0
 8005ade:	f000 fba9 	bl	8006234 <__mcmp>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	dc96      	bgt.n	8005a14 <_dtoa_r+0xabc>
 8005ae6:	d102      	bne.n	8005aee <_dtoa_r+0xb96>
 8005ae8:	f019 0f01 	tst.w	r9, #1
 8005aec:	d192      	bne.n	8005a14 <_dtoa_r+0xabc>
 8005aee:	462b      	mov	r3, r5
 8005af0:	461d      	mov	r5, r3
 8005af2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005af6:	2a30      	cmp	r2, #48	; 0x30
 8005af8:	d0fa      	beq.n	8005af0 <_dtoa_r+0xb98>
 8005afa:	e6dd      	b.n	80058b8 <_dtoa_r+0x960>
 8005afc:	9a00      	ldr	r2, [sp, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d189      	bne.n	8005a16 <_dtoa_r+0xabe>
 8005b02:	f10b 0b01 	add.w	fp, fp, #1
 8005b06:	2331      	movs	r3, #49	; 0x31
 8005b08:	e796      	b.n	8005a38 <_dtoa_r+0xae0>
 8005b0a:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <_dtoa_r+0xbdc>)
 8005b0c:	f7ff ba99 	b.w	8005042 <_dtoa_r+0xea>
 8005b10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f47f aa6d 	bne.w	8004ff2 <_dtoa_r+0x9a>
 8005b18:	4b07      	ldr	r3, [pc, #28]	; (8005b38 <_dtoa_r+0xbe0>)
 8005b1a:	f7ff ba92 	b.w	8005042 <_dtoa_r+0xea>
 8005b1e:	9b01      	ldr	r3, [sp, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	dcb5      	bgt.n	8005a90 <_dtoa_r+0xb38>
 8005b24:	9b07      	ldr	r3, [sp, #28]
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	f73f aeb1 	bgt.w	800588e <_dtoa_r+0x936>
 8005b2c:	e7b0      	b.n	8005a90 <_dtoa_r+0xb38>
 8005b2e:	bf00      	nop
 8005b30:	0800713c 	.word	0x0800713c
 8005b34:	0800709c 	.word	0x0800709c
 8005b38:	080070c0 	.word	0x080070c0

08005b3c <_free_r>:
 8005b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b3e:	2900      	cmp	r1, #0
 8005b40:	d044      	beq.n	8005bcc <_free_r+0x90>
 8005b42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b46:	9001      	str	r0, [sp, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f1a1 0404 	sub.w	r4, r1, #4
 8005b4e:	bfb8      	it	lt
 8005b50:	18e4      	addlt	r4, r4, r3
 8005b52:	f000 f8e7 	bl	8005d24 <__malloc_lock>
 8005b56:	4a1e      	ldr	r2, [pc, #120]	; (8005bd0 <_free_r+0x94>)
 8005b58:	9801      	ldr	r0, [sp, #4]
 8005b5a:	6813      	ldr	r3, [r2, #0]
 8005b5c:	b933      	cbnz	r3, 8005b6c <_free_r+0x30>
 8005b5e:	6063      	str	r3, [r4, #4]
 8005b60:	6014      	str	r4, [r2, #0]
 8005b62:	b003      	add	sp, #12
 8005b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b68:	f000 b8e2 	b.w	8005d30 <__malloc_unlock>
 8005b6c:	42a3      	cmp	r3, r4
 8005b6e:	d908      	bls.n	8005b82 <_free_r+0x46>
 8005b70:	6825      	ldr	r5, [r4, #0]
 8005b72:	1961      	adds	r1, r4, r5
 8005b74:	428b      	cmp	r3, r1
 8005b76:	bf01      	itttt	eq
 8005b78:	6819      	ldreq	r1, [r3, #0]
 8005b7a:	685b      	ldreq	r3, [r3, #4]
 8005b7c:	1949      	addeq	r1, r1, r5
 8005b7e:	6021      	streq	r1, [r4, #0]
 8005b80:	e7ed      	b.n	8005b5e <_free_r+0x22>
 8005b82:	461a      	mov	r2, r3
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	b10b      	cbz	r3, 8005b8c <_free_r+0x50>
 8005b88:	42a3      	cmp	r3, r4
 8005b8a:	d9fa      	bls.n	8005b82 <_free_r+0x46>
 8005b8c:	6811      	ldr	r1, [r2, #0]
 8005b8e:	1855      	adds	r5, r2, r1
 8005b90:	42a5      	cmp	r5, r4
 8005b92:	d10b      	bne.n	8005bac <_free_r+0x70>
 8005b94:	6824      	ldr	r4, [r4, #0]
 8005b96:	4421      	add	r1, r4
 8005b98:	1854      	adds	r4, r2, r1
 8005b9a:	42a3      	cmp	r3, r4
 8005b9c:	6011      	str	r1, [r2, #0]
 8005b9e:	d1e0      	bne.n	8005b62 <_free_r+0x26>
 8005ba0:	681c      	ldr	r4, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	6053      	str	r3, [r2, #4]
 8005ba6:	440c      	add	r4, r1
 8005ba8:	6014      	str	r4, [r2, #0]
 8005baa:	e7da      	b.n	8005b62 <_free_r+0x26>
 8005bac:	d902      	bls.n	8005bb4 <_free_r+0x78>
 8005bae:	230c      	movs	r3, #12
 8005bb0:	6003      	str	r3, [r0, #0]
 8005bb2:	e7d6      	b.n	8005b62 <_free_r+0x26>
 8005bb4:	6825      	ldr	r5, [r4, #0]
 8005bb6:	1961      	adds	r1, r4, r5
 8005bb8:	428b      	cmp	r3, r1
 8005bba:	bf04      	itt	eq
 8005bbc:	6819      	ldreq	r1, [r3, #0]
 8005bbe:	685b      	ldreq	r3, [r3, #4]
 8005bc0:	6063      	str	r3, [r4, #4]
 8005bc2:	bf04      	itt	eq
 8005bc4:	1949      	addeq	r1, r1, r5
 8005bc6:	6021      	streq	r1, [r4, #0]
 8005bc8:	6054      	str	r4, [r2, #4]
 8005bca:	e7ca      	b.n	8005b62 <_free_r+0x26>
 8005bcc:	b003      	add	sp, #12
 8005bce:	bd30      	pop	{r4, r5, pc}
 8005bd0:	2000040c 	.word	0x2000040c

08005bd4 <malloc>:
 8005bd4:	4b02      	ldr	r3, [pc, #8]	; (8005be0 <malloc+0xc>)
 8005bd6:	4601      	mov	r1, r0
 8005bd8:	6818      	ldr	r0, [r3, #0]
 8005bda:	f000 b823 	b.w	8005c24 <_malloc_r>
 8005bde:	bf00      	nop
 8005be0:	20000064 	.word	0x20000064

08005be4 <sbrk_aligned>:
 8005be4:	b570      	push	{r4, r5, r6, lr}
 8005be6:	4e0e      	ldr	r6, [pc, #56]	; (8005c20 <sbrk_aligned+0x3c>)
 8005be8:	460c      	mov	r4, r1
 8005bea:	6831      	ldr	r1, [r6, #0]
 8005bec:	4605      	mov	r5, r0
 8005bee:	b911      	cbnz	r1, 8005bf6 <sbrk_aligned+0x12>
 8005bf0:	f000 fe40 	bl	8006874 <_sbrk_r>
 8005bf4:	6030      	str	r0, [r6, #0]
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	f000 fe3b 	bl	8006874 <_sbrk_r>
 8005bfe:	1c43      	adds	r3, r0, #1
 8005c00:	d00a      	beq.n	8005c18 <sbrk_aligned+0x34>
 8005c02:	1cc4      	adds	r4, r0, #3
 8005c04:	f024 0403 	bic.w	r4, r4, #3
 8005c08:	42a0      	cmp	r0, r4
 8005c0a:	d007      	beq.n	8005c1c <sbrk_aligned+0x38>
 8005c0c:	1a21      	subs	r1, r4, r0
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f000 fe30 	bl	8006874 <_sbrk_r>
 8005c14:	3001      	adds	r0, #1
 8005c16:	d101      	bne.n	8005c1c <sbrk_aligned+0x38>
 8005c18:	f04f 34ff 	mov.w	r4, #4294967295
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	bd70      	pop	{r4, r5, r6, pc}
 8005c20:	20000410 	.word	0x20000410

08005c24 <_malloc_r>:
 8005c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c28:	1ccd      	adds	r5, r1, #3
 8005c2a:	f025 0503 	bic.w	r5, r5, #3
 8005c2e:	3508      	adds	r5, #8
 8005c30:	2d0c      	cmp	r5, #12
 8005c32:	bf38      	it	cc
 8005c34:	250c      	movcc	r5, #12
 8005c36:	2d00      	cmp	r5, #0
 8005c38:	4607      	mov	r7, r0
 8005c3a:	db01      	blt.n	8005c40 <_malloc_r+0x1c>
 8005c3c:	42a9      	cmp	r1, r5
 8005c3e:	d905      	bls.n	8005c4c <_malloc_r+0x28>
 8005c40:	230c      	movs	r3, #12
 8005c42:	603b      	str	r3, [r7, #0]
 8005c44:	2600      	movs	r6, #0
 8005c46:	4630      	mov	r0, r6
 8005c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d20 <_malloc_r+0xfc>
 8005c50:	f000 f868 	bl	8005d24 <__malloc_lock>
 8005c54:	f8d8 3000 	ldr.w	r3, [r8]
 8005c58:	461c      	mov	r4, r3
 8005c5a:	bb5c      	cbnz	r4, 8005cb4 <_malloc_r+0x90>
 8005c5c:	4629      	mov	r1, r5
 8005c5e:	4638      	mov	r0, r7
 8005c60:	f7ff ffc0 	bl	8005be4 <sbrk_aligned>
 8005c64:	1c43      	adds	r3, r0, #1
 8005c66:	4604      	mov	r4, r0
 8005c68:	d155      	bne.n	8005d16 <_malloc_r+0xf2>
 8005c6a:	f8d8 4000 	ldr.w	r4, [r8]
 8005c6e:	4626      	mov	r6, r4
 8005c70:	2e00      	cmp	r6, #0
 8005c72:	d145      	bne.n	8005d00 <_malloc_r+0xdc>
 8005c74:	2c00      	cmp	r4, #0
 8005c76:	d048      	beq.n	8005d0a <_malloc_r+0xe6>
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	4638      	mov	r0, r7
 8005c7e:	eb04 0903 	add.w	r9, r4, r3
 8005c82:	f000 fdf7 	bl	8006874 <_sbrk_r>
 8005c86:	4581      	cmp	r9, r0
 8005c88:	d13f      	bne.n	8005d0a <_malloc_r+0xe6>
 8005c8a:	6821      	ldr	r1, [r4, #0]
 8005c8c:	1a6d      	subs	r5, r5, r1
 8005c8e:	4629      	mov	r1, r5
 8005c90:	4638      	mov	r0, r7
 8005c92:	f7ff ffa7 	bl	8005be4 <sbrk_aligned>
 8005c96:	3001      	adds	r0, #1
 8005c98:	d037      	beq.n	8005d0a <_malloc_r+0xe6>
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	442b      	add	r3, r5
 8005c9e:	6023      	str	r3, [r4, #0]
 8005ca0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d038      	beq.n	8005d1a <_malloc_r+0xf6>
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	42a2      	cmp	r2, r4
 8005cac:	d12b      	bne.n	8005d06 <_malloc_r+0xe2>
 8005cae:	2200      	movs	r2, #0
 8005cb0:	605a      	str	r2, [r3, #4]
 8005cb2:	e00f      	b.n	8005cd4 <_malloc_r+0xb0>
 8005cb4:	6822      	ldr	r2, [r4, #0]
 8005cb6:	1b52      	subs	r2, r2, r5
 8005cb8:	d41f      	bmi.n	8005cfa <_malloc_r+0xd6>
 8005cba:	2a0b      	cmp	r2, #11
 8005cbc:	d917      	bls.n	8005cee <_malloc_r+0xca>
 8005cbe:	1961      	adds	r1, r4, r5
 8005cc0:	42a3      	cmp	r3, r4
 8005cc2:	6025      	str	r5, [r4, #0]
 8005cc4:	bf18      	it	ne
 8005cc6:	6059      	strne	r1, [r3, #4]
 8005cc8:	6863      	ldr	r3, [r4, #4]
 8005cca:	bf08      	it	eq
 8005ccc:	f8c8 1000 	streq.w	r1, [r8]
 8005cd0:	5162      	str	r2, [r4, r5]
 8005cd2:	604b      	str	r3, [r1, #4]
 8005cd4:	4638      	mov	r0, r7
 8005cd6:	f104 060b 	add.w	r6, r4, #11
 8005cda:	f000 f829 	bl	8005d30 <__malloc_unlock>
 8005cde:	f026 0607 	bic.w	r6, r6, #7
 8005ce2:	1d23      	adds	r3, r4, #4
 8005ce4:	1af2      	subs	r2, r6, r3
 8005ce6:	d0ae      	beq.n	8005c46 <_malloc_r+0x22>
 8005ce8:	1b9b      	subs	r3, r3, r6
 8005cea:	50a3      	str	r3, [r4, r2]
 8005cec:	e7ab      	b.n	8005c46 <_malloc_r+0x22>
 8005cee:	42a3      	cmp	r3, r4
 8005cf0:	6862      	ldr	r2, [r4, #4]
 8005cf2:	d1dd      	bne.n	8005cb0 <_malloc_r+0x8c>
 8005cf4:	f8c8 2000 	str.w	r2, [r8]
 8005cf8:	e7ec      	b.n	8005cd4 <_malloc_r+0xb0>
 8005cfa:	4623      	mov	r3, r4
 8005cfc:	6864      	ldr	r4, [r4, #4]
 8005cfe:	e7ac      	b.n	8005c5a <_malloc_r+0x36>
 8005d00:	4634      	mov	r4, r6
 8005d02:	6876      	ldr	r6, [r6, #4]
 8005d04:	e7b4      	b.n	8005c70 <_malloc_r+0x4c>
 8005d06:	4613      	mov	r3, r2
 8005d08:	e7cc      	b.n	8005ca4 <_malloc_r+0x80>
 8005d0a:	230c      	movs	r3, #12
 8005d0c:	603b      	str	r3, [r7, #0]
 8005d0e:	4638      	mov	r0, r7
 8005d10:	f000 f80e 	bl	8005d30 <__malloc_unlock>
 8005d14:	e797      	b.n	8005c46 <_malloc_r+0x22>
 8005d16:	6025      	str	r5, [r4, #0]
 8005d18:	e7dc      	b.n	8005cd4 <_malloc_r+0xb0>
 8005d1a:	605b      	str	r3, [r3, #4]
 8005d1c:	deff      	udf	#255	; 0xff
 8005d1e:	bf00      	nop
 8005d20:	2000040c 	.word	0x2000040c

08005d24 <__malloc_lock>:
 8005d24:	4801      	ldr	r0, [pc, #4]	; (8005d2c <__malloc_lock+0x8>)
 8005d26:	f7ff b87e 	b.w	8004e26 <__retarget_lock_acquire_recursive>
 8005d2a:	bf00      	nop
 8005d2c:	20000408 	.word	0x20000408

08005d30 <__malloc_unlock>:
 8005d30:	4801      	ldr	r0, [pc, #4]	; (8005d38 <__malloc_unlock+0x8>)
 8005d32:	f7ff b879 	b.w	8004e28 <__retarget_lock_release_recursive>
 8005d36:	bf00      	nop
 8005d38:	20000408 	.word	0x20000408

08005d3c <_Balloc>:
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	69c6      	ldr	r6, [r0, #28]
 8005d40:	4604      	mov	r4, r0
 8005d42:	460d      	mov	r5, r1
 8005d44:	b976      	cbnz	r6, 8005d64 <_Balloc+0x28>
 8005d46:	2010      	movs	r0, #16
 8005d48:	f7ff ff44 	bl	8005bd4 <malloc>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	61e0      	str	r0, [r4, #28]
 8005d50:	b920      	cbnz	r0, 8005d5c <_Balloc+0x20>
 8005d52:	4b18      	ldr	r3, [pc, #96]	; (8005db4 <_Balloc+0x78>)
 8005d54:	4818      	ldr	r0, [pc, #96]	; (8005db8 <_Balloc+0x7c>)
 8005d56:	216b      	movs	r1, #107	; 0x6b
 8005d58:	f000 fd9c 	bl	8006894 <__assert_func>
 8005d5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d60:	6006      	str	r6, [r0, #0]
 8005d62:	60c6      	str	r6, [r0, #12]
 8005d64:	69e6      	ldr	r6, [r4, #28]
 8005d66:	68f3      	ldr	r3, [r6, #12]
 8005d68:	b183      	cbz	r3, 8005d8c <_Balloc+0x50>
 8005d6a:	69e3      	ldr	r3, [r4, #28]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d72:	b9b8      	cbnz	r0, 8005da4 <_Balloc+0x68>
 8005d74:	2101      	movs	r1, #1
 8005d76:	fa01 f605 	lsl.w	r6, r1, r5
 8005d7a:	1d72      	adds	r2, r6, #5
 8005d7c:	0092      	lsls	r2, r2, #2
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f000 fda6 	bl	80068d0 <_calloc_r>
 8005d84:	b160      	cbz	r0, 8005da0 <_Balloc+0x64>
 8005d86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d8a:	e00e      	b.n	8005daa <_Balloc+0x6e>
 8005d8c:	2221      	movs	r2, #33	; 0x21
 8005d8e:	2104      	movs	r1, #4
 8005d90:	4620      	mov	r0, r4
 8005d92:	f000 fd9d 	bl	80068d0 <_calloc_r>
 8005d96:	69e3      	ldr	r3, [r4, #28]
 8005d98:	60f0      	str	r0, [r6, #12]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1e4      	bne.n	8005d6a <_Balloc+0x2e>
 8005da0:	2000      	movs	r0, #0
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	6802      	ldr	r2, [r0, #0]
 8005da6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005daa:	2300      	movs	r3, #0
 8005dac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005db0:	e7f7      	b.n	8005da2 <_Balloc+0x66>
 8005db2:	bf00      	nop
 8005db4:	080070cd 	.word	0x080070cd
 8005db8:	0800714d 	.word	0x0800714d

08005dbc <_Bfree>:
 8005dbc:	b570      	push	{r4, r5, r6, lr}
 8005dbe:	69c6      	ldr	r6, [r0, #28]
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	b976      	cbnz	r6, 8005de4 <_Bfree+0x28>
 8005dc6:	2010      	movs	r0, #16
 8005dc8:	f7ff ff04 	bl	8005bd4 <malloc>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	61e8      	str	r0, [r5, #28]
 8005dd0:	b920      	cbnz	r0, 8005ddc <_Bfree+0x20>
 8005dd2:	4b09      	ldr	r3, [pc, #36]	; (8005df8 <_Bfree+0x3c>)
 8005dd4:	4809      	ldr	r0, [pc, #36]	; (8005dfc <_Bfree+0x40>)
 8005dd6:	218f      	movs	r1, #143	; 0x8f
 8005dd8:	f000 fd5c 	bl	8006894 <__assert_func>
 8005ddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005de0:	6006      	str	r6, [r0, #0]
 8005de2:	60c6      	str	r6, [r0, #12]
 8005de4:	b13c      	cbz	r4, 8005df6 <_Bfree+0x3a>
 8005de6:	69eb      	ldr	r3, [r5, #28]
 8005de8:	6862      	ldr	r2, [r4, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005df0:	6021      	str	r1, [r4, #0]
 8005df2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005df6:	bd70      	pop	{r4, r5, r6, pc}
 8005df8:	080070cd 	.word	0x080070cd
 8005dfc:	0800714d 	.word	0x0800714d

08005e00 <__multadd>:
 8005e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e04:	690d      	ldr	r5, [r1, #16]
 8005e06:	4607      	mov	r7, r0
 8005e08:	460c      	mov	r4, r1
 8005e0a:	461e      	mov	r6, r3
 8005e0c:	f101 0c14 	add.w	ip, r1, #20
 8005e10:	2000      	movs	r0, #0
 8005e12:	f8dc 3000 	ldr.w	r3, [ip]
 8005e16:	b299      	uxth	r1, r3
 8005e18:	fb02 6101 	mla	r1, r2, r1, r6
 8005e1c:	0c1e      	lsrs	r6, r3, #16
 8005e1e:	0c0b      	lsrs	r3, r1, #16
 8005e20:	fb02 3306 	mla	r3, r2, r6, r3
 8005e24:	b289      	uxth	r1, r1
 8005e26:	3001      	adds	r0, #1
 8005e28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e2c:	4285      	cmp	r5, r0
 8005e2e:	f84c 1b04 	str.w	r1, [ip], #4
 8005e32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e36:	dcec      	bgt.n	8005e12 <__multadd+0x12>
 8005e38:	b30e      	cbz	r6, 8005e7e <__multadd+0x7e>
 8005e3a:	68a3      	ldr	r3, [r4, #8]
 8005e3c:	42ab      	cmp	r3, r5
 8005e3e:	dc19      	bgt.n	8005e74 <__multadd+0x74>
 8005e40:	6861      	ldr	r1, [r4, #4]
 8005e42:	4638      	mov	r0, r7
 8005e44:	3101      	adds	r1, #1
 8005e46:	f7ff ff79 	bl	8005d3c <_Balloc>
 8005e4a:	4680      	mov	r8, r0
 8005e4c:	b928      	cbnz	r0, 8005e5a <__multadd+0x5a>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	4b0c      	ldr	r3, [pc, #48]	; (8005e84 <__multadd+0x84>)
 8005e52:	480d      	ldr	r0, [pc, #52]	; (8005e88 <__multadd+0x88>)
 8005e54:	21ba      	movs	r1, #186	; 0xba
 8005e56:	f000 fd1d 	bl	8006894 <__assert_func>
 8005e5a:	6922      	ldr	r2, [r4, #16]
 8005e5c:	3202      	adds	r2, #2
 8005e5e:	f104 010c 	add.w	r1, r4, #12
 8005e62:	0092      	lsls	r2, r2, #2
 8005e64:	300c      	adds	r0, #12
 8005e66:	f7fe ffe0 	bl	8004e2a <memcpy>
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	4638      	mov	r0, r7
 8005e6e:	f7ff ffa5 	bl	8005dbc <_Bfree>
 8005e72:	4644      	mov	r4, r8
 8005e74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e78:	3501      	adds	r5, #1
 8005e7a:	615e      	str	r6, [r3, #20]
 8005e7c:	6125      	str	r5, [r4, #16]
 8005e7e:	4620      	mov	r0, r4
 8005e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e84:	0800713c 	.word	0x0800713c
 8005e88:	0800714d 	.word	0x0800714d

08005e8c <__hi0bits>:
 8005e8c:	0c03      	lsrs	r3, r0, #16
 8005e8e:	041b      	lsls	r3, r3, #16
 8005e90:	b9d3      	cbnz	r3, 8005ec8 <__hi0bits+0x3c>
 8005e92:	0400      	lsls	r0, r0, #16
 8005e94:	2310      	movs	r3, #16
 8005e96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005e9a:	bf04      	itt	eq
 8005e9c:	0200      	lsleq	r0, r0, #8
 8005e9e:	3308      	addeq	r3, #8
 8005ea0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005ea4:	bf04      	itt	eq
 8005ea6:	0100      	lsleq	r0, r0, #4
 8005ea8:	3304      	addeq	r3, #4
 8005eaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005eae:	bf04      	itt	eq
 8005eb0:	0080      	lsleq	r0, r0, #2
 8005eb2:	3302      	addeq	r3, #2
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	db05      	blt.n	8005ec4 <__hi0bits+0x38>
 8005eb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005ebc:	f103 0301 	add.w	r3, r3, #1
 8005ec0:	bf08      	it	eq
 8005ec2:	2320      	moveq	r3, #32
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	4770      	bx	lr
 8005ec8:	2300      	movs	r3, #0
 8005eca:	e7e4      	b.n	8005e96 <__hi0bits+0xa>

08005ecc <__lo0bits>:
 8005ecc:	6803      	ldr	r3, [r0, #0]
 8005ece:	f013 0207 	ands.w	r2, r3, #7
 8005ed2:	d00c      	beq.n	8005eee <__lo0bits+0x22>
 8005ed4:	07d9      	lsls	r1, r3, #31
 8005ed6:	d422      	bmi.n	8005f1e <__lo0bits+0x52>
 8005ed8:	079a      	lsls	r2, r3, #30
 8005eda:	bf49      	itett	mi
 8005edc:	085b      	lsrmi	r3, r3, #1
 8005ede:	089b      	lsrpl	r3, r3, #2
 8005ee0:	6003      	strmi	r3, [r0, #0]
 8005ee2:	2201      	movmi	r2, #1
 8005ee4:	bf5c      	itt	pl
 8005ee6:	6003      	strpl	r3, [r0, #0]
 8005ee8:	2202      	movpl	r2, #2
 8005eea:	4610      	mov	r0, r2
 8005eec:	4770      	bx	lr
 8005eee:	b299      	uxth	r1, r3
 8005ef0:	b909      	cbnz	r1, 8005ef6 <__lo0bits+0x2a>
 8005ef2:	0c1b      	lsrs	r3, r3, #16
 8005ef4:	2210      	movs	r2, #16
 8005ef6:	b2d9      	uxtb	r1, r3
 8005ef8:	b909      	cbnz	r1, 8005efe <__lo0bits+0x32>
 8005efa:	3208      	adds	r2, #8
 8005efc:	0a1b      	lsrs	r3, r3, #8
 8005efe:	0719      	lsls	r1, r3, #28
 8005f00:	bf04      	itt	eq
 8005f02:	091b      	lsreq	r3, r3, #4
 8005f04:	3204      	addeq	r2, #4
 8005f06:	0799      	lsls	r1, r3, #30
 8005f08:	bf04      	itt	eq
 8005f0a:	089b      	lsreq	r3, r3, #2
 8005f0c:	3202      	addeq	r2, #2
 8005f0e:	07d9      	lsls	r1, r3, #31
 8005f10:	d403      	bmi.n	8005f1a <__lo0bits+0x4e>
 8005f12:	085b      	lsrs	r3, r3, #1
 8005f14:	f102 0201 	add.w	r2, r2, #1
 8005f18:	d003      	beq.n	8005f22 <__lo0bits+0x56>
 8005f1a:	6003      	str	r3, [r0, #0]
 8005f1c:	e7e5      	b.n	8005eea <__lo0bits+0x1e>
 8005f1e:	2200      	movs	r2, #0
 8005f20:	e7e3      	b.n	8005eea <__lo0bits+0x1e>
 8005f22:	2220      	movs	r2, #32
 8005f24:	e7e1      	b.n	8005eea <__lo0bits+0x1e>
	...

08005f28 <__i2b>:
 8005f28:	b510      	push	{r4, lr}
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	f7ff ff05 	bl	8005d3c <_Balloc>
 8005f32:	4602      	mov	r2, r0
 8005f34:	b928      	cbnz	r0, 8005f42 <__i2b+0x1a>
 8005f36:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <__i2b+0x24>)
 8005f38:	4805      	ldr	r0, [pc, #20]	; (8005f50 <__i2b+0x28>)
 8005f3a:	f240 1145 	movw	r1, #325	; 0x145
 8005f3e:	f000 fca9 	bl	8006894 <__assert_func>
 8005f42:	2301      	movs	r3, #1
 8005f44:	6144      	str	r4, [r0, #20]
 8005f46:	6103      	str	r3, [r0, #16]
 8005f48:	bd10      	pop	{r4, pc}
 8005f4a:	bf00      	nop
 8005f4c:	0800713c 	.word	0x0800713c
 8005f50:	0800714d 	.word	0x0800714d

08005f54 <__multiply>:
 8005f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f58:	4691      	mov	r9, r2
 8005f5a:	690a      	ldr	r2, [r1, #16]
 8005f5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	bfb8      	it	lt
 8005f64:	460b      	movlt	r3, r1
 8005f66:	460c      	mov	r4, r1
 8005f68:	bfbc      	itt	lt
 8005f6a:	464c      	movlt	r4, r9
 8005f6c:	4699      	movlt	r9, r3
 8005f6e:	6927      	ldr	r7, [r4, #16]
 8005f70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005f74:	68a3      	ldr	r3, [r4, #8]
 8005f76:	6861      	ldr	r1, [r4, #4]
 8005f78:	eb07 060a 	add.w	r6, r7, sl
 8005f7c:	42b3      	cmp	r3, r6
 8005f7e:	b085      	sub	sp, #20
 8005f80:	bfb8      	it	lt
 8005f82:	3101      	addlt	r1, #1
 8005f84:	f7ff feda 	bl	8005d3c <_Balloc>
 8005f88:	b930      	cbnz	r0, 8005f98 <__multiply+0x44>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	4b44      	ldr	r3, [pc, #272]	; (80060a0 <__multiply+0x14c>)
 8005f8e:	4845      	ldr	r0, [pc, #276]	; (80060a4 <__multiply+0x150>)
 8005f90:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005f94:	f000 fc7e 	bl	8006894 <__assert_func>
 8005f98:	f100 0514 	add.w	r5, r0, #20
 8005f9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005fa0:	462b      	mov	r3, r5
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	4543      	cmp	r3, r8
 8005fa6:	d321      	bcc.n	8005fec <__multiply+0x98>
 8005fa8:	f104 0314 	add.w	r3, r4, #20
 8005fac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005fb0:	f109 0314 	add.w	r3, r9, #20
 8005fb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005fb8:	9202      	str	r2, [sp, #8]
 8005fba:	1b3a      	subs	r2, r7, r4
 8005fbc:	3a15      	subs	r2, #21
 8005fbe:	f022 0203 	bic.w	r2, r2, #3
 8005fc2:	3204      	adds	r2, #4
 8005fc4:	f104 0115 	add.w	r1, r4, #21
 8005fc8:	428f      	cmp	r7, r1
 8005fca:	bf38      	it	cc
 8005fcc:	2204      	movcc	r2, #4
 8005fce:	9201      	str	r2, [sp, #4]
 8005fd0:	9a02      	ldr	r2, [sp, #8]
 8005fd2:	9303      	str	r3, [sp, #12]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d80c      	bhi.n	8005ff2 <__multiply+0x9e>
 8005fd8:	2e00      	cmp	r6, #0
 8005fda:	dd03      	ble.n	8005fe4 <__multiply+0x90>
 8005fdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d05b      	beq.n	800609c <__multiply+0x148>
 8005fe4:	6106      	str	r6, [r0, #16]
 8005fe6:	b005      	add	sp, #20
 8005fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fec:	f843 2b04 	str.w	r2, [r3], #4
 8005ff0:	e7d8      	b.n	8005fa4 <__multiply+0x50>
 8005ff2:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ff6:	f1ba 0f00 	cmp.w	sl, #0
 8005ffa:	d024      	beq.n	8006046 <__multiply+0xf2>
 8005ffc:	f104 0e14 	add.w	lr, r4, #20
 8006000:	46a9      	mov	r9, r5
 8006002:	f04f 0c00 	mov.w	ip, #0
 8006006:	f85e 2b04 	ldr.w	r2, [lr], #4
 800600a:	f8d9 1000 	ldr.w	r1, [r9]
 800600e:	fa1f fb82 	uxth.w	fp, r2
 8006012:	b289      	uxth	r1, r1
 8006014:	fb0a 110b 	mla	r1, sl, fp, r1
 8006018:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800601c:	f8d9 2000 	ldr.w	r2, [r9]
 8006020:	4461      	add	r1, ip
 8006022:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006026:	fb0a c20b 	mla	r2, sl, fp, ip
 800602a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800602e:	b289      	uxth	r1, r1
 8006030:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006034:	4577      	cmp	r7, lr
 8006036:	f849 1b04 	str.w	r1, [r9], #4
 800603a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800603e:	d8e2      	bhi.n	8006006 <__multiply+0xb2>
 8006040:	9a01      	ldr	r2, [sp, #4]
 8006042:	f845 c002 	str.w	ip, [r5, r2]
 8006046:	9a03      	ldr	r2, [sp, #12]
 8006048:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800604c:	3304      	adds	r3, #4
 800604e:	f1b9 0f00 	cmp.w	r9, #0
 8006052:	d021      	beq.n	8006098 <__multiply+0x144>
 8006054:	6829      	ldr	r1, [r5, #0]
 8006056:	f104 0c14 	add.w	ip, r4, #20
 800605a:	46ae      	mov	lr, r5
 800605c:	f04f 0a00 	mov.w	sl, #0
 8006060:	f8bc b000 	ldrh.w	fp, [ip]
 8006064:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006068:	fb09 220b 	mla	r2, r9, fp, r2
 800606c:	4452      	add	r2, sl
 800606e:	b289      	uxth	r1, r1
 8006070:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006074:	f84e 1b04 	str.w	r1, [lr], #4
 8006078:	f85c 1b04 	ldr.w	r1, [ip], #4
 800607c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006080:	f8be 1000 	ldrh.w	r1, [lr]
 8006084:	fb09 110a 	mla	r1, r9, sl, r1
 8006088:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800608c:	4567      	cmp	r7, ip
 800608e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006092:	d8e5      	bhi.n	8006060 <__multiply+0x10c>
 8006094:	9a01      	ldr	r2, [sp, #4]
 8006096:	50a9      	str	r1, [r5, r2]
 8006098:	3504      	adds	r5, #4
 800609a:	e799      	b.n	8005fd0 <__multiply+0x7c>
 800609c:	3e01      	subs	r6, #1
 800609e:	e79b      	b.n	8005fd8 <__multiply+0x84>
 80060a0:	0800713c 	.word	0x0800713c
 80060a4:	0800714d 	.word	0x0800714d

080060a8 <__pow5mult>:
 80060a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060ac:	4615      	mov	r5, r2
 80060ae:	f012 0203 	ands.w	r2, r2, #3
 80060b2:	4606      	mov	r6, r0
 80060b4:	460f      	mov	r7, r1
 80060b6:	d007      	beq.n	80060c8 <__pow5mult+0x20>
 80060b8:	4c25      	ldr	r4, [pc, #148]	; (8006150 <__pow5mult+0xa8>)
 80060ba:	3a01      	subs	r2, #1
 80060bc:	2300      	movs	r3, #0
 80060be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060c2:	f7ff fe9d 	bl	8005e00 <__multadd>
 80060c6:	4607      	mov	r7, r0
 80060c8:	10ad      	asrs	r5, r5, #2
 80060ca:	d03d      	beq.n	8006148 <__pow5mult+0xa0>
 80060cc:	69f4      	ldr	r4, [r6, #28]
 80060ce:	b97c      	cbnz	r4, 80060f0 <__pow5mult+0x48>
 80060d0:	2010      	movs	r0, #16
 80060d2:	f7ff fd7f 	bl	8005bd4 <malloc>
 80060d6:	4602      	mov	r2, r0
 80060d8:	61f0      	str	r0, [r6, #28]
 80060da:	b928      	cbnz	r0, 80060e8 <__pow5mult+0x40>
 80060dc:	4b1d      	ldr	r3, [pc, #116]	; (8006154 <__pow5mult+0xac>)
 80060de:	481e      	ldr	r0, [pc, #120]	; (8006158 <__pow5mult+0xb0>)
 80060e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80060e4:	f000 fbd6 	bl	8006894 <__assert_func>
 80060e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060ec:	6004      	str	r4, [r0, #0]
 80060ee:	60c4      	str	r4, [r0, #12]
 80060f0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80060f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060f8:	b94c      	cbnz	r4, 800610e <__pow5mult+0x66>
 80060fa:	f240 2171 	movw	r1, #625	; 0x271
 80060fe:	4630      	mov	r0, r6
 8006100:	f7ff ff12 	bl	8005f28 <__i2b>
 8006104:	2300      	movs	r3, #0
 8006106:	f8c8 0008 	str.w	r0, [r8, #8]
 800610a:	4604      	mov	r4, r0
 800610c:	6003      	str	r3, [r0, #0]
 800610e:	f04f 0900 	mov.w	r9, #0
 8006112:	07eb      	lsls	r3, r5, #31
 8006114:	d50a      	bpl.n	800612c <__pow5mult+0x84>
 8006116:	4639      	mov	r1, r7
 8006118:	4622      	mov	r2, r4
 800611a:	4630      	mov	r0, r6
 800611c:	f7ff ff1a 	bl	8005f54 <__multiply>
 8006120:	4639      	mov	r1, r7
 8006122:	4680      	mov	r8, r0
 8006124:	4630      	mov	r0, r6
 8006126:	f7ff fe49 	bl	8005dbc <_Bfree>
 800612a:	4647      	mov	r7, r8
 800612c:	106d      	asrs	r5, r5, #1
 800612e:	d00b      	beq.n	8006148 <__pow5mult+0xa0>
 8006130:	6820      	ldr	r0, [r4, #0]
 8006132:	b938      	cbnz	r0, 8006144 <__pow5mult+0x9c>
 8006134:	4622      	mov	r2, r4
 8006136:	4621      	mov	r1, r4
 8006138:	4630      	mov	r0, r6
 800613a:	f7ff ff0b 	bl	8005f54 <__multiply>
 800613e:	6020      	str	r0, [r4, #0]
 8006140:	f8c0 9000 	str.w	r9, [r0]
 8006144:	4604      	mov	r4, r0
 8006146:	e7e4      	b.n	8006112 <__pow5mult+0x6a>
 8006148:	4638      	mov	r0, r7
 800614a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800614e:	bf00      	nop
 8006150:	08007298 	.word	0x08007298
 8006154:	080070cd 	.word	0x080070cd
 8006158:	0800714d 	.word	0x0800714d

0800615c <__lshift>:
 800615c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006160:	460c      	mov	r4, r1
 8006162:	6849      	ldr	r1, [r1, #4]
 8006164:	6923      	ldr	r3, [r4, #16]
 8006166:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800616a:	68a3      	ldr	r3, [r4, #8]
 800616c:	4607      	mov	r7, r0
 800616e:	4691      	mov	r9, r2
 8006170:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006174:	f108 0601 	add.w	r6, r8, #1
 8006178:	42b3      	cmp	r3, r6
 800617a:	db0b      	blt.n	8006194 <__lshift+0x38>
 800617c:	4638      	mov	r0, r7
 800617e:	f7ff fddd 	bl	8005d3c <_Balloc>
 8006182:	4605      	mov	r5, r0
 8006184:	b948      	cbnz	r0, 800619a <__lshift+0x3e>
 8006186:	4602      	mov	r2, r0
 8006188:	4b28      	ldr	r3, [pc, #160]	; (800622c <__lshift+0xd0>)
 800618a:	4829      	ldr	r0, [pc, #164]	; (8006230 <__lshift+0xd4>)
 800618c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006190:	f000 fb80 	bl	8006894 <__assert_func>
 8006194:	3101      	adds	r1, #1
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	e7ee      	b.n	8006178 <__lshift+0x1c>
 800619a:	2300      	movs	r3, #0
 800619c:	f100 0114 	add.w	r1, r0, #20
 80061a0:	f100 0210 	add.w	r2, r0, #16
 80061a4:	4618      	mov	r0, r3
 80061a6:	4553      	cmp	r3, sl
 80061a8:	db33      	blt.n	8006212 <__lshift+0xb6>
 80061aa:	6920      	ldr	r0, [r4, #16]
 80061ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061b0:	f104 0314 	add.w	r3, r4, #20
 80061b4:	f019 091f 	ands.w	r9, r9, #31
 80061b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80061c0:	d02b      	beq.n	800621a <__lshift+0xbe>
 80061c2:	f1c9 0e20 	rsb	lr, r9, #32
 80061c6:	468a      	mov	sl, r1
 80061c8:	2200      	movs	r2, #0
 80061ca:	6818      	ldr	r0, [r3, #0]
 80061cc:	fa00 f009 	lsl.w	r0, r0, r9
 80061d0:	4310      	orrs	r0, r2
 80061d2:	f84a 0b04 	str.w	r0, [sl], #4
 80061d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80061da:	459c      	cmp	ip, r3
 80061dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80061e0:	d8f3      	bhi.n	80061ca <__lshift+0x6e>
 80061e2:	ebac 0304 	sub.w	r3, ip, r4
 80061e6:	3b15      	subs	r3, #21
 80061e8:	f023 0303 	bic.w	r3, r3, #3
 80061ec:	3304      	adds	r3, #4
 80061ee:	f104 0015 	add.w	r0, r4, #21
 80061f2:	4584      	cmp	ip, r0
 80061f4:	bf38      	it	cc
 80061f6:	2304      	movcc	r3, #4
 80061f8:	50ca      	str	r2, [r1, r3]
 80061fa:	b10a      	cbz	r2, 8006200 <__lshift+0xa4>
 80061fc:	f108 0602 	add.w	r6, r8, #2
 8006200:	3e01      	subs	r6, #1
 8006202:	4638      	mov	r0, r7
 8006204:	612e      	str	r6, [r5, #16]
 8006206:	4621      	mov	r1, r4
 8006208:	f7ff fdd8 	bl	8005dbc <_Bfree>
 800620c:	4628      	mov	r0, r5
 800620e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006212:	f842 0f04 	str.w	r0, [r2, #4]!
 8006216:	3301      	adds	r3, #1
 8006218:	e7c5      	b.n	80061a6 <__lshift+0x4a>
 800621a:	3904      	subs	r1, #4
 800621c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006220:	f841 2f04 	str.w	r2, [r1, #4]!
 8006224:	459c      	cmp	ip, r3
 8006226:	d8f9      	bhi.n	800621c <__lshift+0xc0>
 8006228:	e7ea      	b.n	8006200 <__lshift+0xa4>
 800622a:	bf00      	nop
 800622c:	0800713c 	.word	0x0800713c
 8006230:	0800714d 	.word	0x0800714d

08006234 <__mcmp>:
 8006234:	b530      	push	{r4, r5, lr}
 8006236:	6902      	ldr	r2, [r0, #16]
 8006238:	690c      	ldr	r4, [r1, #16]
 800623a:	1b12      	subs	r2, r2, r4
 800623c:	d10e      	bne.n	800625c <__mcmp+0x28>
 800623e:	f100 0314 	add.w	r3, r0, #20
 8006242:	3114      	adds	r1, #20
 8006244:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006248:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800624c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006250:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006254:	42a5      	cmp	r5, r4
 8006256:	d003      	beq.n	8006260 <__mcmp+0x2c>
 8006258:	d305      	bcc.n	8006266 <__mcmp+0x32>
 800625a:	2201      	movs	r2, #1
 800625c:	4610      	mov	r0, r2
 800625e:	bd30      	pop	{r4, r5, pc}
 8006260:	4283      	cmp	r3, r0
 8006262:	d3f3      	bcc.n	800624c <__mcmp+0x18>
 8006264:	e7fa      	b.n	800625c <__mcmp+0x28>
 8006266:	f04f 32ff 	mov.w	r2, #4294967295
 800626a:	e7f7      	b.n	800625c <__mcmp+0x28>

0800626c <__mdiff>:
 800626c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006270:	460c      	mov	r4, r1
 8006272:	4606      	mov	r6, r0
 8006274:	4611      	mov	r1, r2
 8006276:	4620      	mov	r0, r4
 8006278:	4690      	mov	r8, r2
 800627a:	f7ff ffdb 	bl	8006234 <__mcmp>
 800627e:	1e05      	subs	r5, r0, #0
 8006280:	d110      	bne.n	80062a4 <__mdiff+0x38>
 8006282:	4629      	mov	r1, r5
 8006284:	4630      	mov	r0, r6
 8006286:	f7ff fd59 	bl	8005d3c <_Balloc>
 800628a:	b930      	cbnz	r0, 800629a <__mdiff+0x2e>
 800628c:	4b3a      	ldr	r3, [pc, #232]	; (8006378 <__mdiff+0x10c>)
 800628e:	4602      	mov	r2, r0
 8006290:	f240 2137 	movw	r1, #567	; 0x237
 8006294:	4839      	ldr	r0, [pc, #228]	; (800637c <__mdiff+0x110>)
 8006296:	f000 fafd 	bl	8006894 <__assert_func>
 800629a:	2301      	movs	r3, #1
 800629c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80062a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a4:	bfa4      	itt	ge
 80062a6:	4643      	movge	r3, r8
 80062a8:	46a0      	movge	r8, r4
 80062aa:	4630      	mov	r0, r6
 80062ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80062b0:	bfa6      	itte	ge
 80062b2:	461c      	movge	r4, r3
 80062b4:	2500      	movge	r5, #0
 80062b6:	2501      	movlt	r5, #1
 80062b8:	f7ff fd40 	bl	8005d3c <_Balloc>
 80062bc:	b920      	cbnz	r0, 80062c8 <__mdiff+0x5c>
 80062be:	4b2e      	ldr	r3, [pc, #184]	; (8006378 <__mdiff+0x10c>)
 80062c0:	4602      	mov	r2, r0
 80062c2:	f240 2145 	movw	r1, #581	; 0x245
 80062c6:	e7e5      	b.n	8006294 <__mdiff+0x28>
 80062c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80062cc:	6926      	ldr	r6, [r4, #16]
 80062ce:	60c5      	str	r5, [r0, #12]
 80062d0:	f104 0914 	add.w	r9, r4, #20
 80062d4:	f108 0514 	add.w	r5, r8, #20
 80062d8:	f100 0e14 	add.w	lr, r0, #20
 80062dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80062e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80062e4:	f108 0210 	add.w	r2, r8, #16
 80062e8:	46f2      	mov	sl, lr
 80062ea:	2100      	movs	r1, #0
 80062ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80062f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80062f4:	fa11 f88b 	uxtah	r8, r1, fp
 80062f8:	b299      	uxth	r1, r3
 80062fa:	0c1b      	lsrs	r3, r3, #16
 80062fc:	eba8 0801 	sub.w	r8, r8, r1
 8006300:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006304:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006308:	fa1f f888 	uxth.w	r8, r8
 800630c:	1419      	asrs	r1, r3, #16
 800630e:	454e      	cmp	r6, r9
 8006310:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006314:	f84a 3b04 	str.w	r3, [sl], #4
 8006318:	d8e8      	bhi.n	80062ec <__mdiff+0x80>
 800631a:	1b33      	subs	r3, r6, r4
 800631c:	3b15      	subs	r3, #21
 800631e:	f023 0303 	bic.w	r3, r3, #3
 8006322:	3304      	adds	r3, #4
 8006324:	3415      	adds	r4, #21
 8006326:	42a6      	cmp	r6, r4
 8006328:	bf38      	it	cc
 800632a:	2304      	movcc	r3, #4
 800632c:	441d      	add	r5, r3
 800632e:	4473      	add	r3, lr
 8006330:	469e      	mov	lr, r3
 8006332:	462e      	mov	r6, r5
 8006334:	4566      	cmp	r6, ip
 8006336:	d30e      	bcc.n	8006356 <__mdiff+0xea>
 8006338:	f10c 0203 	add.w	r2, ip, #3
 800633c:	1b52      	subs	r2, r2, r5
 800633e:	f022 0203 	bic.w	r2, r2, #3
 8006342:	3d03      	subs	r5, #3
 8006344:	45ac      	cmp	ip, r5
 8006346:	bf38      	it	cc
 8006348:	2200      	movcc	r2, #0
 800634a:	4413      	add	r3, r2
 800634c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006350:	b17a      	cbz	r2, 8006372 <__mdiff+0x106>
 8006352:	6107      	str	r7, [r0, #16]
 8006354:	e7a4      	b.n	80062a0 <__mdiff+0x34>
 8006356:	f856 8b04 	ldr.w	r8, [r6], #4
 800635a:	fa11 f288 	uxtah	r2, r1, r8
 800635e:	1414      	asrs	r4, r2, #16
 8006360:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006364:	b292      	uxth	r2, r2
 8006366:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800636a:	f84e 2b04 	str.w	r2, [lr], #4
 800636e:	1421      	asrs	r1, r4, #16
 8006370:	e7e0      	b.n	8006334 <__mdiff+0xc8>
 8006372:	3f01      	subs	r7, #1
 8006374:	e7ea      	b.n	800634c <__mdiff+0xe0>
 8006376:	bf00      	nop
 8006378:	0800713c 	.word	0x0800713c
 800637c:	0800714d 	.word	0x0800714d

08006380 <__d2b>:
 8006380:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006384:	460f      	mov	r7, r1
 8006386:	2101      	movs	r1, #1
 8006388:	ec59 8b10 	vmov	r8, r9, d0
 800638c:	4616      	mov	r6, r2
 800638e:	f7ff fcd5 	bl	8005d3c <_Balloc>
 8006392:	4604      	mov	r4, r0
 8006394:	b930      	cbnz	r0, 80063a4 <__d2b+0x24>
 8006396:	4602      	mov	r2, r0
 8006398:	4b24      	ldr	r3, [pc, #144]	; (800642c <__d2b+0xac>)
 800639a:	4825      	ldr	r0, [pc, #148]	; (8006430 <__d2b+0xb0>)
 800639c:	f240 310f 	movw	r1, #783	; 0x30f
 80063a0:	f000 fa78 	bl	8006894 <__assert_func>
 80063a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80063a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063ac:	bb2d      	cbnz	r5, 80063fa <__d2b+0x7a>
 80063ae:	9301      	str	r3, [sp, #4]
 80063b0:	f1b8 0300 	subs.w	r3, r8, #0
 80063b4:	d026      	beq.n	8006404 <__d2b+0x84>
 80063b6:	4668      	mov	r0, sp
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	f7ff fd87 	bl	8005ecc <__lo0bits>
 80063be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80063c2:	b1e8      	cbz	r0, 8006400 <__d2b+0x80>
 80063c4:	f1c0 0320 	rsb	r3, r0, #32
 80063c8:	fa02 f303 	lsl.w	r3, r2, r3
 80063cc:	430b      	orrs	r3, r1
 80063ce:	40c2      	lsrs	r2, r0
 80063d0:	6163      	str	r3, [r4, #20]
 80063d2:	9201      	str	r2, [sp, #4]
 80063d4:	9b01      	ldr	r3, [sp, #4]
 80063d6:	61a3      	str	r3, [r4, #24]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	bf14      	ite	ne
 80063dc:	2202      	movne	r2, #2
 80063de:	2201      	moveq	r2, #1
 80063e0:	6122      	str	r2, [r4, #16]
 80063e2:	b1bd      	cbz	r5, 8006414 <__d2b+0x94>
 80063e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80063e8:	4405      	add	r5, r0
 80063ea:	603d      	str	r5, [r7, #0]
 80063ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80063f0:	6030      	str	r0, [r6, #0]
 80063f2:	4620      	mov	r0, r4
 80063f4:	b003      	add	sp, #12
 80063f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063fe:	e7d6      	b.n	80063ae <__d2b+0x2e>
 8006400:	6161      	str	r1, [r4, #20]
 8006402:	e7e7      	b.n	80063d4 <__d2b+0x54>
 8006404:	a801      	add	r0, sp, #4
 8006406:	f7ff fd61 	bl	8005ecc <__lo0bits>
 800640a:	9b01      	ldr	r3, [sp, #4]
 800640c:	6163      	str	r3, [r4, #20]
 800640e:	3020      	adds	r0, #32
 8006410:	2201      	movs	r2, #1
 8006412:	e7e5      	b.n	80063e0 <__d2b+0x60>
 8006414:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006418:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800641c:	6038      	str	r0, [r7, #0]
 800641e:	6918      	ldr	r0, [r3, #16]
 8006420:	f7ff fd34 	bl	8005e8c <__hi0bits>
 8006424:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006428:	e7e2      	b.n	80063f0 <__d2b+0x70>
 800642a:	bf00      	nop
 800642c:	0800713c 	.word	0x0800713c
 8006430:	0800714d 	.word	0x0800714d

08006434 <__ssputs_r>:
 8006434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006438:	688e      	ldr	r6, [r1, #8]
 800643a:	461f      	mov	r7, r3
 800643c:	42be      	cmp	r6, r7
 800643e:	680b      	ldr	r3, [r1, #0]
 8006440:	4682      	mov	sl, r0
 8006442:	460c      	mov	r4, r1
 8006444:	4690      	mov	r8, r2
 8006446:	d82c      	bhi.n	80064a2 <__ssputs_r+0x6e>
 8006448:	898a      	ldrh	r2, [r1, #12]
 800644a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800644e:	d026      	beq.n	800649e <__ssputs_r+0x6a>
 8006450:	6965      	ldr	r5, [r4, #20]
 8006452:	6909      	ldr	r1, [r1, #16]
 8006454:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006458:	eba3 0901 	sub.w	r9, r3, r1
 800645c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006460:	1c7b      	adds	r3, r7, #1
 8006462:	444b      	add	r3, r9
 8006464:	106d      	asrs	r5, r5, #1
 8006466:	429d      	cmp	r5, r3
 8006468:	bf38      	it	cc
 800646a:	461d      	movcc	r5, r3
 800646c:	0553      	lsls	r3, r2, #21
 800646e:	d527      	bpl.n	80064c0 <__ssputs_r+0x8c>
 8006470:	4629      	mov	r1, r5
 8006472:	f7ff fbd7 	bl	8005c24 <_malloc_r>
 8006476:	4606      	mov	r6, r0
 8006478:	b360      	cbz	r0, 80064d4 <__ssputs_r+0xa0>
 800647a:	6921      	ldr	r1, [r4, #16]
 800647c:	464a      	mov	r2, r9
 800647e:	f7fe fcd4 	bl	8004e2a <memcpy>
 8006482:	89a3      	ldrh	r3, [r4, #12]
 8006484:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800648c:	81a3      	strh	r3, [r4, #12]
 800648e:	6126      	str	r6, [r4, #16]
 8006490:	6165      	str	r5, [r4, #20]
 8006492:	444e      	add	r6, r9
 8006494:	eba5 0509 	sub.w	r5, r5, r9
 8006498:	6026      	str	r6, [r4, #0]
 800649a:	60a5      	str	r5, [r4, #8]
 800649c:	463e      	mov	r6, r7
 800649e:	42be      	cmp	r6, r7
 80064a0:	d900      	bls.n	80064a4 <__ssputs_r+0x70>
 80064a2:	463e      	mov	r6, r7
 80064a4:	6820      	ldr	r0, [r4, #0]
 80064a6:	4632      	mov	r2, r6
 80064a8:	4641      	mov	r1, r8
 80064aa:	f000 f9c9 	bl	8006840 <memmove>
 80064ae:	68a3      	ldr	r3, [r4, #8]
 80064b0:	1b9b      	subs	r3, r3, r6
 80064b2:	60a3      	str	r3, [r4, #8]
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	4433      	add	r3, r6
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	2000      	movs	r0, #0
 80064bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c0:	462a      	mov	r2, r5
 80064c2:	f000 fa2d 	bl	8006920 <_realloc_r>
 80064c6:	4606      	mov	r6, r0
 80064c8:	2800      	cmp	r0, #0
 80064ca:	d1e0      	bne.n	800648e <__ssputs_r+0x5a>
 80064cc:	6921      	ldr	r1, [r4, #16]
 80064ce:	4650      	mov	r0, sl
 80064d0:	f7ff fb34 	bl	8005b3c <_free_r>
 80064d4:	230c      	movs	r3, #12
 80064d6:	f8ca 3000 	str.w	r3, [sl]
 80064da:	89a3      	ldrh	r3, [r4, #12]
 80064dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064e0:	81a3      	strh	r3, [r4, #12]
 80064e2:	f04f 30ff 	mov.w	r0, #4294967295
 80064e6:	e7e9      	b.n	80064bc <__ssputs_r+0x88>

080064e8 <_svfiprintf_r>:
 80064e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ec:	4698      	mov	r8, r3
 80064ee:	898b      	ldrh	r3, [r1, #12]
 80064f0:	061b      	lsls	r3, r3, #24
 80064f2:	b09d      	sub	sp, #116	; 0x74
 80064f4:	4607      	mov	r7, r0
 80064f6:	460d      	mov	r5, r1
 80064f8:	4614      	mov	r4, r2
 80064fa:	d50e      	bpl.n	800651a <_svfiprintf_r+0x32>
 80064fc:	690b      	ldr	r3, [r1, #16]
 80064fe:	b963      	cbnz	r3, 800651a <_svfiprintf_r+0x32>
 8006500:	2140      	movs	r1, #64	; 0x40
 8006502:	f7ff fb8f 	bl	8005c24 <_malloc_r>
 8006506:	6028      	str	r0, [r5, #0]
 8006508:	6128      	str	r0, [r5, #16]
 800650a:	b920      	cbnz	r0, 8006516 <_svfiprintf_r+0x2e>
 800650c:	230c      	movs	r3, #12
 800650e:	603b      	str	r3, [r7, #0]
 8006510:	f04f 30ff 	mov.w	r0, #4294967295
 8006514:	e0d0      	b.n	80066b8 <_svfiprintf_r+0x1d0>
 8006516:	2340      	movs	r3, #64	; 0x40
 8006518:	616b      	str	r3, [r5, #20]
 800651a:	2300      	movs	r3, #0
 800651c:	9309      	str	r3, [sp, #36]	; 0x24
 800651e:	2320      	movs	r3, #32
 8006520:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006524:	f8cd 800c 	str.w	r8, [sp, #12]
 8006528:	2330      	movs	r3, #48	; 0x30
 800652a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80066d0 <_svfiprintf_r+0x1e8>
 800652e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006532:	f04f 0901 	mov.w	r9, #1
 8006536:	4623      	mov	r3, r4
 8006538:	469a      	mov	sl, r3
 800653a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800653e:	b10a      	cbz	r2, 8006544 <_svfiprintf_r+0x5c>
 8006540:	2a25      	cmp	r2, #37	; 0x25
 8006542:	d1f9      	bne.n	8006538 <_svfiprintf_r+0x50>
 8006544:	ebba 0b04 	subs.w	fp, sl, r4
 8006548:	d00b      	beq.n	8006562 <_svfiprintf_r+0x7a>
 800654a:	465b      	mov	r3, fp
 800654c:	4622      	mov	r2, r4
 800654e:	4629      	mov	r1, r5
 8006550:	4638      	mov	r0, r7
 8006552:	f7ff ff6f 	bl	8006434 <__ssputs_r>
 8006556:	3001      	adds	r0, #1
 8006558:	f000 80a9 	beq.w	80066ae <_svfiprintf_r+0x1c6>
 800655c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800655e:	445a      	add	r2, fp
 8006560:	9209      	str	r2, [sp, #36]	; 0x24
 8006562:	f89a 3000 	ldrb.w	r3, [sl]
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 80a1 	beq.w	80066ae <_svfiprintf_r+0x1c6>
 800656c:	2300      	movs	r3, #0
 800656e:	f04f 32ff 	mov.w	r2, #4294967295
 8006572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006576:	f10a 0a01 	add.w	sl, sl, #1
 800657a:	9304      	str	r3, [sp, #16]
 800657c:	9307      	str	r3, [sp, #28]
 800657e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006582:	931a      	str	r3, [sp, #104]	; 0x68
 8006584:	4654      	mov	r4, sl
 8006586:	2205      	movs	r2, #5
 8006588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800658c:	4850      	ldr	r0, [pc, #320]	; (80066d0 <_svfiprintf_r+0x1e8>)
 800658e:	f7f9 fe27 	bl	80001e0 <memchr>
 8006592:	9a04      	ldr	r2, [sp, #16]
 8006594:	b9d8      	cbnz	r0, 80065ce <_svfiprintf_r+0xe6>
 8006596:	06d0      	lsls	r0, r2, #27
 8006598:	bf44      	itt	mi
 800659a:	2320      	movmi	r3, #32
 800659c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065a0:	0711      	lsls	r1, r2, #28
 80065a2:	bf44      	itt	mi
 80065a4:	232b      	movmi	r3, #43	; 0x2b
 80065a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065aa:	f89a 3000 	ldrb.w	r3, [sl]
 80065ae:	2b2a      	cmp	r3, #42	; 0x2a
 80065b0:	d015      	beq.n	80065de <_svfiprintf_r+0xf6>
 80065b2:	9a07      	ldr	r2, [sp, #28]
 80065b4:	4654      	mov	r4, sl
 80065b6:	2000      	movs	r0, #0
 80065b8:	f04f 0c0a 	mov.w	ip, #10
 80065bc:	4621      	mov	r1, r4
 80065be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065c2:	3b30      	subs	r3, #48	; 0x30
 80065c4:	2b09      	cmp	r3, #9
 80065c6:	d94d      	bls.n	8006664 <_svfiprintf_r+0x17c>
 80065c8:	b1b0      	cbz	r0, 80065f8 <_svfiprintf_r+0x110>
 80065ca:	9207      	str	r2, [sp, #28]
 80065cc:	e014      	b.n	80065f8 <_svfiprintf_r+0x110>
 80065ce:	eba0 0308 	sub.w	r3, r0, r8
 80065d2:	fa09 f303 	lsl.w	r3, r9, r3
 80065d6:	4313      	orrs	r3, r2
 80065d8:	9304      	str	r3, [sp, #16]
 80065da:	46a2      	mov	sl, r4
 80065dc:	e7d2      	b.n	8006584 <_svfiprintf_r+0x9c>
 80065de:	9b03      	ldr	r3, [sp, #12]
 80065e0:	1d19      	adds	r1, r3, #4
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	9103      	str	r1, [sp, #12]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	bfbb      	ittet	lt
 80065ea:	425b      	neglt	r3, r3
 80065ec:	f042 0202 	orrlt.w	r2, r2, #2
 80065f0:	9307      	strge	r3, [sp, #28]
 80065f2:	9307      	strlt	r3, [sp, #28]
 80065f4:	bfb8      	it	lt
 80065f6:	9204      	strlt	r2, [sp, #16]
 80065f8:	7823      	ldrb	r3, [r4, #0]
 80065fa:	2b2e      	cmp	r3, #46	; 0x2e
 80065fc:	d10c      	bne.n	8006618 <_svfiprintf_r+0x130>
 80065fe:	7863      	ldrb	r3, [r4, #1]
 8006600:	2b2a      	cmp	r3, #42	; 0x2a
 8006602:	d134      	bne.n	800666e <_svfiprintf_r+0x186>
 8006604:	9b03      	ldr	r3, [sp, #12]
 8006606:	1d1a      	adds	r2, r3, #4
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	9203      	str	r2, [sp, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	bfb8      	it	lt
 8006610:	f04f 33ff 	movlt.w	r3, #4294967295
 8006614:	3402      	adds	r4, #2
 8006616:	9305      	str	r3, [sp, #20]
 8006618:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80066e0 <_svfiprintf_r+0x1f8>
 800661c:	7821      	ldrb	r1, [r4, #0]
 800661e:	2203      	movs	r2, #3
 8006620:	4650      	mov	r0, sl
 8006622:	f7f9 fddd 	bl	80001e0 <memchr>
 8006626:	b138      	cbz	r0, 8006638 <_svfiprintf_r+0x150>
 8006628:	9b04      	ldr	r3, [sp, #16]
 800662a:	eba0 000a 	sub.w	r0, r0, sl
 800662e:	2240      	movs	r2, #64	; 0x40
 8006630:	4082      	lsls	r2, r0
 8006632:	4313      	orrs	r3, r2
 8006634:	3401      	adds	r4, #1
 8006636:	9304      	str	r3, [sp, #16]
 8006638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800663c:	4825      	ldr	r0, [pc, #148]	; (80066d4 <_svfiprintf_r+0x1ec>)
 800663e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006642:	2206      	movs	r2, #6
 8006644:	f7f9 fdcc 	bl	80001e0 <memchr>
 8006648:	2800      	cmp	r0, #0
 800664a:	d038      	beq.n	80066be <_svfiprintf_r+0x1d6>
 800664c:	4b22      	ldr	r3, [pc, #136]	; (80066d8 <_svfiprintf_r+0x1f0>)
 800664e:	bb1b      	cbnz	r3, 8006698 <_svfiprintf_r+0x1b0>
 8006650:	9b03      	ldr	r3, [sp, #12]
 8006652:	3307      	adds	r3, #7
 8006654:	f023 0307 	bic.w	r3, r3, #7
 8006658:	3308      	adds	r3, #8
 800665a:	9303      	str	r3, [sp, #12]
 800665c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800665e:	4433      	add	r3, r6
 8006660:	9309      	str	r3, [sp, #36]	; 0x24
 8006662:	e768      	b.n	8006536 <_svfiprintf_r+0x4e>
 8006664:	fb0c 3202 	mla	r2, ip, r2, r3
 8006668:	460c      	mov	r4, r1
 800666a:	2001      	movs	r0, #1
 800666c:	e7a6      	b.n	80065bc <_svfiprintf_r+0xd4>
 800666e:	2300      	movs	r3, #0
 8006670:	3401      	adds	r4, #1
 8006672:	9305      	str	r3, [sp, #20]
 8006674:	4619      	mov	r1, r3
 8006676:	f04f 0c0a 	mov.w	ip, #10
 800667a:	4620      	mov	r0, r4
 800667c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006680:	3a30      	subs	r2, #48	; 0x30
 8006682:	2a09      	cmp	r2, #9
 8006684:	d903      	bls.n	800668e <_svfiprintf_r+0x1a6>
 8006686:	2b00      	cmp	r3, #0
 8006688:	d0c6      	beq.n	8006618 <_svfiprintf_r+0x130>
 800668a:	9105      	str	r1, [sp, #20]
 800668c:	e7c4      	b.n	8006618 <_svfiprintf_r+0x130>
 800668e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006692:	4604      	mov	r4, r0
 8006694:	2301      	movs	r3, #1
 8006696:	e7f0      	b.n	800667a <_svfiprintf_r+0x192>
 8006698:	ab03      	add	r3, sp, #12
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	462a      	mov	r2, r5
 800669e:	4b0f      	ldr	r3, [pc, #60]	; (80066dc <_svfiprintf_r+0x1f4>)
 80066a0:	a904      	add	r1, sp, #16
 80066a2:	4638      	mov	r0, r7
 80066a4:	f7fd fe42 	bl	800432c <_printf_float>
 80066a8:	1c42      	adds	r2, r0, #1
 80066aa:	4606      	mov	r6, r0
 80066ac:	d1d6      	bne.n	800665c <_svfiprintf_r+0x174>
 80066ae:	89ab      	ldrh	r3, [r5, #12]
 80066b0:	065b      	lsls	r3, r3, #25
 80066b2:	f53f af2d 	bmi.w	8006510 <_svfiprintf_r+0x28>
 80066b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066b8:	b01d      	add	sp, #116	; 0x74
 80066ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066be:	ab03      	add	r3, sp, #12
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	462a      	mov	r2, r5
 80066c4:	4b05      	ldr	r3, [pc, #20]	; (80066dc <_svfiprintf_r+0x1f4>)
 80066c6:	a904      	add	r1, sp, #16
 80066c8:	4638      	mov	r0, r7
 80066ca:	f7fe f8d3 	bl	8004874 <_printf_i>
 80066ce:	e7eb      	b.n	80066a8 <_svfiprintf_r+0x1c0>
 80066d0:	080072a4 	.word	0x080072a4
 80066d4:	080072ae 	.word	0x080072ae
 80066d8:	0800432d 	.word	0x0800432d
 80066dc:	08006435 	.word	0x08006435
 80066e0:	080072aa 	.word	0x080072aa

080066e4 <__sflush_r>:
 80066e4:	898a      	ldrh	r2, [r1, #12]
 80066e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ea:	4605      	mov	r5, r0
 80066ec:	0710      	lsls	r0, r2, #28
 80066ee:	460c      	mov	r4, r1
 80066f0:	d458      	bmi.n	80067a4 <__sflush_r+0xc0>
 80066f2:	684b      	ldr	r3, [r1, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	dc05      	bgt.n	8006704 <__sflush_r+0x20>
 80066f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	dc02      	bgt.n	8006704 <__sflush_r+0x20>
 80066fe:	2000      	movs	r0, #0
 8006700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006706:	2e00      	cmp	r6, #0
 8006708:	d0f9      	beq.n	80066fe <__sflush_r+0x1a>
 800670a:	2300      	movs	r3, #0
 800670c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006710:	682f      	ldr	r7, [r5, #0]
 8006712:	6a21      	ldr	r1, [r4, #32]
 8006714:	602b      	str	r3, [r5, #0]
 8006716:	d032      	beq.n	800677e <__sflush_r+0x9a>
 8006718:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800671a:	89a3      	ldrh	r3, [r4, #12]
 800671c:	075a      	lsls	r2, r3, #29
 800671e:	d505      	bpl.n	800672c <__sflush_r+0x48>
 8006720:	6863      	ldr	r3, [r4, #4]
 8006722:	1ac0      	subs	r0, r0, r3
 8006724:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006726:	b10b      	cbz	r3, 800672c <__sflush_r+0x48>
 8006728:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800672a:	1ac0      	subs	r0, r0, r3
 800672c:	2300      	movs	r3, #0
 800672e:	4602      	mov	r2, r0
 8006730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006732:	6a21      	ldr	r1, [r4, #32]
 8006734:	4628      	mov	r0, r5
 8006736:	47b0      	blx	r6
 8006738:	1c43      	adds	r3, r0, #1
 800673a:	89a3      	ldrh	r3, [r4, #12]
 800673c:	d106      	bne.n	800674c <__sflush_r+0x68>
 800673e:	6829      	ldr	r1, [r5, #0]
 8006740:	291d      	cmp	r1, #29
 8006742:	d82b      	bhi.n	800679c <__sflush_r+0xb8>
 8006744:	4a29      	ldr	r2, [pc, #164]	; (80067ec <__sflush_r+0x108>)
 8006746:	410a      	asrs	r2, r1
 8006748:	07d6      	lsls	r6, r2, #31
 800674a:	d427      	bmi.n	800679c <__sflush_r+0xb8>
 800674c:	2200      	movs	r2, #0
 800674e:	6062      	str	r2, [r4, #4]
 8006750:	04d9      	lsls	r1, r3, #19
 8006752:	6922      	ldr	r2, [r4, #16]
 8006754:	6022      	str	r2, [r4, #0]
 8006756:	d504      	bpl.n	8006762 <__sflush_r+0x7e>
 8006758:	1c42      	adds	r2, r0, #1
 800675a:	d101      	bne.n	8006760 <__sflush_r+0x7c>
 800675c:	682b      	ldr	r3, [r5, #0]
 800675e:	b903      	cbnz	r3, 8006762 <__sflush_r+0x7e>
 8006760:	6560      	str	r0, [r4, #84]	; 0x54
 8006762:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006764:	602f      	str	r7, [r5, #0]
 8006766:	2900      	cmp	r1, #0
 8006768:	d0c9      	beq.n	80066fe <__sflush_r+0x1a>
 800676a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800676e:	4299      	cmp	r1, r3
 8006770:	d002      	beq.n	8006778 <__sflush_r+0x94>
 8006772:	4628      	mov	r0, r5
 8006774:	f7ff f9e2 	bl	8005b3c <_free_r>
 8006778:	2000      	movs	r0, #0
 800677a:	6360      	str	r0, [r4, #52]	; 0x34
 800677c:	e7c0      	b.n	8006700 <__sflush_r+0x1c>
 800677e:	2301      	movs	r3, #1
 8006780:	4628      	mov	r0, r5
 8006782:	47b0      	blx	r6
 8006784:	1c41      	adds	r1, r0, #1
 8006786:	d1c8      	bne.n	800671a <__sflush_r+0x36>
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d0c5      	beq.n	800671a <__sflush_r+0x36>
 800678e:	2b1d      	cmp	r3, #29
 8006790:	d001      	beq.n	8006796 <__sflush_r+0xb2>
 8006792:	2b16      	cmp	r3, #22
 8006794:	d101      	bne.n	800679a <__sflush_r+0xb6>
 8006796:	602f      	str	r7, [r5, #0]
 8006798:	e7b1      	b.n	80066fe <__sflush_r+0x1a>
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067a0:	81a3      	strh	r3, [r4, #12]
 80067a2:	e7ad      	b.n	8006700 <__sflush_r+0x1c>
 80067a4:	690f      	ldr	r7, [r1, #16]
 80067a6:	2f00      	cmp	r7, #0
 80067a8:	d0a9      	beq.n	80066fe <__sflush_r+0x1a>
 80067aa:	0793      	lsls	r3, r2, #30
 80067ac:	680e      	ldr	r6, [r1, #0]
 80067ae:	bf08      	it	eq
 80067b0:	694b      	ldreq	r3, [r1, #20]
 80067b2:	600f      	str	r7, [r1, #0]
 80067b4:	bf18      	it	ne
 80067b6:	2300      	movne	r3, #0
 80067b8:	eba6 0807 	sub.w	r8, r6, r7
 80067bc:	608b      	str	r3, [r1, #8]
 80067be:	f1b8 0f00 	cmp.w	r8, #0
 80067c2:	dd9c      	ble.n	80066fe <__sflush_r+0x1a>
 80067c4:	6a21      	ldr	r1, [r4, #32]
 80067c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067c8:	4643      	mov	r3, r8
 80067ca:	463a      	mov	r2, r7
 80067cc:	4628      	mov	r0, r5
 80067ce:	47b0      	blx	r6
 80067d0:	2800      	cmp	r0, #0
 80067d2:	dc06      	bgt.n	80067e2 <__sflush_r+0xfe>
 80067d4:	89a3      	ldrh	r3, [r4, #12]
 80067d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067da:	81a3      	strh	r3, [r4, #12]
 80067dc:	f04f 30ff 	mov.w	r0, #4294967295
 80067e0:	e78e      	b.n	8006700 <__sflush_r+0x1c>
 80067e2:	4407      	add	r7, r0
 80067e4:	eba8 0800 	sub.w	r8, r8, r0
 80067e8:	e7e9      	b.n	80067be <__sflush_r+0xda>
 80067ea:	bf00      	nop
 80067ec:	dfbffffe 	.word	0xdfbffffe

080067f0 <_fflush_r>:
 80067f0:	b538      	push	{r3, r4, r5, lr}
 80067f2:	690b      	ldr	r3, [r1, #16]
 80067f4:	4605      	mov	r5, r0
 80067f6:	460c      	mov	r4, r1
 80067f8:	b913      	cbnz	r3, 8006800 <_fflush_r+0x10>
 80067fa:	2500      	movs	r5, #0
 80067fc:	4628      	mov	r0, r5
 80067fe:	bd38      	pop	{r3, r4, r5, pc}
 8006800:	b118      	cbz	r0, 800680a <_fflush_r+0x1a>
 8006802:	6a03      	ldr	r3, [r0, #32]
 8006804:	b90b      	cbnz	r3, 800680a <_fflush_r+0x1a>
 8006806:	f7fe f9e3 	bl	8004bd0 <__sinit>
 800680a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d0f3      	beq.n	80067fa <_fflush_r+0xa>
 8006812:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006814:	07d0      	lsls	r0, r2, #31
 8006816:	d404      	bmi.n	8006822 <_fflush_r+0x32>
 8006818:	0599      	lsls	r1, r3, #22
 800681a:	d402      	bmi.n	8006822 <_fflush_r+0x32>
 800681c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800681e:	f7fe fb02 	bl	8004e26 <__retarget_lock_acquire_recursive>
 8006822:	4628      	mov	r0, r5
 8006824:	4621      	mov	r1, r4
 8006826:	f7ff ff5d 	bl	80066e4 <__sflush_r>
 800682a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800682c:	07da      	lsls	r2, r3, #31
 800682e:	4605      	mov	r5, r0
 8006830:	d4e4      	bmi.n	80067fc <_fflush_r+0xc>
 8006832:	89a3      	ldrh	r3, [r4, #12]
 8006834:	059b      	lsls	r3, r3, #22
 8006836:	d4e1      	bmi.n	80067fc <_fflush_r+0xc>
 8006838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800683a:	f7fe faf5 	bl	8004e28 <__retarget_lock_release_recursive>
 800683e:	e7dd      	b.n	80067fc <_fflush_r+0xc>

08006840 <memmove>:
 8006840:	4288      	cmp	r0, r1
 8006842:	b510      	push	{r4, lr}
 8006844:	eb01 0402 	add.w	r4, r1, r2
 8006848:	d902      	bls.n	8006850 <memmove+0x10>
 800684a:	4284      	cmp	r4, r0
 800684c:	4623      	mov	r3, r4
 800684e:	d807      	bhi.n	8006860 <memmove+0x20>
 8006850:	1e43      	subs	r3, r0, #1
 8006852:	42a1      	cmp	r1, r4
 8006854:	d008      	beq.n	8006868 <memmove+0x28>
 8006856:	f811 2b01 	ldrb.w	r2, [r1], #1
 800685a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800685e:	e7f8      	b.n	8006852 <memmove+0x12>
 8006860:	4402      	add	r2, r0
 8006862:	4601      	mov	r1, r0
 8006864:	428a      	cmp	r2, r1
 8006866:	d100      	bne.n	800686a <memmove+0x2a>
 8006868:	bd10      	pop	{r4, pc}
 800686a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800686e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006872:	e7f7      	b.n	8006864 <memmove+0x24>

08006874 <_sbrk_r>:
 8006874:	b538      	push	{r3, r4, r5, lr}
 8006876:	4d06      	ldr	r5, [pc, #24]	; (8006890 <_sbrk_r+0x1c>)
 8006878:	2300      	movs	r3, #0
 800687a:	4604      	mov	r4, r0
 800687c:	4608      	mov	r0, r1
 800687e:	602b      	str	r3, [r5, #0]
 8006880:	f7fb f870 	bl	8001964 <_sbrk>
 8006884:	1c43      	adds	r3, r0, #1
 8006886:	d102      	bne.n	800688e <_sbrk_r+0x1a>
 8006888:	682b      	ldr	r3, [r5, #0]
 800688a:	b103      	cbz	r3, 800688e <_sbrk_r+0x1a>
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	bd38      	pop	{r3, r4, r5, pc}
 8006890:	20000404 	.word	0x20000404

08006894 <__assert_func>:
 8006894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006896:	4614      	mov	r4, r2
 8006898:	461a      	mov	r2, r3
 800689a:	4b09      	ldr	r3, [pc, #36]	; (80068c0 <__assert_func+0x2c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4605      	mov	r5, r0
 80068a0:	68d8      	ldr	r0, [r3, #12]
 80068a2:	b14c      	cbz	r4, 80068b8 <__assert_func+0x24>
 80068a4:	4b07      	ldr	r3, [pc, #28]	; (80068c4 <__assert_func+0x30>)
 80068a6:	9100      	str	r1, [sp, #0]
 80068a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80068ac:	4906      	ldr	r1, [pc, #24]	; (80068c8 <__assert_func+0x34>)
 80068ae:	462b      	mov	r3, r5
 80068b0:	f000 f872 	bl	8006998 <fiprintf>
 80068b4:	f000 f882 	bl	80069bc <abort>
 80068b8:	4b04      	ldr	r3, [pc, #16]	; (80068cc <__assert_func+0x38>)
 80068ba:	461c      	mov	r4, r3
 80068bc:	e7f3      	b.n	80068a6 <__assert_func+0x12>
 80068be:	bf00      	nop
 80068c0:	20000064 	.word	0x20000064
 80068c4:	080072bf 	.word	0x080072bf
 80068c8:	080072cc 	.word	0x080072cc
 80068cc:	080072fa 	.word	0x080072fa

080068d0 <_calloc_r>:
 80068d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068d2:	fba1 2402 	umull	r2, r4, r1, r2
 80068d6:	b94c      	cbnz	r4, 80068ec <_calloc_r+0x1c>
 80068d8:	4611      	mov	r1, r2
 80068da:	9201      	str	r2, [sp, #4]
 80068dc:	f7ff f9a2 	bl	8005c24 <_malloc_r>
 80068e0:	9a01      	ldr	r2, [sp, #4]
 80068e2:	4605      	mov	r5, r0
 80068e4:	b930      	cbnz	r0, 80068f4 <_calloc_r+0x24>
 80068e6:	4628      	mov	r0, r5
 80068e8:	b003      	add	sp, #12
 80068ea:	bd30      	pop	{r4, r5, pc}
 80068ec:	220c      	movs	r2, #12
 80068ee:	6002      	str	r2, [r0, #0]
 80068f0:	2500      	movs	r5, #0
 80068f2:	e7f8      	b.n	80068e6 <_calloc_r+0x16>
 80068f4:	4621      	mov	r1, r4
 80068f6:	f7fe fa18 	bl	8004d2a <memset>
 80068fa:	e7f4      	b.n	80068e6 <_calloc_r+0x16>

080068fc <__ascii_mbtowc>:
 80068fc:	b082      	sub	sp, #8
 80068fe:	b901      	cbnz	r1, 8006902 <__ascii_mbtowc+0x6>
 8006900:	a901      	add	r1, sp, #4
 8006902:	b142      	cbz	r2, 8006916 <__ascii_mbtowc+0x1a>
 8006904:	b14b      	cbz	r3, 800691a <__ascii_mbtowc+0x1e>
 8006906:	7813      	ldrb	r3, [r2, #0]
 8006908:	600b      	str	r3, [r1, #0]
 800690a:	7812      	ldrb	r2, [r2, #0]
 800690c:	1e10      	subs	r0, r2, #0
 800690e:	bf18      	it	ne
 8006910:	2001      	movne	r0, #1
 8006912:	b002      	add	sp, #8
 8006914:	4770      	bx	lr
 8006916:	4610      	mov	r0, r2
 8006918:	e7fb      	b.n	8006912 <__ascii_mbtowc+0x16>
 800691a:	f06f 0001 	mvn.w	r0, #1
 800691e:	e7f8      	b.n	8006912 <__ascii_mbtowc+0x16>

08006920 <_realloc_r>:
 8006920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006924:	4680      	mov	r8, r0
 8006926:	4614      	mov	r4, r2
 8006928:	460e      	mov	r6, r1
 800692a:	b921      	cbnz	r1, 8006936 <_realloc_r+0x16>
 800692c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006930:	4611      	mov	r1, r2
 8006932:	f7ff b977 	b.w	8005c24 <_malloc_r>
 8006936:	b92a      	cbnz	r2, 8006944 <_realloc_r+0x24>
 8006938:	f7ff f900 	bl	8005b3c <_free_r>
 800693c:	4625      	mov	r5, r4
 800693e:	4628      	mov	r0, r5
 8006940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006944:	f000 f841 	bl	80069ca <_malloc_usable_size_r>
 8006948:	4284      	cmp	r4, r0
 800694a:	4607      	mov	r7, r0
 800694c:	d802      	bhi.n	8006954 <_realloc_r+0x34>
 800694e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006952:	d812      	bhi.n	800697a <_realloc_r+0x5a>
 8006954:	4621      	mov	r1, r4
 8006956:	4640      	mov	r0, r8
 8006958:	f7ff f964 	bl	8005c24 <_malloc_r>
 800695c:	4605      	mov	r5, r0
 800695e:	2800      	cmp	r0, #0
 8006960:	d0ed      	beq.n	800693e <_realloc_r+0x1e>
 8006962:	42bc      	cmp	r4, r7
 8006964:	4622      	mov	r2, r4
 8006966:	4631      	mov	r1, r6
 8006968:	bf28      	it	cs
 800696a:	463a      	movcs	r2, r7
 800696c:	f7fe fa5d 	bl	8004e2a <memcpy>
 8006970:	4631      	mov	r1, r6
 8006972:	4640      	mov	r0, r8
 8006974:	f7ff f8e2 	bl	8005b3c <_free_r>
 8006978:	e7e1      	b.n	800693e <_realloc_r+0x1e>
 800697a:	4635      	mov	r5, r6
 800697c:	e7df      	b.n	800693e <_realloc_r+0x1e>

0800697e <__ascii_wctomb>:
 800697e:	b149      	cbz	r1, 8006994 <__ascii_wctomb+0x16>
 8006980:	2aff      	cmp	r2, #255	; 0xff
 8006982:	bf85      	ittet	hi
 8006984:	238a      	movhi	r3, #138	; 0x8a
 8006986:	6003      	strhi	r3, [r0, #0]
 8006988:	700a      	strbls	r2, [r1, #0]
 800698a:	f04f 30ff 	movhi.w	r0, #4294967295
 800698e:	bf98      	it	ls
 8006990:	2001      	movls	r0, #1
 8006992:	4770      	bx	lr
 8006994:	4608      	mov	r0, r1
 8006996:	4770      	bx	lr

08006998 <fiprintf>:
 8006998:	b40e      	push	{r1, r2, r3}
 800699a:	b503      	push	{r0, r1, lr}
 800699c:	4601      	mov	r1, r0
 800699e:	ab03      	add	r3, sp, #12
 80069a0:	4805      	ldr	r0, [pc, #20]	; (80069b8 <fiprintf+0x20>)
 80069a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069a6:	6800      	ldr	r0, [r0, #0]
 80069a8:	9301      	str	r3, [sp, #4]
 80069aa:	f000 f83f 	bl	8006a2c <_vfiprintf_r>
 80069ae:	b002      	add	sp, #8
 80069b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80069b4:	b003      	add	sp, #12
 80069b6:	4770      	bx	lr
 80069b8:	20000064 	.word	0x20000064

080069bc <abort>:
 80069bc:	b508      	push	{r3, lr}
 80069be:	2006      	movs	r0, #6
 80069c0:	f000 fa0c 	bl	8006ddc <raise>
 80069c4:	2001      	movs	r0, #1
 80069c6:	f7fa ff55 	bl	8001874 <_exit>

080069ca <_malloc_usable_size_r>:
 80069ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069ce:	1f18      	subs	r0, r3, #4
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	bfbc      	itt	lt
 80069d4:	580b      	ldrlt	r3, [r1, r0]
 80069d6:	18c0      	addlt	r0, r0, r3
 80069d8:	4770      	bx	lr

080069da <__sfputc_r>:
 80069da:	6893      	ldr	r3, [r2, #8]
 80069dc:	3b01      	subs	r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	b410      	push	{r4}
 80069e2:	6093      	str	r3, [r2, #8]
 80069e4:	da08      	bge.n	80069f8 <__sfputc_r+0x1e>
 80069e6:	6994      	ldr	r4, [r2, #24]
 80069e8:	42a3      	cmp	r3, r4
 80069ea:	db01      	blt.n	80069f0 <__sfputc_r+0x16>
 80069ec:	290a      	cmp	r1, #10
 80069ee:	d103      	bne.n	80069f8 <__sfputc_r+0x1e>
 80069f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069f4:	f000 b934 	b.w	8006c60 <__swbuf_r>
 80069f8:	6813      	ldr	r3, [r2, #0]
 80069fa:	1c58      	adds	r0, r3, #1
 80069fc:	6010      	str	r0, [r2, #0]
 80069fe:	7019      	strb	r1, [r3, #0]
 8006a00:	4608      	mov	r0, r1
 8006a02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <__sfputs_r>:
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0a:	4606      	mov	r6, r0
 8006a0c:	460f      	mov	r7, r1
 8006a0e:	4614      	mov	r4, r2
 8006a10:	18d5      	adds	r5, r2, r3
 8006a12:	42ac      	cmp	r4, r5
 8006a14:	d101      	bne.n	8006a1a <__sfputs_r+0x12>
 8006a16:	2000      	movs	r0, #0
 8006a18:	e007      	b.n	8006a2a <__sfputs_r+0x22>
 8006a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a1e:	463a      	mov	r2, r7
 8006a20:	4630      	mov	r0, r6
 8006a22:	f7ff ffda 	bl	80069da <__sfputc_r>
 8006a26:	1c43      	adds	r3, r0, #1
 8006a28:	d1f3      	bne.n	8006a12 <__sfputs_r+0xa>
 8006a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a2c <_vfiprintf_r>:
 8006a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a30:	460d      	mov	r5, r1
 8006a32:	b09d      	sub	sp, #116	; 0x74
 8006a34:	4614      	mov	r4, r2
 8006a36:	4698      	mov	r8, r3
 8006a38:	4606      	mov	r6, r0
 8006a3a:	b118      	cbz	r0, 8006a44 <_vfiprintf_r+0x18>
 8006a3c:	6a03      	ldr	r3, [r0, #32]
 8006a3e:	b90b      	cbnz	r3, 8006a44 <_vfiprintf_r+0x18>
 8006a40:	f7fe f8c6 	bl	8004bd0 <__sinit>
 8006a44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a46:	07d9      	lsls	r1, r3, #31
 8006a48:	d405      	bmi.n	8006a56 <_vfiprintf_r+0x2a>
 8006a4a:	89ab      	ldrh	r3, [r5, #12]
 8006a4c:	059a      	lsls	r2, r3, #22
 8006a4e:	d402      	bmi.n	8006a56 <_vfiprintf_r+0x2a>
 8006a50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a52:	f7fe f9e8 	bl	8004e26 <__retarget_lock_acquire_recursive>
 8006a56:	89ab      	ldrh	r3, [r5, #12]
 8006a58:	071b      	lsls	r3, r3, #28
 8006a5a:	d501      	bpl.n	8006a60 <_vfiprintf_r+0x34>
 8006a5c:	692b      	ldr	r3, [r5, #16]
 8006a5e:	b99b      	cbnz	r3, 8006a88 <_vfiprintf_r+0x5c>
 8006a60:	4629      	mov	r1, r5
 8006a62:	4630      	mov	r0, r6
 8006a64:	f000 f93a 	bl	8006cdc <__swsetup_r>
 8006a68:	b170      	cbz	r0, 8006a88 <_vfiprintf_r+0x5c>
 8006a6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a6c:	07dc      	lsls	r4, r3, #31
 8006a6e:	d504      	bpl.n	8006a7a <_vfiprintf_r+0x4e>
 8006a70:	f04f 30ff 	mov.w	r0, #4294967295
 8006a74:	b01d      	add	sp, #116	; 0x74
 8006a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a7a:	89ab      	ldrh	r3, [r5, #12]
 8006a7c:	0598      	lsls	r0, r3, #22
 8006a7e:	d4f7      	bmi.n	8006a70 <_vfiprintf_r+0x44>
 8006a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a82:	f7fe f9d1 	bl	8004e28 <__retarget_lock_release_recursive>
 8006a86:	e7f3      	b.n	8006a70 <_vfiprintf_r+0x44>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a8c:	2320      	movs	r3, #32
 8006a8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a92:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a96:	2330      	movs	r3, #48	; 0x30
 8006a98:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006c4c <_vfiprintf_r+0x220>
 8006a9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006aa0:	f04f 0901 	mov.w	r9, #1
 8006aa4:	4623      	mov	r3, r4
 8006aa6:	469a      	mov	sl, r3
 8006aa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006aac:	b10a      	cbz	r2, 8006ab2 <_vfiprintf_r+0x86>
 8006aae:	2a25      	cmp	r2, #37	; 0x25
 8006ab0:	d1f9      	bne.n	8006aa6 <_vfiprintf_r+0x7a>
 8006ab2:	ebba 0b04 	subs.w	fp, sl, r4
 8006ab6:	d00b      	beq.n	8006ad0 <_vfiprintf_r+0xa4>
 8006ab8:	465b      	mov	r3, fp
 8006aba:	4622      	mov	r2, r4
 8006abc:	4629      	mov	r1, r5
 8006abe:	4630      	mov	r0, r6
 8006ac0:	f7ff ffa2 	bl	8006a08 <__sfputs_r>
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	f000 80a9 	beq.w	8006c1c <_vfiprintf_r+0x1f0>
 8006aca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006acc:	445a      	add	r2, fp
 8006ace:	9209      	str	r2, [sp, #36]	; 0x24
 8006ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 80a1 	beq.w	8006c1c <_vfiprintf_r+0x1f0>
 8006ada:	2300      	movs	r3, #0
 8006adc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ae4:	f10a 0a01 	add.w	sl, sl, #1
 8006ae8:	9304      	str	r3, [sp, #16]
 8006aea:	9307      	str	r3, [sp, #28]
 8006aec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006af0:	931a      	str	r3, [sp, #104]	; 0x68
 8006af2:	4654      	mov	r4, sl
 8006af4:	2205      	movs	r2, #5
 8006af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006afa:	4854      	ldr	r0, [pc, #336]	; (8006c4c <_vfiprintf_r+0x220>)
 8006afc:	f7f9 fb70 	bl	80001e0 <memchr>
 8006b00:	9a04      	ldr	r2, [sp, #16]
 8006b02:	b9d8      	cbnz	r0, 8006b3c <_vfiprintf_r+0x110>
 8006b04:	06d1      	lsls	r1, r2, #27
 8006b06:	bf44      	itt	mi
 8006b08:	2320      	movmi	r3, #32
 8006b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b0e:	0713      	lsls	r3, r2, #28
 8006b10:	bf44      	itt	mi
 8006b12:	232b      	movmi	r3, #43	; 0x2b
 8006b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b18:	f89a 3000 	ldrb.w	r3, [sl]
 8006b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8006b1e:	d015      	beq.n	8006b4c <_vfiprintf_r+0x120>
 8006b20:	9a07      	ldr	r2, [sp, #28]
 8006b22:	4654      	mov	r4, sl
 8006b24:	2000      	movs	r0, #0
 8006b26:	f04f 0c0a 	mov.w	ip, #10
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b30:	3b30      	subs	r3, #48	; 0x30
 8006b32:	2b09      	cmp	r3, #9
 8006b34:	d94d      	bls.n	8006bd2 <_vfiprintf_r+0x1a6>
 8006b36:	b1b0      	cbz	r0, 8006b66 <_vfiprintf_r+0x13a>
 8006b38:	9207      	str	r2, [sp, #28]
 8006b3a:	e014      	b.n	8006b66 <_vfiprintf_r+0x13a>
 8006b3c:	eba0 0308 	sub.w	r3, r0, r8
 8006b40:	fa09 f303 	lsl.w	r3, r9, r3
 8006b44:	4313      	orrs	r3, r2
 8006b46:	9304      	str	r3, [sp, #16]
 8006b48:	46a2      	mov	sl, r4
 8006b4a:	e7d2      	b.n	8006af2 <_vfiprintf_r+0xc6>
 8006b4c:	9b03      	ldr	r3, [sp, #12]
 8006b4e:	1d19      	adds	r1, r3, #4
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	9103      	str	r1, [sp, #12]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	bfbb      	ittet	lt
 8006b58:	425b      	neglt	r3, r3
 8006b5a:	f042 0202 	orrlt.w	r2, r2, #2
 8006b5e:	9307      	strge	r3, [sp, #28]
 8006b60:	9307      	strlt	r3, [sp, #28]
 8006b62:	bfb8      	it	lt
 8006b64:	9204      	strlt	r2, [sp, #16]
 8006b66:	7823      	ldrb	r3, [r4, #0]
 8006b68:	2b2e      	cmp	r3, #46	; 0x2e
 8006b6a:	d10c      	bne.n	8006b86 <_vfiprintf_r+0x15a>
 8006b6c:	7863      	ldrb	r3, [r4, #1]
 8006b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8006b70:	d134      	bne.n	8006bdc <_vfiprintf_r+0x1b0>
 8006b72:	9b03      	ldr	r3, [sp, #12]
 8006b74:	1d1a      	adds	r2, r3, #4
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	9203      	str	r2, [sp, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	bfb8      	it	lt
 8006b7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b82:	3402      	adds	r4, #2
 8006b84:	9305      	str	r3, [sp, #20]
 8006b86:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006c5c <_vfiprintf_r+0x230>
 8006b8a:	7821      	ldrb	r1, [r4, #0]
 8006b8c:	2203      	movs	r2, #3
 8006b8e:	4650      	mov	r0, sl
 8006b90:	f7f9 fb26 	bl	80001e0 <memchr>
 8006b94:	b138      	cbz	r0, 8006ba6 <_vfiprintf_r+0x17a>
 8006b96:	9b04      	ldr	r3, [sp, #16]
 8006b98:	eba0 000a 	sub.w	r0, r0, sl
 8006b9c:	2240      	movs	r2, #64	; 0x40
 8006b9e:	4082      	lsls	r2, r0
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	3401      	adds	r4, #1
 8006ba4:	9304      	str	r3, [sp, #16]
 8006ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006baa:	4829      	ldr	r0, [pc, #164]	; (8006c50 <_vfiprintf_r+0x224>)
 8006bac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bb0:	2206      	movs	r2, #6
 8006bb2:	f7f9 fb15 	bl	80001e0 <memchr>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d03f      	beq.n	8006c3a <_vfiprintf_r+0x20e>
 8006bba:	4b26      	ldr	r3, [pc, #152]	; (8006c54 <_vfiprintf_r+0x228>)
 8006bbc:	bb1b      	cbnz	r3, 8006c06 <_vfiprintf_r+0x1da>
 8006bbe:	9b03      	ldr	r3, [sp, #12]
 8006bc0:	3307      	adds	r3, #7
 8006bc2:	f023 0307 	bic.w	r3, r3, #7
 8006bc6:	3308      	adds	r3, #8
 8006bc8:	9303      	str	r3, [sp, #12]
 8006bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bcc:	443b      	add	r3, r7
 8006bce:	9309      	str	r3, [sp, #36]	; 0x24
 8006bd0:	e768      	b.n	8006aa4 <_vfiprintf_r+0x78>
 8006bd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	2001      	movs	r0, #1
 8006bda:	e7a6      	b.n	8006b2a <_vfiprintf_r+0xfe>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	3401      	adds	r4, #1
 8006be0:	9305      	str	r3, [sp, #20]
 8006be2:	4619      	mov	r1, r3
 8006be4:	f04f 0c0a 	mov.w	ip, #10
 8006be8:	4620      	mov	r0, r4
 8006bea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bee:	3a30      	subs	r2, #48	; 0x30
 8006bf0:	2a09      	cmp	r2, #9
 8006bf2:	d903      	bls.n	8006bfc <_vfiprintf_r+0x1d0>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0c6      	beq.n	8006b86 <_vfiprintf_r+0x15a>
 8006bf8:	9105      	str	r1, [sp, #20]
 8006bfa:	e7c4      	b.n	8006b86 <_vfiprintf_r+0x15a>
 8006bfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c00:	4604      	mov	r4, r0
 8006c02:	2301      	movs	r3, #1
 8006c04:	e7f0      	b.n	8006be8 <_vfiprintf_r+0x1bc>
 8006c06:	ab03      	add	r3, sp, #12
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	462a      	mov	r2, r5
 8006c0c:	4b12      	ldr	r3, [pc, #72]	; (8006c58 <_vfiprintf_r+0x22c>)
 8006c0e:	a904      	add	r1, sp, #16
 8006c10:	4630      	mov	r0, r6
 8006c12:	f7fd fb8b 	bl	800432c <_printf_float>
 8006c16:	4607      	mov	r7, r0
 8006c18:	1c78      	adds	r0, r7, #1
 8006c1a:	d1d6      	bne.n	8006bca <_vfiprintf_r+0x19e>
 8006c1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c1e:	07d9      	lsls	r1, r3, #31
 8006c20:	d405      	bmi.n	8006c2e <_vfiprintf_r+0x202>
 8006c22:	89ab      	ldrh	r3, [r5, #12]
 8006c24:	059a      	lsls	r2, r3, #22
 8006c26:	d402      	bmi.n	8006c2e <_vfiprintf_r+0x202>
 8006c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c2a:	f7fe f8fd 	bl	8004e28 <__retarget_lock_release_recursive>
 8006c2e:	89ab      	ldrh	r3, [r5, #12]
 8006c30:	065b      	lsls	r3, r3, #25
 8006c32:	f53f af1d 	bmi.w	8006a70 <_vfiprintf_r+0x44>
 8006c36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c38:	e71c      	b.n	8006a74 <_vfiprintf_r+0x48>
 8006c3a:	ab03      	add	r3, sp, #12
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	462a      	mov	r2, r5
 8006c40:	4b05      	ldr	r3, [pc, #20]	; (8006c58 <_vfiprintf_r+0x22c>)
 8006c42:	a904      	add	r1, sp, #16
 8006c44:	4630      	mov	r0, r6
 8006c46:	f7fd fe15 	bl	8004874 <_printf_i>
 8006c4a:	e7e4      	b.n	8006c16 <_vfiprintf_r+0x1ea>
 8006c4c:	080072a4 	.word	0x080072a4
 8006c50:	080072ae 	.word	0x080072ae
 8006c54:	0800432d 	.word	0x0800432d
 8006c58:	08006a09 	.word	0x08006a09
 8006c5c:	080072aa 	.word	0x080072aa

08006c60 <__swbuf_r>:
 8006c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c62:	460e      	mov	r6, r1
 8006c64:	4614      	mov	r4, r2
 8006c66:	4605      	mov	r5, r0
 8006c68:	b118      	cbz	r0, 8006c72 <__swbuf_r+0x12>
 8006c6a:	6a03      	ldr	r3, [r0, #32]
 8006c6c:	b90b      	cbnz	r3, 8006c72 <__swbuf_r+0x12>
 8006c6e:	f7fd ffaf 	bl	8004bd0 <__sinit>
 8006c72:	69a3      	ldr	r3, [r4, #24]
 8006c74:	60a3      	str	r3, [r4, #8]
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	071a      	lsls	r2, r3, #28
 8006c7a:	d525      	bpl.n	8006cc8 <__swbuf_r+0x68>
 8006c7c:	6923      	ldr	r3, [r4, #16]
 8006c7e:	b31b      	cbz	r3, 8006cc8 <__swbuf_r+0x68>
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	6922      	ldr	r2, [r4, #16]
 8006c84:	1a98      	subs	r0, r3, r2
 8006c86:	6963      	ldr	r3, [r4, #20]
 8006c88:	b2f6      	uxtb	r6, r6
 8006c8a:	4283      	cmp	r3, r0
 8006c8c:	4637      	mov	r7, r6
 8006c8e:	dc04      	bgt.n	8006c9a <__swbuf_r+0x3a>
 8006c90:	4621      	mov	r1, r4
 8006c92:	4628      	mov	r0, r5
 8006c94:	f7ff fdac 	bl	80067f0 <_fflush_r>
 8006c98:	b9e0      	cbnz	r0, 8006cd4 <__swbuf_r+0x74>
 8006c9a:	68a3      	ldr	r3, [r4, #8]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	60a3      	str	r3, [r4, #8]
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	6022      	str	r2, [r4, #0]
 8006ca6:	701e      	strb	r6, [r3, #0]
 8006ca8:	6962      	ldr	r2, [r4, #20]
 8006caa:	1c43      	adds	r3, r0, #1
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d004      	beq.n	8006cba <__swbuf_r+0x5a>
 8006cb0:	89a3      	ldrh	r3, [r4, #12]
 8006cb2:	07db      	lsls	r3, r3, #31
 8006cb4:	d506      	bpl.n	8006cc4 <__swbuf_r+0x64>
 8006cb6:	2e0a      	cmp	r6, #10
 8006cb8:	d104      	bne.n	8006cc4 <__swbuf_r+0x64>
 8006cba:	4621      	mov	r1, r4
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	f7ff fd97 	bl	80067f0 <_fflush_r>
 8006cc2:	b938      	cbnz	r0, 8006cd4 <__swbuf_r+0x74>
 8006cc4:	4638      	mov	r0, r7
 8006cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cc8:	4621      	mov	r1, r4
 8006cca:	4628      	mov	r0, r5
 8006ccc:	f000 f806 	bl	8006cdc <__swsetup_r>
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	d0d5      	beq.n	8006c80 <__swbuf_r+0x20>
 8006cd4:	f04f 37ff 	mov.w	r7, #4294967295
 8006cd8:	e7f4      	b.n	8006cc4 <__swbuf_r+0x64>
	...

08006cdc <__swsetup_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	4b2a      	ldr	r3, [pc, #168]	; (8006d88 <__swsetup_r+0xac>)
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	6818      	ldr	r0, [r3, #0]
 8006ce4:	460c      	mov	r4, r1
 8006ce6:	b118      	cbz	r0, 8006cf0 <__swsetup_r+0x14>
 8006ce8:	6a03      	ldr	r3, [r0, #32]
 8006cea:	b90b      	cbnz	r3, 8006cf0 <__swsetup_r+0x14>
 8006cec:	f7fd ff70 	bl	8004bd0 <__sinit>
 8006cf0:	89a3      	ldrh	r3, [r4, #12]
 8006cf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cf6:	0718      	lsls	r0, r3, #28
 8006cf8:	d422      	bmi.n	8006d40 <__swsetup_r+0x64>
 8006cfa:	06d9      	lsls	r1, r3, #27
 8006cfc:	d407      	bmi.n	8006d0e <__swsetup_r+0x32>
 8006cfe:	2309      	movs	r3, #9
 8006d00:	602b      	str	r3, [r5, #0]
 8006d02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d06:	81a3      	strh	r3, [r4, #12]
 8006d08:	f04f 30ff 	mov.w	r0, #4294967295
 8006d0c:	e034      	b.n	8006d78 <__swsetup_r+0x9c>
 8006d0e:	0758      	lsls	r0, r3, #29
 8006d10:	d512      	bpl.n	8006d38 <__swsetup_r+0x5c>
 8006d12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d14:	b141      	cbz	r1, 8006d28 <__swsetup_r+0x4c>
 8006d16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d1a:	4299      	cmp	r1, r3
 8006d1c:	d002      	beq.n	8006d24 <__swsetup_r+0x48>
 8006d1e:	4628      	mov	r0, r5
 8006d20:	f7fe ff0c 	bl	8005b3c <_free_r>
 8006d24:	2300      	movs	r3, #0
 8006d26:	6363      	str	r3, [r4, #52]	; 0x34
 8006d28:	89a3      	ldrh	r3, [r4, #12]
 8006d2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d2e:	81a3      	strh	r3, [r4, #12]
 8006d30:	2300      	movs	r3, #0
 8006d32:	6063      	str	r3, [r4, #4]
 8006d34:	6923      	ldr	r3, [r4, #16]
 8006d36:	6023      	str	r3, [r4, #0]
 8006d38:	89a3      	ldrh	r3, [r4, #12]
 8006d3a:	f043 0308 	orr.w	r3, r3, #8
 8006d3e:	81a3      	strh	r3, [r4, #12]
 8006d40:	6923      	ldr	r3, [r4, #16]
 8006d42:	b94b      	cbnz	r3, 8006d58 <__swsetup_r+0x7c>
 8006d44:	89a3      	ldrh	r3, [r4, #12]
 8006d46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d4e:	d003      	beq.n	8006d58 <__swsetup_r+0x7c>
 8006d50:	4621      	mov	r1, r4
 8006d52:	4628      	mov	r0, r5
 8006d54:	f000 f884 	bl	8006e60 <__smakebuf_r>
 8006d58:	89a0      	ldrh	r0, [r4, #12]
 8006d5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d5e:	f010 0301 	ands.w	r3, r0, #1
 8006d62:	d00a      	beq.n	8006d7a <__swsetup_r+0x9e>
 8006d64:	2300      	movs	r3, #0
 8006d66:	60a3      	str	r3, [r4, #8]
 8006d68:	6963      	ldr	r3, [r4, #20]
 8006d6a:	425b      	negs	r3, r3
 8006d6c:	61a3      	str	r3, [r4, #24]
 8006d6e:	6923      	ldr	r3, [r4, #16]
 8006d70:	b943      	cbnz	r3, 8006d84 <__swsetup_r+0xa8>
 8006d72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d76:	d1c4      	bne.n	8006d02 <__swsetup_r+0x26>
 8006d78:	bd38      	pop	{r3, r4, r5, pc}
 8006d7a:	0781      	lsls	r1, r0, #30
 8006d7c:	bf58      	it	pl
 8006d7e:	6963      	ldrpl	r3, [r4, #20]
 8006d80:	60a3      	str	r3, [r4, #8]
 8006d82:	e7f4      	b.n	8006d6e <__swsetup_r+0x92>
 8006d84:	2000      	movs	r0, #0
 8006d86:	e7f7      	b.n	8006d78 <__swsetup_r+0x9c>
 8006d88:	20000064 	.word	0x20000064

08006d8c <_raise_r>:
 8006d8c:	291f      	cmp	r1, #31
 8006d8e:	b538      	push	{r3, r4, r5, lr}
 8006d90:	4604      	mov	r4, r0
 8006d92:	460d      	mov	r5, r1
 8006d94:	d904      	bls.n	8006da0 <_raise_r+0x14>
 8006d96:	2316      	movs	r3, #22
 8006d98:	6003      	str	r3, [r0, #0]
 8006d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d9e:	bd38      	pop	{r3, r4, r5, pc}
 8006da0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006da2:	b112      	cbz	r2, 8006daa <_raise_r+0x1e>
 8006da4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006da8:	b94b      	cbnz	r3, 8006dbe <_raise_r+0x32>
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 f830 	bl	8006e10 <_getpid_r>
 8006db0:	462a      	mov	r2, r5
 8006db2:	4601      	mov	r1, r0
 8006db4:	4620      	mov	r0, r4
 8006db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dba:	f000 b817 	b.w	8006dec <_kill_r>
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d00a      	beq.n	8006dd8 <_raise_r+0x4c>
 8006dc2:	1c59      	adds	r1, r3, #1
 8006dc4:	d103      	bne.n	8006dce <_raise_r+0x42>
 8006dc6:	2316      	movs	r3, #22
 8006dc8:	6003      	str	r3, [r0, #0]
 8006dca:	2001      	movs	r0, #1
 8006dcc:	e7e7      	b.n	8006d9e <_raise_r+0x12>
 8006dce:	2400      	movs	r4, #0
 8006dd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	4798      	blx	r3
 8006dd8:	2000      	movs	r0, #0
 8006dda:	e7e0      	b.n	8006d9e <_raise_r+0x12>

08006ddc <raise>:
 8006ddc:	4b02      	ldr	r3, [pc, #8]	; (8006de8 <raise+0xc>)
 8006dde:	4601      	mov	r1, r0
 8006de0:	6818      	ldr	r0, [r3, #0]
 8006de2:	f7ff bfd3 	b.w	8006d8c <_raise_r>
 8006de6:	bf00      	nop
 8006de8:	20000064 	.word	0x20000064

08006dec <_kill_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	4d07      	ldr	r5, [pc, #28]	; (8006e0c <_kill_r+0x20>)
 8006df0:	2300      	movs	r3, #0
 8006df2:	4604      	mov	r4, r0
 8006df4:	4608      	mov	r0, r1
 8006df6:	4611      	mov	r1, r2
 8006df8:	602b      	str	r3, [r5, #0]
 8006dfa:	f7fa fd2b 	bl	8001854 <_kill>
 8006dfe:	1c43      	adds	r3, r0, #1
 8006e00:	d102      	bne.n	8006e08 <_kill_r+0x1c>
 8006e02:	682b      	ldr	r3, [r5, #0]
 8006e04:	b103      	cbz	r3, 8006e08 <_kill_r+0x1c>
 8006e06:	6023      	str	r3, [r4, #0]
 8006e08:	bd38      	pop	{r3, r4, r5, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20000404 	.word	0x20000404

08006e10 <_getpid_r>:
 8006e10:	f7fa bd18 	b.w	8001844 <_getpid>

08006e14 <__swhatbuf_r>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	460c      	mov	r4, r1
 8006e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e1c:	2900      	cmp	r1, #0
 8006e1e:	b096      	sub	sp, #88	; 0x58
 8006e20:	4615      	mov	r5, r2
 8006e22:	461e      	mov	r6, r3
 8006e24:	da0d      	bge.n	8006e42 <__swhatbuf_r+0x2e>
 8006e26:	89a3      	ldrh	r3, [r4, #12]
 8006e28:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006e2c:	f04f 0100 	mov.w	r1, #0
 8006e30:	bf0c      	ite	eq
 8006e32:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006e36:	2340      	movne	r3, #64	; 0x40
 8006e38:	2000      	movs	r0, #0
 8006e3a:	6031      	str	r1, [r6, #0]
 8006e3c:	602b      	str	r3, [r5, #0]
 8006e3e:	b016      	add	sp, #88	; 0x58
 8006e40:	bd70      	pop	{r4, r5, r6, pc}
 8006e42:	466a      	mov	r2, sp
 8006e44:	f000 f848 	bl	8006ed8 <_fstat_r>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	dbec      	blt.n	8006e26 <__swhatbuf_r+0x12>
 8006e4c:	9901      	ldr	r1, [sp, #4]
 8006e4e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006e52:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006e56:	4259      	negs	r1, r3
 8006e58:	4159      	adcs	r1, r3
 8006e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e5e:	e7eb      	b.n	8006e38 <__swhatbuf_r+0x24>

08006e60 <__smakebuf_r>:
 8006e60:	898b      	ldrh	r3, [r1, #12]
 8006e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e64:	079d      	lsls	r5, r3, #30
 8006e66:	4606      	mov	r6, r0
 8006e68:	460c      	mov	r4, r1
 8006e6a:	d507      	bpl.n	8006e7c <__smakebuf_r+0x1c>
 8006e6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e70:	6023      	str	r3, [r4, #0]
 8006e72:	6123      	str	r3, [r4, #16]
 8006e74:	2301      	movs	r3, #1
 8006e76:	6163      	str	r3, [r4, #20]
 8006e78:	b002      	add	sp, #8
 8006e7a:	bd70      	pop	{r4, r5, r6, pc}
 8006e7c:	ab01      	add	r3, sp, #4
 8006e7e:	466a      	mov	r2, sp
 8006e80:	f7ff ffc8 	bl	8006e14 <__swhatbuf_r>
 8006e84:	9900      	ldr	r1, [sp, #0]
 8006e86:	4605      	mov	r5, r0
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f7fe fecb 	bl	8005c24 <_malloc_r>
 8006e8e:	b948      	cbnz	r0, 8006ea4 <__smakebuf_r+0x44>
 8006e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e94:	059a      	lsls	r2, r3, #22
 8006e96:	d4ef      	bmi.n	8006e78 <__smakebuf_r+0x18>
 8006e98:	f023 0303 	bic.w	r3, r3, #3
 8006e9c:	f043 0302 	orr.w	r3, r3, #2
 8006ea0:	81a3      	strh	r3, [r4, #12]
 8006ea2:	e7e3      	b.n	8006e6c <__smakebuf_r+0xc>
 8006ea4:	89a3      	ldrh	r3, [r4, #12]
 8006ea6:	6020      	str	r0, [r4, #0]
 8006ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eac:	81a3      	strh	r3, [r4, #12]
 8006eae:	9b00      	ldr	r3, [sp, #0]
 8006eb0:	6163      	str	r3, [r4, #20]
 8006eb2:	9b01      	ldr	r3, [sp, #4]
 8006eb4:	6120      	str	r0, [r4, #16]
 8006eb6:	b15b      	cbz	r3, 8006ed0 <__smakebuf_r+0x70>
 8006eb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	f000 f81d 	bl	8006efc <_isatty_r>
 8006ec2:	b128      	cbz	r0, 8006ed0 <__smakebuf_r+0x70>
 8006ec4:	89a3      	ldrh	r3, [r4, #12]
 8006ec6:	f023 0303 	bic.w	r3, r3, #3
 8006eca:	f043 0301 	orr.w	r3, r3, #1
 8006ece:	81a3      	strh	r3, [r4, #12]
 8006ed0:	89a3      	ldrh	r3, [r4, #12]
 8006ed2:	431d      	orrs	r5, r3
 8006ed4:	81a5      	strh	r5, [r4, #12]
 8006ed6:	e7cf      	b.n	8006e78 <__smakebuf_r+0x18>

08006ed8 <_fstat_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4d07      	ldr	r5, [pc, #28]	; (8006ef8 <_fstat_r+0x20>)
 8006edc:	2300      	movs	r3, #0
 8006ede:	4604      	mov	r4, r0
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	602b      	str	r3, [r5, #0]
 8006ee6:	f7fa fd14 	bl	8001912 <_fstat>
 8006eea:	1c43      	adds	r3, r0, #1
 8006eec:	d102      	bne.n	8006ef4 <_fstat_r+0x1c>
 8006eee:	682b      	ldr	r3, [r5, #0]
 8006ef0:	b103      	cbz	r3, 8006ef4 <_fstat_r+0x1c>
 8006ef2:	6023      	str	r3, [r4, #0]
 8006ef4:	bd38      	pop	{r3, r4, r5, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20000404 	.word	0x20000404

08006efc <_isatty_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	4d06      	ldr	r5, [pc, #24]	; (8006f18 <_isatty_r+0x1c>)
 8006f00:	2300      	movs	r3, #0
 8006f02:	4604      	mov	r4, r0
 8006f04:	4608      	mov	r0, r1
 8006f06:	602b      	str	r3, [r5, #0]
 8006f08:	f7fa fd13 	bl	8001932 <_isatty>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d102      	bne.n	8006f16 <_isatty_r+0x1a>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	b103      	cbz	r3, 8006f16 <_isatty_r+0x1a>
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	20000404 	.word	0x20000404

08006f1c <_init>:
 8006f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1e:	bf00      	nop
 8006f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f22:	bc08      	pop	{r3}
 8006f24:	469e      	mov	lr, r3
 8006f26:	4770      	bx	lr

08006f28 <_fini>:
 8006f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f2a:	bf00      	nop
 8006f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f2e:	bc08      	pop	{r3}
 8006f30:	469e      	mov	lr, r3
 8006f32:	4770      	bx	lr
